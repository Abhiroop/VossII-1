%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Mon Feb  8 12:25:32 1993
%%For: seger
%%DocumentFonts: (atend)
%%Pages: 0 1
%%BoundingBox: 0 0 407 209
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
	exch dup 1 add dup UserObjects length gt{
		array dup 0 UserObjects putinterval
		/UserObjects exch def
	}{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
	1 index type /arraytype eq{
		exch 0 4 2 index length 1 sub{
			dup 3 add 1 exch{1 index exch get exch}for
			5 1 roll 5 index exec
		}for pop pop
	}{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
	gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
		{gsave __NXRectPath null concat stroke grestore}
		dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
	}{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		3 index 3 index 2 mul 1 add get add exch
		3 index	3 index 2 mul get add exch moveto pop
	}for pop pop
}__NXbdef
/xshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		exch 3 index 3 index get add exch moveto pop
	}for pop pop
}__NXbdef
/yshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		3 index 3 index get add moveto pop
	}for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
	gsave newpath dup length 6 eq
	{exch uappend concat}{uappend}ifelse
	stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
	newpath dup length 6 eq{
		exch uappend __NXustrokepathMatrix currentmatrix exch concat
		strokepath setmatrix
	}{uappend strokepath}ifelse
} __NXbdef
/upath{
	[exch {/ucache cvx}if pathbbox /setbbox cvx
	 {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
	counttomark dup 2 add index dup length 3 -1 roll {
		2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
	}repeat pop pop pop
}__NXbdef
/setcmykcolor{
	1.0 exch sub dup dup 6 -1 roll
	sub dup 0 lt{pop 0}if 5 1 roll
	4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
	exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {	dup length dict exch
	{1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
	 dup /Encoding NextStepEncoding put definefont
	}{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
	1 index{dup}{1}ifelse /_NXChannels exch store
	_NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
	5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
	4 index mul /_NXTotalBytes exch store pop exch pop
	gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
	{	0 1 _NXChannels 1 sub{
			_NXProcArray exch get exec
			length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
		_NXTotalBytes 0 le{exit}if
	}loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /pgmat matrix def /idmat matrix
def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def
/sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt
matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw
1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def
crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat
0 def /crflat currentflat def /dftflat currentflat def /strinclr false def
/crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph
1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def
/crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr
false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred
0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw
true def /txlninclr false def /txlnwpat false def /txlnwittrans false def
/crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph
1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0
def /usedash false def /filwpat false def /strwpat false def /filwittrans
false def /strwittrans false def /crfrtarw false def /crendarw false def
/rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave
0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix
sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke
grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto
stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def
/xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto
4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap
crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x
2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash
{
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse crfrtarw {
        currentlinewidth p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /arwlen 6 def /arw 4 def /arow {
    gsave newpath moveto lineto unpagectm {
        
    } {
        
    } {
        
    } {
        
    } pathforall newpath 4 2 roll 2 copy moveto 4 2 roll exch 4 -1 roll exch
sub 3 1 roll sub exch atan rotate dup 1 lt {
        pop 1 1 scale
    } {
        dup scale
    } ifelse -1 2 rlineto 7 -2 rlineto -7 -2 rlineto closepath crlinalph
setalpha strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse strwpat {
        crstrpat findfont strwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /arwpath {
    sc7mt currentmatrix pop gsave newpath moveto lineto unpagectm {
        
    } {
        
    } {
        
    } {
        
    } pathforall grestore unpagectm 4 2 roll 2 copy moveto 4 2 roll exch
4 -1 roll exch sub 3 1 roll sub exch atan rotate dup 1 lt {
        pop 1 1 scale
    } {
        dup scale
    } ifelse -1 2 rlineto 7 -2 rlineto -7 -2 rlineto closepath sc7mt setmatrix
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw
setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto
0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 406.746002 209 rectclip
-101.396027 -498 translate
101.396027 498 406.746002 209 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 1.1 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
/crendarw true def
1 0 0 1 0 0 sc5mt astore 86 0 347.600006 574 1 0 0 1 0 0 sc6mt astore ssl
idmat crlinw 249.987198 573.000061 250 573 arow
false [1 0 0 1 0 0] sstrt
systemdict
begin
207 573 406 682 setbbox
361 574 moveto
361 574 406 574 406 574 curveto
406 574 406 682 406 682 curveto
406 682 207 682 207 682 curveto
207 682 207 573 207 573 curveto
207 573 250 573 250 573 curveto
end
/nspans 5 def [1 0 0 1 0 0] splstroke
/crendarw false def
264 628 97 -126 1.061856 0 0 1 -22.329895 0 sc6mt astore rfill
1 0 0 1 0 0 sc5mt astore 264 628 97 -126 1.061856 0 0 1 -22.329895 0 sc6mt
astore rstroke
/txtdraw true def
/txlndraw true def
(Module ) [10.667999 0 6 0 6 0 6 0 3.335999 0 5.328003 0 -42.98999
-13.392029 6.671997 0 3.996002 0 6 0 5.328003 0 5.328003 0 6 0 6 0 3.996002
0 5.328003 0 0 0] 289.333984 581 /Times-Roman [ 12 1 mul 0 0 12 0 0 ] [1
0 0 1 -2 -7] dotx
302 702 27 -44 1 0 0 1 0 0 sc6mt astore rfill
1 0 0 1 0 0 sc5mt astore 302 702 27 -44 1 0 0 1 0 0 sc6mt astore rstroke
(D ) [8.664001 0 0 0] 303.667999 581 /Times-Roman [ 12 1 mul 0 0 12 0 0 ]
[1 0 0 1 7.600006 95] dotx
/crendarw true def
1 0 0 1 0 0 sc5mt astore 86 0 164 530 1 0 0 1 0 0 sc6mt astore ssl
/crendarw false def
302 702 27 -44 1 0 0 1 -103.399994 -149 sc6mt astore rfill
1 0 0 1 -125 -149 sc5mt astore 302 702 27 -44 1 0 0 1 -103.399994 -149 sc6mt
astore rstroke
(D ) [8.664001 0 0 0] 303.667999 581 /Times-Roman [ 12 1 mul 0 0 12 0 0 ]
[1 0 0 1 -95.799988 -54] dotx
(New inputs ) [8.664001 0 5.028015 0 8.664001 0 3 0 3.335999 0 6 0 6 0 6
0 3.335999 0 4.667999 0 0 0] 280.652008 581 /Times-Roman [ 12 1 mul 0 0 12
0 0 ] [1 0 0 1 -179.399994 -55] dotx
(Current state ) [8.003998 0 6 0 3.996002 0 3.996002 0 5.328003 0 6 0 3.335999
0 3 0 4.667999 0 3.335999 0 5.328003 0 3.335999 0 5.328003 0 0 0] 277.171997
581 /Times-Roman [ 12 1 mul 0 0 12 0 0 ] [1 0 0 1 -139.799988 53] dotx
(New state and outputs ) [8.664001 0 5.028015 0 8.664001 0 3 0 4.667999 0
3.335999 0 5.328003 0 3.335999 0 5.328003 0 -51.51001 -13.392029 5.328003
0 6 0 6 0 3 0 6 0 6 0 3.335999 0 6 0 6 0 3.335999 0 4.667999 0 0 0] 284.324005
581 /Times-Roman [ 12 1 mul 0 0 12 0 0 ] [1 0 0 1 172.800018 -7] dotx
end
grestore
grestore
%%Trailer
