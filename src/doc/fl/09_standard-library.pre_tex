\section{Standard Libraries}

Since Fl is a very young language, there are no extensive
standard libraries%
\index{standard libraries}%
{} and thus this section is very tentative and is likely
to be modified significantly in future releases.
All standard libraries reside in the vosslib%
\index{vosslib}%
{} directory.
The easiest way to make sure this directory is in the search path
for fl is to create a file called {\em .vossrc} in your home directory
that contains a line
\begin{hol}
VOSS-LIBRARY-DIRECTORY = /path/where/voss/is/installed/vosslib
\end{hol}

\subsection{defaults.fl}
\index{defaults.fl}

This is a basic library that contains many useful general functions.

\newcommand{\FlFun}[2]{\parbox[t]{2in}{#1}  \parbox[t]{4.5in}{#2}}
\begin{tabbing}
excitation             \=         \kill
\FlFun{length l}{Returns the length of the list l.}\\
\FlFun{append l1 l2}{Appends lists l1 and l2. Note '@' and 'and' are infix aliases to append.}\\
\FlFun{el i l}{Select element i in list l. List elements are numbered from 1.}\\
\FlFun{last l}{Return the last element in list l.}\\
\FlFun{butlast l }{Return the list l with the last element removed.}\\
\FlFun{replicate x n }{Return a list with n copies of x as elements.}\\
\FlFun{map fn l }{Apply the function fn to each element of the list l and return the resulting list.}\\
\FlFun{itlist f l x }{Combine all the elements in l with the function f, i.e., f (hd l) (f (el 2 l) (f (el 3 l) (... (f (last l) x)))...).}\\
\FlFun{rev\_itlist f l x }{As itlist, but do it in reverse.}\\
\FlFun{find p l }{Return the first element in the list that makes the predicate p true.}\\
\FlFun{exists p l }{Determine whether an element exists in the list l that satisfies the predicate p.}\\
\FlFun{forall p l }{Determine whether all elements in in the list l satisfies the predicate p.}\\
\FlFun{mem x l }{Determines whether there is an element in l equal to x.}\\
\FlFun{assoc x al }{Return the second component of a pair in the list l whose first component is equal to x.}\\
\FlFun{rev\_assoc x l }{Same as assoc but exchange meaning of fst and snd.}\\
\FlFun{rev xl }{Reverse list xl.}\\
\FlFun{filter p l }{Returns the list obtained by removing from l every element that does not satisfy p. }\\
\FlFun{flat ll }{Takes a list of lists and return the list obtained by merging all the lists.}\\
\FlFun{interleave ll }{Takes a list of lists and returns a single list that is the interleaving of each list.}\\
\FlFun{combine l r }{Takes lists l and r and creates a list of pairs whose first components are drawn from l and whose second components are drawn from r.}\\
\FlFun{split pl }{Takes a list of pairs and returns a pair of lists. The first list are all first components of the pairs and the second list contain all second components of the pairs.}\\
\FlFun{s1 intersect s2 }{Return the list of elements common to both s1 and s2.}\\
\FlFun{s1 subtract s2 }{Return the list of elements that are in s1 but not in s2.}\\
\FlFun{s1 union s2 }{Return the union (no duplicates) of s1 and s2.}\\
\FlFun{distinct l }{Determines whether there are any duplicates in the list l. If so, returns false; otherwise returns true.}\\
\FlFun{setify l }{Take a list and make it into a set (no duplicates).}\\
\FlFun{s1 set\_equal s2 }{Determines whether the two sets s1 and s2 are equal.}\\
\FlFun{declare vl }{Takes a list of Boolean variables and forces them to be evaluated in the order they appear in the list. Useful in declaring Boolean variables for the OBDD ordering.}\\
\FlFun{num2str n }{Converts a number (positive) to a string.}\\
\FlFun{lg n }{Computes the number of bits requires to represent n as an unsigned binary number.}\\
\FlFun{bdd\_profile expr\_list }{Takes a list of Boolean expressions and prints out a histogram over the width of the combined OBDD forest.}\\
\FlFun{excitation ckt nd }{Computes the next state function for node nd in circuit ckt. {\em NOTE:} this function only works correctly when using the UNIT-DELAY model.}\\
\FlFun{node\_profile ckt node\_list }{Prints out a bdd profile for all the current values on the nodes in node\_list. Mostly useful in conjunction with the '-m n' option to STE (i.e., abort the simulation at a suitable time and check the size\\
and profile of the OBDDs on the selected nodes.}
\end{tabbing}

\subsection{verification.fl}
\index{verification.fl}

This is the basic verification library that contains useful functions
to make writing verification
conditions much more convenient. It should be noted that this is an
abstract data type so not all
functions defined in the library are exported. In order to shorten
the typing information, we use
the following shorthand: voss\_tuple = (bool, (string, (bool, (int, int)))).
All these functions, with the exception of node\_vector, variable\_vector,
verify and nverify returns lists of five-tuples, of the form described in
the description of STE.
Briefly, the functions are as follows:
\begin{tabbing}
excitation             \=         \kill
\FlFun{UNC}{Unconstrained. Useful as padding when writing functions generating verification conditions.}\\
\FlFun{n is v}{Node n is asserted/checked to have the value v with guard true.}\\
\FlFun{nv isv vv}{Node list nv is asserted/checked to have the values in the value list vv with guard true.}\\
\FlFun{node\_vector s n}{Create a list of strings of the form s catenated with the string representing integer i, where i goes from (n-1) to 0.}\\
\FlFun{variable\_vector s n}{Create a list of Boolean variables of the form s catenated with the string representing integer i, where i goes from (n-1) to 0. Note that these variables are not declared until they are forced to be evaluated. See declare in defaults.fl for a function to do so.}\\
\FlFun{vl when e}{Imposes the domain constraint denoted by the Boolean expression e on all the five-tuples in vl.}\\
\FlFun{vl from t}{Set all the starting times in the five-tuples in vl to t.}\\
\FlFun{vl to t}{Set all the ending times in the five-tuples in vl to t.}\\
\FlFun{during f t vl}{Set all the starting and ending times in the five-tuples in vl to f and t respectively.}\\
\FlFun{vl1 then vl2}{Merge the lists together, but adjust the durations for the five-tuples in vl2 so that the ``time 0'' for vl2 is equal to the maximum time of any five-tuple in vl1}\\
\FlFun{vl for t}{Same as 'to' above.}\\
\FlFun{verify fsm l ant cons trl}{An old shorthand for (declare l) seq (STE "" fsm [] ant cons trl. Probably should be removed.}\\
\FlFun{nverify fsm l ant cons trl}{Same as verify but the first argument is the option string to STE. Again, should be viewed as obsolete.} \\
\FlFun{SymbIndex nl addr fn}{Symbolic indexing function. Will apply the function fn to every element $i$ in nl and then apply a when condition to each result that requires addr to be equal to $i$.}
\end{tabbing}

\subsection{arithm.fl}
\index{arithm.fl}

This is a library of bitvector%
\index{bitvector}%
{} functions. A bitvector is represented
as a list of Booleans and is viewed as a big-endian vector%
\index{big-endian vector}%
{}, i.e, the
head of the list is the most significant bit.
\begin{tabbing}
excitation             \=         \kill
\FlFun{num2bv sz n}{Convert the integer n to a bitvector of size sz.}\\
\FlFun{bv2num bv}{If the bitvector bv does not contain any Boolean variables, view it as an unsigned binary number and convert it to a number.}\\
\FlFun{prefix n av}{Return the n first elements of av.}\\
\FlFun{suffix n av}{Return the n last elements of av}\\
\FlFun{av add bv}{Add the two bitvectors together.}\\
\FlFun{increment av}{Add one to the bitvector av.}\\
\FlFun{ones\_complement av}{Return the 1's complement of the bitvector av.}\\
\FlFun{twos\_complement av}{Return the 2's complement of the bitvector av.}\\
\FlFun{av subtract bv}{Subtract bitvector bv from bitvector av.}\\
\FlFun{av greater bv}{Compute the Boolean expression for the number denoted by av is greater than the number denoted by bv. Both bitvectors are viewed as unsigned integers.}\\
\FlFun{av equal bv}{As for greater, but for equality.}\\
\FlFun{av geq bv}{As for greater, but for greater than or equal to.}\\
\FlFun{av less bv}{As for greater, but for less than.}\\
\FlFun{av leq bv}{As for greater, but for less than or equal to.}\\
\FlFun{av bvAND bv}{Bit-wise AND.}\\
\FlFun{av bvOR bv}{Bit-wise OR.}\\
\FlFun{av bvXOR bv}{Bit-wise XOR.}\\
\FlFun{bvNOT av}{Bit-wise NOT.}
\end{tabbing}


\subsection{HighLowEx.fl}
\index{HighLowEx.fl}

This library defines only two funcitons: Hexpl%
\index{Hexpl}%
{} and Lexpl%
\index{Lexpl}%
{}.
The basic task of both is to take a Boolean function and
return an assignments to some set of variables that would make
the Boolean function evaluate to true.
The two functions differ only in that Hexpl tries to find an
assignment with as many $1$'s as possible, whereas Lexpl tries to
assign as many $0$'s as possible.
In order to make the output more readable, both functions take as
first argument a list of pairs.
The first element in the pair is a string and the second argument
is a list of Boolean variables.
The string will be used as a header for the assignemnts to the list of
variables.
For example, is $i$, $Aa$, $Ab$, $a$, $b$, $d$, and $q$ denote lists of
Booelan variables, and $f$ denote some Boolean expression over
these (and possibly other) variables, then we may get:
\begin{hol}
: Lexpl [("I",i),("Aa",Aa),("Ab",Ab),("a",a),("b",b),("d",d),("q",q)] f;
"
I = 001011000
Aa = 0000
Ab = 0001
a = 1111
b = 0000
d = 0000
q = ----

"
\end{hol}
where $0$'s and $1$'s denote assignemnt to the corresponding variables to
make $f$ evaluate to $1$, whereas $-$ denote don't care conditions.
