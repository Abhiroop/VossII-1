\subsection{Bitvectors}
\label{section:bitvectors}

To ease writing specifications and creating code for bitvector arithmetic,
a builtin type ``bv'' \index{bv}%
has been introduced.
A bv is an arbitrary precision two's complement bitvector
that grows and shrinks as needed.
It is effectively a list of BDDs.
One should interpret a bv as an infinite bitvector where the most significant
digit (head of the list) is repeated infinitely many times.
To illustrate:
%%%START_CODE%%%%
int2bv 1;
int2bv (-1);
int2bv 12;
int2bv (-12);
bv2int (int2bv (-12));
%%%END_CODE%%%%

To make it easier to create bitvectors for constants, an overloaded
function ' is available.
Of course, since it is an overloaded function, a context (or type annotations)
must be used to ensure the result is a bv.
For example:
%%%START_CODE%%%%
{ '1 :: bv};
{ '-12 :: bv};
letrec {pow2:: bv -> bv} n = (n = '0) => '1 | '2 * pow2 (n - '1);
pow2 '6;
%%%END_CODE%%%%

Of course, the pow2 function could be defined for all the types that the
basic operators are defined over.
Thus:
%%%START_CODE%%%%
letrec {pow2:: *a -> *a} n = (n = '0) => '1 | '2 * pow2 (n - '1);
pow2 3;
pow2 {'3::int};
pow2 {'3.0::float};
pow2 {'3::bv};
pow2 {'3::bev};
%%%END_CODE%%%%
shows how to define pow2 so that it can be used for ints, floats, bvs, and
bevs (like bvs but using bexprs instead of BDDs for the elements in the list).
Note that we need to provide a type annotation \verb@(*a -> *a)@ in the
declaration since otherwise the system would not be able to resolve
the overloading without both the input type and the output type.

To create a vector with variables, there are two functions:
bv\_variable%
\index{bv\_variable}
and
bv\_constrained\_variable%
\index{bv\_constrained\_variable}%
.
Both of these functions take a string as the name of the vector.
This string defines the size of the vector and multi-dimensional vectors
can also be created.
The bv\_constrained\_variable function takes a second argument whith should
be a predicate that given a bitvector returns a true/false for the values
that are of interest.
Here it will return a bitvector with a parametric representation that
contains all values satisfying the predicate, but only those values.
For example:
%%%START_CODE%%%%
bv_variable "a[7:0]";
bv_variable "a[1:0][3:0]";
bv_constrained_variable "a[7:0]" (\v. '0 < v AND v < '10);
%%%END_CODE%%%%
An important point to remember is that bitvectors are signed.
Thus, if an unsigned version is needed, one has to use the constrained 
version.
Alternatively, one can also use the bv\_ZX, to zero extend
(and thus make positive) the bitvector.
Of course, one has to be careful to get the right size of the resulting bv.
For example, if an unsigned bitvector with 8 variables is needed, the
following two definitions are equivalent (although they will use slightly
different variable names).
%%%START_CODE%%%%
bv_constrained_variable "a[8:0]" (\v. v >= '0);
bv_ZX (bv_variable "a[7:0]");
%%%END_CODE%%%%

Sometimes, it is useful to get access to the list of the bitvector.
For that purpose, there is a bv2list and a list2bv function.
If you want a specific length of the list, fixed\_bv2list takes a length
argument and a sign/zero extension flag in addition to the bitvector
and returns a sign- or zero-extended list of the desired length.
Of course, if the length is too small for the bitvector to fit, the function
will raise an exception.
%%%START_CODE%%%%
bv2list (int2bv (-12));
list2bv [F,F,F,T,T];
fixed_bv2list 16 F '-3;
fixed_bv2list 16 T '-3;
%%%END_CODE%%%%

Finally, in order to understand a (symbolic) bitvector, the bv\_example%
\index{bv\_example}
function can be very useful.
For example:
%%%START_CODE%%%%
// Return an integer n if its collatz sequence is longer than n.
// Otherwise, return 0
let {large_collatz:: bv -> bv} n =
    letrec collatz cnt cur = cur = '1 => cnt |
            (cur % '2) = '1 => collatz (cnt + '1) ('3 * cur + '1)
                             | collatz (cnt + '1) (cur / '2)
    in
    let res = collatz '0 n in
    n < res => n | '0
;

// Try this for integers between 1 and 99.
let res =
    large_collatz (bv_constrained_variable "a[7:0]" (\v. '1 <= v AND v < '100))
;
%%%END_CODE%%%%
If we simply evaluated res, we would get:
%%%START_CODE%%%%
res;
%%%END_CODE%%%%
However, this is (almost) impossible to understand.
To help understand these symbolic bitvectors, it is often useful to
ask for explicit examples.
Thus, we could do:
%%%START_CODE%%%%
// Print out (at most) 100 examples.
bv_examples 100 res;
%%%END_CODE%%%%
which is much easier to understand.

As already aluded to, all the usual arithmetic, logic, and comparison
operations are aviable for bitvectors.
Many, if not most, are also overloaded to the reguler operations.
To see all available bv functions, use the help system and restrict
the argument type to match bv, or the result type to match bv.

