
\section{Symbolic Trajectory Evaluation and Verification}

There is currently only one built-in command for symbolic trajectory%
\index{symbolic trajectory evaluation}%
{}
evaluation called STE%
\index{STE}%
{}.
In general, STE determines, through symbolic trajectory evaluation, whether
an antecedent/consequent pair hold in for some circuit.
STE will return a datatype called ste which contains all the
result from the STE run.
This includes not only the result of the STE run, but also
trace data etc. collected during the simulation.

In general STE is invoked as
\begin{hol}
STE options ckt wl ant cons trl
\end{hol}
where options%
\index{STE options}%
{} is a string that can contain a combinations of the
following flags:
\begin{description}
\item[-a] Abort%
\index{abort STE}%
{} the verification at the first antecedent or consequent failure.
\item [-m n]
Abort the verification after n phases has been simulated.
\item [-e]
Evaluate evey node in the circuit whether the node is in the
fan-in tree of some node that is checked or traced or not.
In other words, with the -e option, the simulator will compute
the value on every node.
Normally, a node whose value cannot be observed (directly or indirectly)
is simply kept at X.
Of course, the STE command can run significantly slower with the
-e option, so beware!
\end{description}

The second argument to STE must be an object of the fsm type representing
a circuit that is to be simulated.

The weak\_list wl is a list of 4-tuples.
Each 4-tuple is of the form (g,n,f,t), where n is a node name, f and t
denote start and stop times, and g is a Boolean
denoting the domain for which this node should be weakened%
\index{weakened}%
{}.
For assignments making the guard true, the next state function of the
circuit node is set to $X$.
This is often useful when verifying a subsystem of a larger system
that has shared input signals.
By weakening%
\index{weakening}%
{} the model, unnecessary computations do not have to be performed.
Note that weakening a model is a ``safe'' operation in that
the monotonicity of the circuit models guarantee that if we
can verify something in the weakened model, then that same property
is guaranteed to hold in the original model.

The ant\_list and cons\_list are  both lists of five-tuples.
Each five-tuple%
\index{five-tuple}%
{} is of the form $(g,n,v,s,t)$, where $g$ is a Boolean function
denoting the domain for which this assertion/check should be carried out,
$n$ is the name of a node, $v$ is the value to be asserted/checked, and
$s$ and $t$ denote the start and stop times for this assertion/check
respectively.

Finally, the last argument to STE is a list of triples.
Each triple is of the form $(n,s,t)$, where $n$ is a name of a node
to be traced%
\index{traced}%
{} and $s$ and $t$ are the start and stop times for this
trace respectively.

Of course, in practice, it would be quite tedious to have to
write all specifications in terms of lists of five-tuples.
Consequently, a small embedded domain specific language
has been defined.
These functions make it much easier to write specification.
However, it should be remembered that when the verification
is actually performed, all these higher level constructs gets translated
down to the two lists of five-tuples.
The DSL has the grammar:
\begin{hol}
    antecedent    : trace 'and' antecedent
                  | trace
 
    trace         : <node_name> is values
                  | <vector_name> is values
 
    values        : time_sequence
                  | time_sequence 'otherwise' value 'until' duration
 
    time_sequence : timed_value
                  | timed_value 'followed_by' time_sequence
 
    timed_value   : value 'for' duration
                  | value 'in_phase' <integer>
                  | value 'in_cycle' <integer>
 
    duration      : <integer> 'phase'
                  | <integer> 'phases'
                  | <integer> 'cycle'
                  | <integer> 'cycles'
 
    value         : "0x..."     // Hex constant
                  | "0b..."     // Binary constant
                  | "<integer>" // Decimal constant
                  | "[a-zA-Z]..."       // Variable, e.g., a[3:0], b[1:0][2:0]
                  | <bv>                // Any bv of suitable size (or smaller)
                  | <bool list> // Of the same length as vector
\end{hol}

For more details on how to use the STE function to perform formal
verification, we refer the reader to Section~\ref{tutorial}.

To illustrate the use of STE on a simple example, consider the simple
Verilog circuit from the previous section.
In this example, we will simply use STE as a symbolic simulator.
%%%START_CODE%%%%
load "ste.fl";
let p = verilog2pexlif "-Iverilog_examples"         // Yosys flags
                       "mux4"                       // Top-level module
                        ["small.v", "small_lib.v"]  // Files to read & compile
                        []                          // Additional files needed
;
let ckt = pexlif2fsm p;
%%%END_CODE%%%%
If we now define a simple antecedent, as follows:
%%%START_CODE%%%%

let ant =
    "din_0" is  "a" for 5 phases
  and
    "din_1" is	0 for 1 phase followed_by "0x1" for 2 phases followed_by
		0 for 1 phase followed_by "b" for 1 phase
  and
    "din_2" is	"c" for 5 phases
  and
    "din_3" is	"d" for 5 phases
  and
    "sel[1:0]" is   "0x0" for 1 phase followed_by
		    "0x1" for 1 phase followed_by
		    "0x2" for 1 phase followed_by
		    "0x3" for 1 phase followed_by
		    "s[1:0]" for 1 phase
;

%%%END_CODE%%%%
we can run STE
%%%START_CODE%%%%
let ste_res = STE "-e" ckt [] ant [] [];
ste_res;
%%%END_CODE%%%%
and potentially see the output values on mux\_out:
%%%START_CODE%%%%
get_trace ste_res "mux_out";
// See it in increasing time instead.
rev it;
%%%END_CODE%%%%
Note that get\_trace returns a list of triples: $(t,H,L)$, where
$t$ is the phase the node took on this value and $H$ and $L$ are the
high and low rail values of the node. 
The encoding used is $(T,T)$ is X (unknown/should't matter),
$(T,F)$ is one, $(F,T)$ is zero, and
$(F,F)$ is top, or overconstrained.

Although the above interface can be used, {\voss} comes with a GUI
for visualize a circuit and the result of an STE run.
To invoke this debugger, issue the command \verb@STE_debug@%
\index{STE\_debug}%
{} with the
fsm as argument.
%%%START_CODE%%%%
let vis = STE_debug ckt;
%%%END_CODE%%%%
If \verb@vis@ is evaluated a new toplevel window will be opened looking
like:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui_01.png}
\end{center}
From here, you can select some nodes (searchable) and ask to see
their fanin cone.
For example, if you select the \verb@mux_out@ signal and click on
the Fanin button, you get:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui_02.png}
\end{center}

If you now run STE, but instead of giving ckt, give it vis (STE is overloaded),
you can see the values in the GUI.
%%%START_CODE%%%%
STE "-e" vis [] ant [] [];
%%%END_CODE%%%%
If you now add all the inputs and the output to the Waveforms window
(by selecting them and clicking the Waveform button), you get (after
zooming out a bit):
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui_03.png}
\end{center}
By clicking on the time line, you can set the ``current'' time point
and if you then go back to the fanin viewer and selecting ``Show values''
you get:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui_04.png}
\end{center}
To see what the symbolic value ``S'' in the viewer really represent,
hover over the S or right click on S.
By clicking on the right or left arrows, you can change the time point.
Finally, any of the windows in the GUI can be detached (except the first one)
and later re-attached by clicking on the ``detach'' icon at the top-left
corner of each pane.


\subsection{GUI Commands}

To illustrate the use of the GUI and explain many commands, we will
use the single precision floating point unit in
\verb@<VossII installation directory>/ckt_examples/m32632/rtl@.
If you want to follow along, cd into that directory and execute
\verb@fl -f SP_FPU.fl@.
If you do so, you will first be greeted by:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000001.png}
\end{center}
You can now select one of more of the signals shown.
If the signal(s) you are interested in are not primary outputs,
change the Limit search, provide a pattern and click Refresh.
Here we selected all of the primary outputs and clicked the Fanin button
obtaining:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000002.png}
\end{center}
If you now click and hold down the right button while moving the cursor
down and left, a red arrow and a ``Zoom to fit'' text appears.
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000003.png}
\end{center}
You can also strike up-left, up-right, or down-right while holding the right
button down for other zoom alternatives.
If you use the Zoom to fit alternative and release the button, you get:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000004.png}
\end{center}
Of you zoom in some (mouse wheel can also be used), you can see that hover over
a wire or box displays the name of the wire or output(s) of box.

If you right click on a wire or box, a pulldown menu appears:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000008.png}
\end{center}

Here we selected the ``Draw inside'' alternative and a new tab gets created
and we get to see the inside circuitry of that box.
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000009.png}
\end{center}
If we do the same inside this level of hierarchy, like:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000010.png}
\end{center}
we get:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000011.png}
\end{center}

Since it is easy to get lost when many levels of hierarchy have been
traversed, it is often very useful to color a wire.
One can do this either by the pulldown menu described earlier, or simply
hit a digit between 1 and 9 on the keyboard.
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_1/gui_000012.png}
\end{center}
The important part is that the selected wire will be colored in the
chosen color in every window in which it occures (including the
waveform window).

As we illustrated earlier, one can also select wires to add to the
waveform viewer.
Here we fist selected all inputs followed by all the output
after having run a (semi-) random scalar input simulation.
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_2/gui_000003.png}
\end{center}
If there are question marks in the drawing, it means that the value did not
fit in the space.
Hovering over it will often provide the value or right clicking to get
a pulldown menu and then select the ``Show expanded value'' menu item.
An alternative is to zoom out so that enough room is created.

By clicking on the time line, you can set the current time point, which 
will be reflected in every window for which ``Show values'' has been selected.
For example:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_2/gui_000005.png}
\end{center}
and
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_2/gui_000006.png}
\end{center}

If you want to re-order the signals in the waveform viewer, place the cursor
over the signal you want to move.
A small green arrow will appear.
You can now use the up or down arrows to move this signal.
Similarly, if you hit the Delete key, that signal (with its waveform)
will be removed from the waveform viewer.

Our final example of GUI features is using a different circuit.
Now, cd into 
\verb@<VossII installation directory>/ckt_examples/diff_cache@
and issue the command \verb@fl -f ex3.fl@.
This is a circuit defined in HFL and thus there are additional 
visualization features possible.
If we select all outputs and click Fanin and then dive into the CPU hierarchy,
we get:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_3/gui_000006.png}
\end{center}
Notice that the finite state machine (defined using the Moore\_FSM construct
in HFL), is drawn specially.
If you now left click on the symbol, you get an explicit representation
of the finite state machine:
\begin{center}
\includegraphics[width=1.0\linewidth]{screen_shots/gui/session_3/gui_000007.png}
\end{center}
where you can hover over states and/or transitions to get the original
information from HFL displayed.

Furthermore, if have run an STE simulation and you now move the time line,
the state the machine is in will be highlighted in dark green.
If the state is partially X or symbolic, every state that it could be in
will be colored light green.

Finally, if the state is scalar, both the back annotation value shown for
the output of the state machine as well as the value in the waveform viewer
will use the name of the state, rather than the encoded value.
All to make debugging easier!

