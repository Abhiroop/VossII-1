load "verification.fl";
load "arithm.fl";

var_order [
         "Ab3", "Aa3", "Aa2", "Ab2", "Aa1", "Ab1", "Ab0", "Aa0", "i7", "i8",
         "i0", "i6", "i1", "i2", "ram3", "q3", "ram0", "q.3", "q0",
         "a.3", "b.3", "i5", "d.3", "i4", "i3", "q.2", "d.2", "b.2",
         "a.2", "q.1", "q.0", "d.1", "d.0", "b.1", "b.0", "c", "a.1",
         "a.0"];

// ------------------------------------------------------------------
// Load fsm model (called AMD)
load "q3.fl";

// ------------------------------------------------------------------
// Short-hands for circuit nodes
let I     = ["i[8]", "i[7]", "i[6]", "i[5]", "i[4]",
  	     "i[3]", "i[2]", "i[1]", "i[0]"];
let Aadd  = ["a[3]", "a[2]", "a[1]", "a[0]"];
let Badd  = ["b[3]", "b[2]", "b[1]", "b[0]"];
let D     = ["d[3]", "d[2]", "d[1]", "d[0]"];
let Y     = ["y[3]", "y[2]", "y[1]", "y[0]"];
let RAM0  = "r0";
let RAM3  = "r3";
let Q0    = "q0";
let Q3    = "q3";
let CLK   = "ck";
let C0    = "cin";
let OEbar = "noe";
let C4    = "cout";
let Gbar  = "ng";
let Pbar  = "np";
let OVR   = "ovr";
let F3    = "signe";
let F30   = "zero";

let FUNC  = "fonc";
let TEST  = "test";

// Names of register nodes
let Q   = [  "accu[3]", "accu[2]", "accu[1]", "accu[0]"  ];
let ram = [ ["ram0[3]", "ram0[2]", "ram0[1]", "ram0[0]"],
            ["ram1[3]", "ram1[2]", "ram1[1]", "ram1[0]"],
            ["ram2[3]", "ram2[2]", "ram2[1]", "ram2[0]"],
            ["ram3[3]", "ram3[2]", "ram3[1]", "ram3[0]"],
            ["ram4[3]", "ram4[2]", "ram4[1]", "ram4[0]"],
            ["ram5[3]", "ram5[2]", "ram5[1]", "ram5[0]"],
            ["ram6[3]", "ram6[2]", "ram6[1]", "ram6[0]"],
            ["ram7[3]", "ram7[2]", "ram7[1]", "ram7[0]"],
            ["ram8[3]", "ram8[2]", "ram8[1]", "ram8[0]"],
            ["ram9[3]", "ram9[2]", "ram9[1]", "ram9[0]"],
            ["ram10[3]", "ram10[2]", "ram10[1]", "ram10[0]"],
            ["ram11[3]", "ram11[2]", "ram11[1]", "ram11[0]"],
            ["ram12[3]", "ram12[2]", "ram12[1]", "ram12[0]"],
            ["ram13[3]", "ram13[2]", "ram13[1]", "ram13[0]"],
            ["ram14[3]", "ram14[2]", "ram14[1]", "ram14[0]"],
            ["ram15[3]", "ram15[2]", "ram15[1]", "ram15[0]"] ];

// ------------------------------------------------------------------
// Clocking scheme
let PHASE     = 50;
let CYCLE     = 2*PHASE; 
let LATCH_DEL = 5;
let HOLD      = 5;
let cycle n   = (n-1)*CYCLE;
let phiL n    = (n-1)*CYCLE;
let phiH n    = (n-1)*CYCLE+PHASE;

// Define clock signals
letrec clock_cyc n = (n = 0) => UNC |
    (CLK is F from (phiL n) to (phiH n))@
    (CLK is T from (phiH n) to (cycle (n+1)))@
    (clock_cyc (n-1));


// Input signals timing
let inB cyc = (phiL cyc)+HOLD;
let inE cyc = (phiL (cyc+1))+HOLD;
let AaddIs addr cyc = Aadd isv addr from (inB cyc) to (inE cyc);
let BaddIs addr cyc = Badd isv addr from (inB cyc) to (inE cyc);
let D_is Val cyc = D isv Val from (inB cyc) to (inE cyc);
let I_is Val cyc = I isv Val from (inB cyc) to (inE cyc);
let C0_is Val cyc = C0 is Val from (inB cyc) to (inE cyc);
let Q0_is Val cyc = Q0 is Val from (inB cyc) to (inE cyc);
let Q3_is Val cyc = Q3 is Val from (inB cyc) to (inE cyc);
let RAM0_is Val cyc = RAM0 is Val from (inB cyc) to (inE cyc);
let RAM3_is Val cyc = RAM3 is Val from (inB cyc) to (inE cyc);

// Output signals timing
let Y_is Val cyc = Y isv Val from (phiH (cyc-1)) to (phiL cyc);


// Latch signals timing
let Q_is Val cyc = Q isv (bvNOT Val)
			from ((phiL cyc)+LATCH_DEL) to ((phiL cyc)+LATCH_DEL)+1;

let RamIs addr Val cyc =
    let ram_is n = (n isv (bvNOT Val))
                   from ((phiL cyc)+LATCH_DEL) to ((phiL cyc)+LATCH_DEL+1) in
    SymbIndex ram addr ram_is;

// ------------------------------------------------------------------
// Boolean variables
// Instruction
let i = variable_vector "i" 9;
// Addresses
let Aa = variable_vector "Aa" 4;
let Ab = variable_vector "Ab" 4;
// Data
let a = variable_vector "a." 4;
let b = variable_vector "b." 4;
let d = variable_vector "d." 4;
let q = variable_vector "q." 4;

let c = variable "c";
let q0 = variable "q0";
let q3 = variable "q3";
let ram0 = variable "ram0";
let ram3 = variable "ram3";


// ------------------------------------------------------------------
// Variable ordering (from dynamic variable run)
//
// One (default size) run with dynamic variable ordering gives:
//var_order [
//         "q3", "q0", "ram3", "ram0", "i6", "i8", "i7", "Ab3", "Aa3", "Aa2", "Ab2",
//         "Ab1", "Aa1", "Ab0", "Aa0", "i4", "i3", "a.3", "b.3", "i5", "c",
//         "i2", "i1", "d.3", "i0", "q.3", "q.2", "d.2", "a.2", "b.2", "q.0",
//         "a.1", "b.1", "b.0", "a.0", "d.0", "d.1", "q.1"];

// A fl -s 17 run with dynamic variable ordering gives as final ordering:
//var_order [
//         "Ab2", "Aa2", "Aa3", "Ab3", "Aa1", "Ab1", "Ab0", "Aa0", "i8", "i7",
//         "i0", "i6", "i1", "i2", "q3", "ram3", "ram0", "q0", "b.3",
//         "a.3", "d.3", "q.3", "i5", "i4", "i3", "b.2", "a.2", "d.2",
//         "q.2", "q.1", "b.1", "a.1", "d.1", "d.0", "q.0", "b.0", "c",
//         "a.0"];



// ------------------------------------------------------------------
// Useful help functions
let getALUsrc  [I8,I7,I6,I5,I4,I3,I2,I1,I0] = [I2,I1,I0];
let getALUfun  [I8,I7,I6,I5,I4,I3,I2,I1,I0] = [I5,I4,I3];
let getALUdest [I8,I7,I6,I5,I4,I3,I2,I1,I0] = [I8,I7,I6];
let ALUsrc = getALUsrc i;
let ALUfun = getALUfun i;
let ALUdest = getALUdest i;
let member iv lv = itlist (\e.\r. (iv equal e) OR r) lv F;
let ITEv c t e = (map (\v. c AND v) t) bvOR (map (\v. (NOT c) AND v) e);

// ------------------------------------------------------------------
// SPECIFICATION FUNCTIONS:
// Functional specification functions
let RE = ITEv (member ALUsrc [[F,F,F],[F,F,T]]) a
	(ITEv (member ALUsrc [[F,T,F],[F,T,T],[T,F,F]]) [F,F,F,F]
	(d));

let S  = ITEv (member ALUsrc [[F,F,F],[F,T,F],[T,T,F]]) q
	(ITEv (member ALUsrc [[F,F,T],[F,T,T]]) b
	(ITEv (member ALUsrc [[T,F,F],[T,F,T]]) a
	([F,F,F,F])));

let Fr = ITEv (ALUfun equal [F,F,F]) (RE add S add [F,F,F,c])
        (ITEv (ALUfun equal [F,F,T]) ((bvNOT RE) add S add [F,F,F,c])
        (ITEv (ALUfun equal [F,T,F]) (RE add (bvNOT S) add [F,F,F,c])
        (ITEv (ALUfun equal [F,T,T]) (RE bvOR S)
        (ITEv (ALUfun equal [T,F,F]) (RE bvAND S)
        (ITEv (ALUfun equal [T,F,T]) ((bvNOT RE) bvAND S)
        (ITEv (ALUfun equal [T,T,F]) (RE bvXOR S)
        (bvNOT (RE bvXOR S))))))));


// ------------------------------------------------------------------
// SPECIFICATION:

// If Ab=Aa then we're pointing at the same ram location and thus
// a and b must be the same. Capture this in the consistent predicate.
let consistent = (NOT (Ab equal Aa)) OR (a equal b);


// Check1 covers all of the desired functionality
let ant1 = (FUNC is T for (cycle 3)) @
	   (TEST is F for (cycle 3)) @
	   (OEbar is F for (cycle 3)) @
	   (clock_cyc 2) @
	   (I_is i 1) @
	   (AaddIs Aa 1) @
	   (BaddIs Ab 1) @
	   (RamIs Aa a 1) @
	   ((RamIs Ab b 1) when consistent) @
	   (D_is d 1) @
	   (Q_is q 1) @
	   ((C0_is c 1) when (member ALUfun [[F,F,F],[F,F,T],[F,T,F]])) @
	   ((Q3_is q3 1) when (ALUdest equal [T,F,F])) @
	   ((Q0_is q0 1) when (ALUdest equal [T,T,F])) @
	   ((RAM3_is ram3 1) when (member ALUdest [[T,F,F],[T,F,T]])) @
	   ((RAM0_is ram0 1) when (member ALUdest [[T,T,F],[T,T,T]]));

let cons1 = (
	     // Check outputs
	     ((Y_is Fr 2) when (NOT (ALUdest equal [F,T,F]))) @
	     ((Y_is a 2) when (ALUdest equal [F,T,F])) @
	     // Check accumulator
	     ((Q_is Fr 2) when (ALUdest equal [F,F,F])) @
	     ((Q_is (q3:(butlast q)) 2) when (ALUdest equal [T,F,F])) @
	     ((Q_is ((tl q)@[q0]) 2) when (ALUdest equal [T,T,F])) @
	     ((Q_is q 2) when
	 	   (member ALUdest [[F,F,T],[F,T,F],[F,T,T],[T,F,T],[T,T,T]])) @
	     // Check RAM
	     ((RamIs Ab b 2) when (member ALUdest [[F,F,F],[F,F,T]])) @
	     ((RamIs Ab Fr 2) when (member ALUdest [[F,T,F],[F,T,T]])) @
	     ((RamIs Ab (ram3:(butlast Fr)) 2)
	 		    when (member ALUdest [[T,F,F],[T,F,T]])) @
	     ((RamIs Ab ((tl Fr)@[ram0]) 2)
			    when (member ALUdest [[T,T,F],[T,T,T]]))
	    ) when consistent;

let check1 = STE "" AMD [] ant1 cons1 [];

// Check2: covers the remaining check that the ram is not corrupted
// If Ram[Aaddr]=a /\ ((NOT load_regfile) OR (Baddr != Aaddr))
//   then we should have Ram[Aaddr]=a one cycle later
let ant2 = (FUNC is T for (cycle 3)) @
           (TEST is F for (cycle 3)) @
           (clock_cyc 2) @
           (I_is i 1) @
           (BaddIs Ab 1) @
           (RamIs Aa a 1);

let cons2 = (RamIs Aa a 2) when ((member ALUdest [[F,F,F],[F,F,T]]) OR
				 NOT (Aa equal Ab));

let check2 = STE "" AMD [] ant2 cons2 [];

"Verify the circuit";
time(check1 AND check2);
//quit;
