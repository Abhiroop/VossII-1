load "ste.fl";

TYPE "bv2" 2;
TYPE "bv4" 4;
TYPE "bv6" 6;
TYPE "bv10" 10;
TYPE "byte" 8;
TYPE "hword" 16;
TYPE "word" 32;


STRUCT "flags" [
		("EQ_FLAG", "bit"),
		("ULESS_FLAG", "bit"),
		("LESS_FLAG", "bit"),
		("UGR_FLAG", "bit"),
		("GR_FLAG", "bit")
	       ]
;

let rf_info = MEM 4 16 32;
TYPE "rf" (16*32);

let rf_read {addr::bv4} {rf::rf} =
    hw_word_constr (W_MEM_READ rf_info (hw_destr rf) (hw_destr addr))
;

let rf_write {rf::rf} {addr::bv4} {data::word} =
    hw_rf_constr
	(W_MEM_WRITE rf_info (hw_destr rf) (hw_destr addr) (hw_destr data))
;

let read_FP rf =  rf_read '15 rf;
let write_FP rf value = rf_write rf '15 value;

let read_SP rf =  rf_read '14 rf;
let write_SP rf value = rf_write rf '14 value;

let NBR_MEM_LOCS = 32;
//let NBR_MEM_LOCS = 16384;

let mem_info = MEM 32 NBR_MEM_LOCS 8;

TYPE "emem" (8*NBR_MEM_LOCS);

let mem_rd {mem::emem} {addr::word} =
    hw_byte_constr (W_MEM_READ mem_info (hw_destr mem) (hw_destr addr))
;

let mem_wr {mem::emem} {addr::word} {data::byte} =
    hw_emem_constr (W_MEM_WRITE mem_info (hw_destr mem) (hw_destr addr) (hw_destr data))
;


let b2h {b1::byte} {b2::byte} =
    {hw_constr (W_CAT [(hw_destr b1),(hw_destr b2)]):: hword}
;

let b2w {b1::byte} {b2::byte} {b3::byte} {b4::byte} =
    {hw_constr (W_CAT [(hw_destr b1),
		       (hw_destr b2),
		       (hw_destr b3),
		       (hw_destr b4)]):: word}
;

STRUCT "state" [
		("PC",		"word"),
		("FLAGS",	"flags"),
		("RF",		"rf"),
		//("SREGS",	"???"),
		("MEM",		"emem")
];



let extract_9_0 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (9--0) we in
    {hw_constr swe::bv10}
;

let extract_15_8 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (15--8) we in
    {hw_constr swe::byte}
;

let extract_15_10 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (15--10) we in
    {hw_constr swe::bv6}
;

let extract_15_12 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (15--12) we in
    {hw_constr swe::bv4}
;

let extract_11_8 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (11--8) we in
    {hw_constr swe::bv4}
;

let extract_7_4 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (7--4) we in
    {hw_constr swe::bv4}
;

let extract_3_0 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (3--0) we in
    {hw_constr swe::bv4}
;

let extract_32_16 {w::word} =
    let we = hw_destr w in
    let swe = W_SLICE (31--16) we in
    {hw_constr swe::hword}
;

let extract_7_0 {h::word} =
    let we = hw_destr h in
    let swe = W_SLICE (7--0) we in
    {hw_constr swe::byte}
;

let extract_15_0 {h::word} =
    let we = hw_destr h in
    let swe = W_SLICE (15--0) we in
    {hw_constr swe::hword}
;

let case conds default =
    letrec sel ((c,v):rem) = IF c THEN v ELSE (sel rem)
     /\    sel [] = default
    in
    sel conds
;

let signed_gt {a:: *a} {b:: *a} =
    let aw = hw_destr a in
    let bw = hw_destr b in
    let sz = hw_size a in
    let a_sign = W_SLICE [sz-1] aw in
    let b_sign = W_SLICE [sz-1] bw in
    let w_res = W_ITE a_sign
		(
		    W_ITE b_sign (W_GR aw bw) (W_CONST 1 0)
		)
		(
		    W_ITE b_sign (W_CONST 1 1) (W_GR aw bw)
		)
    in
    {hw_constr w_res::bit}
;


let is_ADD instr = (extract_15_8 instr '=' '0b00000101);
let is_AND instr = (extract_15_8 instr '=' '0b00100110);
let is_ASHL instr = (extract_15_8 instr '=' '0b00101000);
let is_ASHR instr = (extract_15_8 instr '=' '0b00101101);
let is_BEQ instr = (extract_15_10 instr '=' '0b110000);
let is_BGE instr = (extract_15_10 instr '=' '0b110110);
let is_BGEU instr = (extract_15_10 instr '=' '0b111000);
let is_BGT instr = (extract_15_10 instr '=' '0b110011);
let is_BGTU instr = (extract_15_10 instr '=' '0b110101);
let is_BLE instr = (extract_15_10 instr '=' '0b110111);
let is_BLEU instr = (extract_15_10 instr '=' '0b111001);
let is_BLT instr = (extract_15_10 instr '=' '0b110010);
let is_BLTU instr = (extract_15_10 instr '=' '0b110100);
let is_BNE instr = (extract_15_10 instr '=' '0b110001);
let is_CMP instr = (extract_15_8 instr '=' '0b00001110);
let is_DEC instr = (extract_15_12 instr '=' '0b1001);
let is_DIV instr = (extract_15_8 instr '=' '0b00110001);
let is_GSR instr = (extract_15_12 instr '=' '0b1010);
let is_INC instr = (extract_15_12 instr '=' '0b1000);
let is_JMP instr = (extract_15_8 instr '=' '0b00100101);
let is_JMPA instr = (extract_15_8 instr '=' '0b00011010);
let is_JSR instr = (extract_15_8 instr '=' '0b00011001);
let is_JSRA instr = (extract_15_8 instr '=' '0b00000011);
let is_LDA_B instr = (extract_15_8 instr '=' '0b00011101);
let is_LDA_L instr = (extract_15_8 instr '=' '0b00001000);
let is_LDA_S instr = (extract_15_8 instr '=' '0b00100010);
let is_LDI_B instr = (extract_15_8 instr '=' '0b00011011);
let is_LDI_L instr = (extract_15_8 instr '=' '0b00000001);
let is_LDI_S instr = (extract_15_8 instr '=' '0b00100000);
let is_LDO_B instr = (extract_15_8 instr '=' '0b00110110);
let is_LDO_L instr = (extract_15_8 instr '=' '0b00001100);
let is_LDO_S instr = (extract_15_8 instr '=' '0b00111000);
let is_LD_B instr = (extract_15_8 instr '=' '0b00011100);
let is_LD_L instr = (extract_15_8 instr '=' '0b00001010);
let is_LD_S instr = (extract_15_8 instr '=' '0b00100001);
let is_LSHR instr = (extract_15_8 instr '=' '0b00100111);
let is_MOD instr = (extract_15_8 instr '=' '0b00110011);
let is_MOV instr = (extract_15_8 instr '=' '0b00000010);
let is_MUL instr = (extract_15_8 instr '=' '0b00101111);
let is_NEG instr = (extract_15_8 instr '=' '0b00101010);
let is_NOP instr = (extract_15_8 instr '=' '0b00000000);
let is_NOT instr = (extract_15_8 instr '=' '0b00101100);
let is_OR instr = (extract_15_8 instr '=' '0b00101011);
let is_POP instr = (extract_15_8 instr '=' '0b00000111);
let is_PUSH instr = (extract_15_8 instr '=' '0b00000110);
let is_RET instr = (extract_15_8 instr '=' '0b00000100);
let is_SSR instr = (extract_15_12 instr '=' '0b1011);
let is_STA_B instr = (extract_15_8 instr '=' '0b00011111);
let is_STA_L instr = (extract_15_8 instr '=' '0b00001001);
let is_STA_S instr = (extract_15_8 instr '=' '0b00100100);
let is_STO_B instr = (extract_15_8 instr '=' '0b00110111);
let is_STO_L instr = (extract_15_8 instr '=' '0b00001101);
let is_STO_S instr = (extract_15_8 instr '=' '0b00111001);
let is_ST_B instr = (extract_15_8 instr '=' '0b00011110);
let is_ST_L instr = (extract_15_8 instr '=' '0b00001011);
let is_ST_S instr = (extract_15_8 instr '=' '0b00100011);
let is_SUB_L instr = (extract_15_8 instr '=' '0b00101001);
let is_SWI instr = (extract_15_8 instr '=' '0b00110000);
let is_UDIV instr = (extract_15_8 instr '=' '0b00110010);
let is_UMOD instr = (extract_15_8 instr '=' '0b00110100);
let is_XOR instr = (extract_15_8 instr '=' '0b00101110);


let NEXT =
    state_input state.
    state_output next_state.
    internal pc flags eq uless less ugr gr mem instr imm imm_7_0 imm_15_0.
    internal instr_11_8 instr_7_4 instr_3_0 short_rA rA rB mem_read_sz.
    internal rb_imm_32_16 read_addr read_addr1 read_addr2 read_addr3.
    internal mem_data next_pc instr_9_0 br_target pc' do_wb wb_adr wb_d eq'.
    internal ugt' gt' lt' ult' raw_flags flags' mem'.
    rf_internal rf rf'.
    CELL "Draw_hfl_code NEXT 1" [
	//
	// Extract current state elements
	//
	pc    <- state-->PC,
	flags <- state-->FLAGS,
	eq <- flags-->EQ_FLAG,
	uless <- flags-->ULESS_FLAG,
	less <- flags-->LESS_FLAG,
	ugr <- flags-->UGR_FLAG,
	gr <- flags-->GR_FLAG,
	rf  <- state-->RF,
	mem  <- state-->MEM,
	//
	// Now read instructions and (potentially) immediate values
	//
	instr <- b2h (mem_rd mem pc) (mem_rd mem (pc '+' '1)),
	imm <- b2w (mem_rd mem (pc '+' '2)) (mem_rd mem (pc '+' '3))
		      (mem_rd mem (pc '+' '4)) (mem_rd mem (pc '+' '5)),
	imm_7_0 <- extract_7_0 imm,
	imm_15_0 <- extract_15_0 imm,
	//
	// Extract subfields
	//
	//
	instr_11_8 <- extract_11_8 instr,
	instr_7_4 <- extract_7_4 instr,
	instr_3_0 <- extract_3_0 instr,
	//
	short_rA <- rf_read instr_11_8 rf,
	rA <- rf_read instr_7_4 rf,
	rB <- rf_read instr_3_0 rf,
	//
	// Memory read
	//
	mem_read_sz <- case [
		(is_LD_B instr)   --- '0b01, 
		(is_LDA_B instr)  --- '0b01,
		(is_LDO_B instr)  --- '0b01,
		(is_LD_S instr)   --- '0b10,
		(is_LDA_S instr)  --- '0b10,
		(is_LDO_S instr)  --- '0b10,
		(is_LD_L instr)   --- '0b11,
		(is_LDA_L instr)  --- '0b11,
		(is_LDO_L instr)  --- '0b11,
		(is_POP instr)    --- '0b11]  {'0b00::bv2},
	rb_imm_32_16 <- rB '+' (ZX (extract_32_16 imm)),
	read_addr <- case [
		(is_LD_B instr)   --- rB, 
		(is_LD_L instr)   --- rB,
		(is_LD_S instr)   --- rB,
		(is_LDA_B instr)  --- imm,
		(is_LDA_L instr)  --- imm,
		(is_LDA_S instr)  --- imm,
		(is_LDO_B instr)  --- rb_imm_32_16,
		(is_LDO_L instr)  --- rb_imm_32_16,
		(is_LDO_S instr)  --- rb_imm_32_16,
		(is_POP instr)    --- rB]  '0,
	read_addr1 <- read_addr '+' '1,
	read_addr2 <- read_addr '+' '2,
	read_addr3 <- read_addr '+' '3,
	mem_data <- case [
		(mem_read_sz '=' '0b00) --- '0,
		(mem_read_sz '=' '0b01) --- (ZX (mem_rd mem read_addr)),
		(mem_read_sz '=' '0b10) --- (ZX (b2h (mem_rd mem read_addr)
						     (mem_rd mem read_addr1)))
		] (b2w (mem_rd mem read_addr)  (mem_rd mem read_addr1)
		       (mem_rd mem read_addr2) (mem_rd mem read_addr3)),
	//
	// PC update
	//
	next_pc <- pc '+' '2,
	instr_9_0 <- extract_9_0 instr,
	br_target <- pc '+' '2 '*' SX instr_9_0,
	pc' <- case [
		    (is_BEQ instr)   --- (eq '?' br_target ':' next_pc),
		    (is_BGE instr)   --- ((eq '|' gr) '?' br_target ':' next_pc),
		    (is_BGEU instr)  --- ((eq '|' ugr) '?' br_target ':' next_pc),
		    (is_BGT instr)   --- (gr '?' br_target ':' next_pc),
		    (is_BGTU instr)  --- (ugr '?' br_target ':' next_pc),
		    (is_BLE instr)   --- ((eq '|' less) '?' br_target ':' next_pc),
		    (is_BLEU instr)  --- ((eq '|' uless) '?' br_target ':' next_pc),
		    (is_BLT instr)   --- (less '?' br_target ':' next_pc),
		    (is_BLTU instr)  --- (uless '?' br_target ':' next_pc),
		    (is_BNE instr)   --- (eq '?' next_pc ':' br_target ),
		    (is_JMP instr)   --- rA,
		    (is_JMPA instr)  --- imm,
		    (is_JSR instr)   --- rA,
		    (is_JSRA instr)  --- imm,
		    (is_LDA_B instr) --- (pc '+' '6),
		    (is_LDA_L instr) --- (pc '+' '6),
		    (is_LDA_S instr) --- (pc '+' '6),
		    (is_LDI_B instr) --- (pc '+' '6),
		    (is_LDI_L instr) --- (pc '+' '6),
		    (is_LDI_S instr) --- (pc '+' '6),
		    (is_LDO_B instr) --- (pc '+' '4),
		    (is_LDO_L instr) --- (pc '+' '4),
		    (is_LDO_S instr) --- (pc '+' '4)
		] next_pc,
	//
	// ALU ops
	//
	do_wb <- (is_ADD instr) '|' (is_AND instr) '|' (is_ASHL instr) '|'
		    (is_ASHR instr) '|' (is_DEC instr) '|' (is_DIV instr) '|'
		    (is_INC instr) '|' (is_JSR instr) '|' (is_JSRA instr) '|'
		    (is_LDA_B instr) '|' (is_LDA_L instr) '|' (is_LDA_S instr) '|'
		    (is_LDI_B instr) '|' (is_LDI_L instr) '|' (is_LDI_S instr) '|'
		    (is_LDO_B instr) '|' (is_LDO_L instr) '|' (is_LDO_S instr) '|'
		    (is_LD_B instr) '|' (is_LD_L instr) '|' (is_LD_S instr) '|'
		    (is_LSHR instr) '|' (is_MOD instr) '|' (is_MOV instr) '|'
		    (is_MUL instr) '|' (is_NEG instr) '|' (is_NOT instr) '|'
		    (is_OR instr) '|' (is_POP instr) '|' (is_PUSH instr),
	wb_adr <- case [
			  (is_DEC instr) --- instr_11_8,
			  (is_INC instr) --- instr_11_8
			] instr_7_4,
	wb_d <- case [
			  (is_ADD instr)   --- (rA '+' rB),
			  (is_AND instr)   --- (rA '&' rB),
			  (is_ASHL instr)  --- (rA '<<' rB),
			  (is_ASHR instr)  --- (rA '|>>' rB),
			  (is_DEC instr)   --- (short_rA '-' imm),
			  (is_DIV instr)   --- (rA '/' rB),
			  (is_INC instr)   --- (short_rA '+' imm),
			  (is_LDA_B instr) --- mem_data,
			  (is_LDA_S instr) --- mem_data,
			  (is_LDA_L instr) --- mem_data,
			  (is_LDI_B instr) --- (ZX imm_7_0),
			  (is_LDI_S instr) --- (ZX imm_15_0),
			  (is_LDI_L instr) --- imm,
			  (is_LDO_B instr) --- mem_data,
			  (is_LDO_S instr) --- mem_data,
			  (is_LDO_L instr) --- mem_data,
			  (is_LD_B instr)  --- mem_data,
			  (is_LD_S instr)  --- mem_data,
			  (is_LD_L instr)  --- mem_data,
			  (is_LSHR instr)  --- (rA '>>' rB),
			  (is_MOD instr)   --- (rA '%' rB),
			  (is_MOV instr)   --- rB,
			  (is_MUL instr)   --- (rA '*' rB),
			  (is_NEG instr)   --- ('0 '-' rB),
			  (is_NOT instr)   --- ('~' rB),
			  (is_OR instr)    --- (rA '|' rB),
			  (is_POP instr)   --- mem_data,
			  (is_PUSH instr)  --- (rA '-' '4)
			] 'X,
	// Flags
	eq' <- rA '=' rB,
	ugt' <- rA '>' rB,
	gt' <- signed_gt rA rB,
	lt' <- signed_gt rB rA,
	ult' <- rB '>' rA,
	raw_flags <- mk_flags eq' ult' lt' ugt' gt',
	flags' <- (IF (is_CMP instr) THEN raw_flags ELSE flags),
	//
	rf' <- (IF do_wb THEN (rf_write rf wb_adr wb_d) ELSE rf),
	//
	mem' <- mem,
	next_state <- mk_state pc' flags' rf' mem'
];

let NS =
    bit_input	reset.
    state_input S0.
    state_input state.
    state_output n_state.
    state_internal raw_n_state.
    CELL "Draw_hfl_code NS 3" [
	NEXT state raw_n_state,
	n_state <- (IF reset THEN S0 ELSE raw_n_state)
];

let Moxie = 
    bit_input	clk.
    bit_input	reset.
    state_input	S0.
    word_output	pc.
    word_output	r0.
    word_output	r1.
    word_output	r2.
    word_output	r3.
    word_output	r4.
    word_output	r5.
    word_output	r6.
    word_output	r7.
    word_output	r8.
    word_output	r9.
    word_output	r10.
    word_output	r11.
    word_output	r12.
    word_output	r13.
    word_output	sp.
    word_output	fp.
    state_internal  n_state state.
    CELL "moxie" [
	NS reset S0 state n_state,
	re_ff clk n_state state,
	pc <- state-->PC,
	r0 <-  (rf_read '0  (state-->RF)),
	r1 <-  (rf_read '1  (state-->RF)),
	r2 <-  (rf_read '2  (state-->RF)),
	r3 <-  (rf_read '3  (state-->RF)),
	r4 <-  (rf_read '4  (state-->RF)),
	r5 <-  (rf_read '5  (state-->RF)),
	r6 <-  (rf_read '6  (state-->RF)),
	r7 <-  (rf_read '7  (state-->RF)),
	r8 <-  (rf_read '8  (state-->RF)),
	r9 <-  (rf_read '9  (state-->RF)),
	r10 <- (rf_read '10 (state-->RF)),
	r11 <- (rf_read '11 (state-->RF)),
	r12 <- (rf_read '12 (state-->RF)),
	r13 <- (rf_read '13 (state-->RF)),
	sp <-  (rf_read '14 (state-->RF)),
	fp <-  (rf_read '15 (state-->RF))
];

let p = (Moxie 'clk 'reset 'S0 'pc
	       'r0 'r1 'r2 'r3 'r4 'r5 'r6 'r7 'r8
	       'r9 'r10 'r11 'r12 'r13 'sp 'fp)
;

time (p fseq 1);

let ckt = pexlif2fsm p;
ckt;

let BUG =
    bit_input do_wb.
    bv4_input	wb_adr.
    word_input	wb_d.
    state_input	state.
    word_output out.
    rf_internal rf rf'.
    CELL "BUG" [
	rf <- state-->RF,
	rf' <- (IF do_wb THEN (rf_write rf wb_adr wb_d) ELSE rf),
	out <- rf_read '2 rf'
];

let p = BUG 'do_wb 'wb_adr 'wb_d 'state 'out;
let ckt = pexlif2fsm p;
ckt;
