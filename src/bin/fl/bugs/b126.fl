set_file_name "ISA.fl";set_line_number 1;
load "ste.fl";
 
TYPE "bv2" 2;
TYPE "bv4" 4;
TYPE "bv6" 6;
TYPE "bv10" 10;
TYPE "byte" 8;
TYPE "hword" 16;
TYPE "word" 32;
TYPE "dword" 64;
 
 
STRUCT "flags" [
                ("EQ_FLAG", "bit"),
                ("ULESS_FLAG", "bit"),
                ("LESS_FLAG", "bit"),
                ("UGR_FLAG", "bit"),
                ("GR_FLAG", "bit")
               ]
;
 
let mk_flags {eq::bit} {ult::bit} {lt::bit} {ugr::bit} {gr::bit} =
    let res =
        W_CAT [hw_destr eq,hw_destr ult,hw_destr lt,hw_destr ugr,hw_destr gr]
    in
    {hw_constr res::flags}
;
 
STRUCT "regs" [
        ("R15",         "word"),
        ("R14",         "word"),
        ("R13",         "word"),
        ("R12",         "word"),
        ("R11",         "word"),
        ("R10",         "word"),
        ("R9",          "word"),
        ("R8",          "word"),
        ("R7",          "word"),
        ("R6",          "word"),
        ("R5",          "word"),
        ("R4",          "word"),
        ("R3",          "word"),
        ("R2",          "word"),
        ("R1",          "word"),
        ("R0",          "word")
];
 
let reg_read {addr::bv4} rf =
    IF( addr '=' '0 ) THEN rf-->R0 ELSE
    IF( addr '=' '1 ) THEN rf-->R1 ELSE
    IF( addr '=' '2 ) THEN rf-->R2 ELSE
    IF( addr '=' '3 ) THEN rf-->R3 ELSE
    IF( addr '=' '4 ) THEN rf-->R4 ELSE
    IF( addr '=' '5 ) THEN rf-->R5 ELSE
    IF( addr '=' '6 ) THEN rf-->R6 ELSE
    IF( addr '=' '7 ) THEN rf-->R7 ELSE
    IF( addr '=' '8 ) THEN rf-->R8 ELSE
    IF( addr '=' '9 ) THEN rf-->R9 ELSE
    IF( addr '=' '10 ) THEN rf-->R10 ELSE
    IF( addr '=' '11 ) THEN rf-->R11 ELSE
    IF( addr '=' '12 ) THEN rf-->R12 ELSE
    IF( addr '=' '13 ) THEN rf-->R13 ELSE
    IF( addr '=' '14 ) THEN rf-->R14 ELSE
    IF( addr '=' '15 ) THEN rf-->R15 ELSE
    'X
;
 
 
let reg_write {addr::bv4} {data::word} rf =
    IF( addr '=' '0 )  THEN ((rf<--R0) data) ELSE
    IF( addr '=' '1 )  THEN ((rf<--R1) data) ELSE
    IF( addr '=' '2 )  THEN ((rf<--R2) data) ELSE
    IF( addr '=' '3 )  THEN ((rf<--R3) data) ELSE
    IF( addr '=' '4 )  THEN ((rf<--R4) data) ELSE
    IF( addr '=' '5 )  THEN ((rf<--R5) data) ELSE
    IF( addr '=' '6 )  THEN ((rf<--R6) data) ELSE
    IF( addr '=' '7 )  THEN ((rf<--R7) data) ELSE
    IF( addr '=' '8 )  THEN ((rf<--R8) data) ELSE
    IF( addr '=' '9 )  THEN ((rf<--R9) data) ELSE
    IF( addr '=' '10 ) THEN ((rf<--R10) data) ELSE
    IF( addr '=' '11 ) THEN ((rf<--R11) data) ELSE
    IF( addr '=' '12 ) THEN ((rf<--R12) data) ELSE
    IF( addr '=' '13 ) THEN ((rf<--R13) data) ELSE
    IF( addr '=' '14 ) THEN ((rf<--R14) data) ELSE
    IF( addr '=' '15 ) THEN ((rf<--R15) data) ELSE
    rf
;
 
 
lettype mem = MEM ((word#byte) list);
 
let Mr addr mem =
    val (MEM al) = mem in
    letrec rd ((a,d):rem) = IF (a '=' addr) THEN d ELSE (rd rem)
     /\    rd [] = 'X
    in
    rd al
;
 
let Mw addr {data::byte} mem =
    val (MEM al) = mem in
    letrec wr ((a,d):rem) =
            (a,((a '=' addr) '?' data ':' d)):(wr rem)
     /\    wr [] = []
    in
    MEM (wr al)
;
 
 
let b2h {b1::byte} {b2::byte} =
    {hw_constr (W_CAT [(hw_destr b1),(hw_destr b2)]):: hword}
;
 
let b2w {b1::byte} {b2::byte} {b3::byte} {b4::byte} =
    {hw_constr (W_CAT [(hw_destr b1),
                       (hw_destr b2),
                       (hw_destr b3),
                       (hw_destr b4)]):: word}
;
 
STRUCT "state" [
                ("PC",          "word"),
                ("FLAGS",       "flags"),
                ("REGS",        "regs")
                //("sregs",     "???")
];
 
 
let extract_9_0 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (9--0) we in
    {hw_constr swe::bv10}
;
 
let extract_15_8 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (15--8) we in
    {hw_constr swe::byte}
;
 
let extract_15_10 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (15--10) we in
    {hw_constr swe::bv6}
;
 
let extract_15_12 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (15--12) we in
    {hw_constr swe::bv4}
;
 
let extract_11_8 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (11--8) we in
    {hw_constr swe::bv4}
;
 
let extract_7_4 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (7--4) we in
    {hw_constr swe::bv4}
;
 
let extract_3_0 {h::hword} =
    let we = hw_destr h in
    let swe = W_SLICE (3--0) we in
    {hw_constr swe::bv4}
;
 
let extract_32_16 {w::word} =
    let we = hw_destr w in
    let swe = W_SLICE (31--16) we in
    {hw_constr swe::hword}
;
 
let extract_7_0 {h::word} =
    let we = hw_destr h in
    let swe = W_SLICE (7--0) we in
    {hw_constr swe::byte}
;
 
let extract_15_0 {h::word} =
    let we = hw_destr h in
    let swe = W_SLICE (15--0) we in
    {hw_constr swe::hword}
;
 
let case conds default =
    letrec sel ((c,v):rem) = IF c THEN v ELSE (sel rem)
     /\    sel [] = default
    in
    sel conds
;
 
let signed_gt {a:: *a} {b:: *a} =
    let aw = hw_destr a in
    let bw = hw_destr b in
    let sz = hw_size a in
    let a_sign = W_SLICE [sz-1] aw in
    let b_sign = W_SLICE [sz-1] bw in
    let w_res = W_ITE a_sign
                (
                    W_ITE b_sign (W_GR aw bw) (W_CONST 1 0)
                )
                (
                    W_ITE b_sign (W_CONST 1 1) (W_GR aw bw)
                )
    in
    {hw_constr w_res::bit}
;
 
 set_file_name "ISA.fl";set_line_number 182;
 
let extract_15_0 {h::word} =
    let we = hw_destr h in
    let swe = W_SLICE (15--0) we in
    {hw_constr swe::hword}
;
 set_file_name "ISA.fl";set_line_number 188;
 
let case conds default =
    letrec sel ((c,v):rem) = IF c THEN v ELSE (sel rem)
     /\    sel [] = default
    in
    sel conds
;
 set_file_name "ISA.fl";set_line_number 195;
 
let signed_gt {a:: *a} {b:: *a} =
    let aw = hw_destr a in
    let bw = hw_destr b in
    let sz = hw_size a in
    let a_sign = W_SLICE [sz-1] aw in
    let b_sign = W_SLICE [sz-1] bw in
    let w_res = W_ITE a_sign
                (
                    W_ITE b_sign (W_GR aw bw) (W_CONST 1 0)
                )
                (
                    W_ITE b_sign (W_CONST 1 1) (W_GR aw bw)
                )
    in
    {hw_constr w_res::bit}
;
 set_file_name "ISA.fl";set_line_number 213;
 
let NEXT state mem =
    //
    // Extract current state elements
    //
    let pc    = state-->PC in
    let flags = state-->FLAGS in
    let eq = flags-->EQ_FLAG in
    let uless = flags-->ULESS_FLAG in
    let less = flags-->LESS_FLAG in
    let ugr = flags-->UGR_FLAG in
    let gr = flags-->GR_FLAG in
    let regs  = state-->REGS in
    //
    // Now read instructions and (potentially) immediate values
    //
    let instr = b2h (Mr pc mem) (Mr (pc '+' '1) mem) in
    let imm = b2w (Mr (pc '+' '2) mem) (Mr (pc '+' '3) mem)
                  (Mr (pc '+' '4) mem) (Mr (pc '+' '5) mem) in
    let imm_7_0 = extract_7_0 imm in
    let imm_15_0 = extract_15_0 imm in
    //
    // Extract subfields
    //
    let instr_9_0 = extract_9_0 instr in
    let instr_15_8 = extract_15_8 instr in
    let instr_15_10 = extract_15_10 instr in
    let instr_15_12 = extract_15_12 instr in
    //
    // Decode the instructions
    //
    let is_ADD = (instr_15_8 '=' '0b00000101) in
    let is_AND = (instr_15_8 '=' '0b00100110) in
    let is_ASHL = (instr_15_8 '=' '0b00101000) in
    let is_ASHR = (instr_15_8 '=' '0b00101101) in
    let is_BEQ = (instr_15_10 '=' '0b110000) in
    let is_BGE = (instr_15_10 '=' '0b110110) in
    let is_BGEU = (instr_15_10 '=' '0b111000) in
    let is_BGT = (instr_15_10 '=' '0b110011) in
    let is_BGTU = (instr_15_10 '=' '0b110101) in
    let is_BLE = (instr_15_10 '=' '0b110111) in
    let is_BLEU = (instr_15_10 '=' '0b111001) in
    let is_BLT = (instr_15_10 '=' '0b110010) in
    let is_BLTU = (instr_15_10 '=' '0b110100) in
    let is_BNE = (instr_15_10 '=' '0b110001) in
    let is_CMP = (instr_15_8 '=' '0b00001110) in
    let is_DEC = (instr_15_12 '=' '0b1001) in
    let is_DIV = (instr_15_8 '=' '0b00110001) in
    let is_GSR = (instr_15_12 '=' '0b1010) in
    let is_INC = (instr_15_12 '=' '0b1000) in
    let is_JMP = (instr_15_8 '=' '0b00100101) in
    let is_JMPA = (instr_15_8 '=' '0b00011010) in
    let is_JSR = (instr_15_8 '=' '0b00011001) in
    let is_JSRA = (instr_15_8 '=' '0b00000011) in
    let is_LDA_B = (instr_15_8 '=' '0b00011101) in
    let is_LDA_L = (instr_15_8 '=' '0b00001000) in
    let is_LDA_S = (instr_15_8 '=' '0b00100010) in
    let is_LDI_B = (instr_15_8 '=' '0b00011011) in
    let is_LDI_L = (instr_15_8 '=' '0b00000001) in
    let is_LDI_S = (instr_15_8 '=' '0b00100000) in
    let is_LDO_B = (instr_15_8 '=' '0b00110110) in
    let is_LDO_L = (instr_15_8 '=' '0b00001100) in
    let is_LDO_S = (instr_15_8 '=' '0b00111000) in
    let is_LD_B = (instr_15_8 '=' '0b00011100) in
    let is_LD_L = (instr_15_8 '=' '0b00001010) in
    let is_LD_S = (instr_15_8 '=' '0b00100001) in
    let is_LSHR = (instr_15_8 '=' '0b00100111) in
    let is_MOD = (instr_15_8 '=' '0b00110011) in
    let is_MOV = (instr_15_8 '=' '0b00000010) in
    let is_MUL = (instr_15_8 '=' '0b00101111) in
    let is_NEG = (instr_15_8 '=' '0b00101010) in
    let is_NOP = (instr_15_8 '=' '0b00000000) in
    let is_NOT = (instr_15_8 '=' '0b00101100) in
    let is_OR = (instr_15_8 '=' '0b00101011) in
    let is_POP = (instr_15_8 '=' '0b00000111) in
    let is_PUSH = (instr_15_8 '=' '0b00000110) in
    let is_RET = (instr_15_8 '=' '0b00000100) in
    let is_SSR = (instr_15_12 '=' '0b1011) in
    let is_STA_B = (instr_15_8 '=' '0b00011111) in
    let is_STA_L = (instr_15_8 '=' '0b00001001) in
    let is_STA_S = (instr_15_8 '=' '0b00100100) in
    let is_STO_B = (instr_15_8 '=' '0b00110111) in
    let is_STO_L = (instr_15_8 '=' '0b00001101) in
    let is_STO_S = (instr_15_8 '=' '0b00111001) in
    let is_ST_B = (instr_15_8 '=' '0b00011110) in
    let is_ST_L = (instr_15_8 '=' '0b00001011) in
    let is_ST_S = (instr_15_8 '=' '0b00100011) in
    let is_SUB_L = (instr_15_8 '=' '0b00101001) in
    let is_SWI = (instr_15_8 '=' '0b00110000) in
    let is_UDIV = (instr_15_8 '=' '0b00110010) in
    let is_UMOD = (instr_15_8 '=' '0b00110100) in
    let is_XOR = (instr_15_8 '=' '0b00101110) in
    //
    let instr_11_8 = extract_11_8 instr in
    let instr_7_4 = extract_7_4 instr in
    let instr_3_0 = extract_3_0 instr in
    //
    let short_rA = reg_read instr_11_8 regs in
    let rA = reg_read instr_7_4 regs in
    let rB = reg_read instr_3_0 regs in
    //
    // Memory read
    //
    let mem_read_sz = case [
            is_LD_B   --- '0b01, 
            is_LDA_B  --- '0b01,
            is_LDO_B  --- '0b01,
            is_LD_S   --- '0b10,
            is_LDA_S  --- '0b10,
            is_LDO_S  --- '0b10,
            is_LD_L   --- '0b11,
            is_LDA_L  --- '0b11,
            is_LDO_L  --- '0b11,
            is_POP    --- '0b11]  {'0b00::bv2}
    in
    let rb_imm_32_16 = rB '+' (ZX (extract_32_16 imm)) in
    let read_addr = case [
            is_LD_B   --- rB, 
            is_LD_L   --- rB,
            is_LD_S   --- rB,
            is_LDA_B  --- imm,
            is_LDA_L  --- imm,
            is_LDA_S  --- imm,
            is_LDO_B  --- rb_imm_32_16,
            is_LDO_L  --- rb_imm_32_16,
            is_LDO_S  --- rb_imm_32_16,
            is_POP    --- rB]  '0
    in
    let read_addr1 = read_addr '+' '1 in
    let read_addr2 = read_addr '+' '2 in
    let read_addr3 = read_addr '+' '3 in
    let mem_data = case [
            (mem_read_sz '=' '0b00) --- '0,
            (mem_read_sz '=' '0b01) --- (ZX (Mr read_addr mem)),
            (mem_read_sz '=' '0b10) --- (ZX (b2h (Mr read_addr mem)
                                                 (Mr read_addr1 mem)))
            ] (b2w (Mr read_addr mem)  (Mr read_addr1 mem)
                   (Mr read_addr2 mem) (Mr read_addr3 mem))
    in
    //
    // PC update
    //
    let next_pc = pc '+' '2 in
    let br_target = pc '+' '2 '*' SX instr_9_0 in
    let pc' = case [
                is_BEQ   --- (eq '?' br_target ':' next_pc),
                is_BGE   --- ((eq '|' gr) '?' br_target ':' next_pc),
                is_BGEU  --- ((eq '|' ugr) '?' br_target ':' next_pc),
                is_BGT   --- (gr '?' br_target ':' next_pc),
                is_BGTU  --- (ugr '?' br_target ':' next_pc),
                is_BLE   --- ((eq '|' less) '?' br_target ':' next_pc),
                is_BLEU  --- ((eq '|' uless) '?' br_target ':' next_pc),
                is_BLT   --- (less '?' br_target ':' next_pc),
                is_BLTU  --- (uless '?' br_target ':' next_pc),
                is_BNE   --- (eq '?' next_pc ':' br_target ),
                is_JMP   --- rA,
                is_JMPA  --- imm,
                is_JSR   --- rA,
                is_JSRA  --- imm,
                is_LDA_B --- (pc '+' '6),
                is_LDA_L --- (pc '+' '6),
                is_LDA_S --- (pc '+' '6),
                is_LDI_B --- (pc '+' '6),
                is_LDI_L --- (pc '+' '6),
                is_LDI_S --- (pc '+' '6),
                is_LDO_B --- (pc '+' '4),
                is_LDO_L --- (pc '+' '4),
                is_LDO_S --- (pc '+' '4)
            ] next_pc
    in
    //
    // ALU ops
    //
    let do_wb = is_ADD '|' is_AND '|' is_ASHL '|' is_ASHR '|' is_DEC '|' 
                is_DIV '|' is_INC '|' is_JSR '|' is_JSRA '|' is_LDA_B '|' 
                is_LDA_L '|' is_LDA_S '|' is_LDI_B '|' is_LDI_L '|' is_LDI_S '|'
                is_LDO_B '|' is_LDO_L '|' is_LDO_S '|' is_LD_B '|' is_LD_L '|' 
                is_LD_S '|' is_LSHR '|' is_MOD '|' is_MOV '|' is_MUL '|' 
                is_NEG '|' is_NOT '|' is_OR '|' is_POP '|' is_PUSH
    in
    let wb_r = case [
                      is_DEC --- instr_11_8,
                      is_INC --- instr_11_8
                    ] instr_7_4
    in
    let wb_d = case [
                      is_ADD   --- (rA '+' rB),
                      is_AND   --- (rA '&' rB),
                      is_ASHL  --- (rA '<<' rB),
                      is_ASHR  --- (rA '|>>' rB),
                      is_DEC   --- (short_rA '-' imm),
                      is_DIV   --- (rA '/' rB),
                      is_INC   --- (short_rA '+' imm),
                      is_LDA_B --- mem_data,
                      is_LDA_S --- mem_data,
                      is_LDA_L --- mem_data,
                      is_LDI_B --- (ZX imm_7_0),
                      is_LDI_S --- (ZX imm_15_0),
                      is_LDI_L --- imm,
                      is_LDO_B --- mem_data,
                      is_LDO_S --- mem_data,
                      is_LDO_L --- mem_data,
                      is_LD_B  --- mem_data,
                      is_LD_S  --- mem_data,
                      is_LD_L  --- mem_data,
                      is_LSHR  --- (rA '>>' rB),
                      is_MOD   --- (rA '%' rB),
                      is_MOV   --- rB,
                      is_MUL   --- (rA '*' rB),
                      is_NEG   --- ('0 '-' rB),
                      is_NOT   --- ('~' rB),
                      is_OR    --- (rA '|' rB),
                      is_POP   --- mem_data,
                      is_PUSH  --- (rA '-' '4)
                    ] 'X
    in
    // Flags
    let eq' = rA '=' rB in
    let ugt' = rA '>' rB in
    let gt' = signed_gt rA rB in
    let lt' = signed_gt rB rA in
    let ult' = rB '>' rA in
    let raw_flags = mk_flags eq' ult' lt' ugt' gt' in
    let flags' = IF is_CMP THEN raw_flags ELSE flags in
    //
    let regs' = IF do_wb THEN (reg_write wb_r wb_d regs) ELSE regs in
    (((((state<--PC) pc')<--FLAGS) flags')<--REGS) regs'
;
 