load "ste.fl";

forward_declare {ADDSUB::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SFPU_ADDSUB::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SFPU_MUL::((string#string) list) -> ((string#(string list)) list) -> pexlif};

let ADDSUB {attrs::(string#string) list} conns =
    let inps = [ "dataa[35:0]",
                 "datab[35:0]",
                 "add_sub" ] in
    let outs = [ "result[35:0]" ] in
    let ints = [ "TmP_0[35:0]",
                 "TmP_1[35:0]",
                 "TmP_2",
                 "TmP_3[35:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 36 "SP_FPU.v:57" ["TmP_0[35:0]"] ["dataa[35:0]"] ["TmP_3[35:0]"] ,
        _add 36 "SP_FPU.v:57" ["result[35:0]"] ["TmP_0[35:0]"] ["0b00000000000000000000000000000000000", "TmP_2"] ,
        _not 36 "SP_FPU.v:57" ["TmP_1[35:0]"] ["datab[35:0]"],
        _not 1 "SP_FPU.v:57" ["TmP_2"] ["add_sub"],
        _mux 36 "SP_FPU.v:57" ["TmP_3[35:0]"] ["TmP_1[35:0]"] ["datab[35:0]"] ["add_sub"]
    ] in
    PINST "ADDSUB" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SFPU_ADDSUB {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "NZEXP[1:0]",
                 "BWD[1:0]",
                 "SELECT[3:0]" ] in
    let outs = [ "OUT[36:0]",
                 "IOUT[31:0]",
                 "CMPRES[1:0]" ] in
    let ints = [ "TmP_0[1:0]",
                 "TmP_1[31:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[33:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3[31:0]",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4[36:0]",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65[30:0]",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7[9:0]",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73[9:0]",
                 "TmP_74",
                 "TmP_75[23:0]",
                 "TmP_76[4:0]",
                 "TmP_77",
                 "TmP_78[32:0]",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82[31:0]",
                 "TmP_9",
                 "add_q[33:0]",
                 "addflag",
                 "blshift[31:0]",
                 "blshifta[31:0]",
                 "blshiftb[31:0]",
                 "blshiftc[31:0]",
                 "blshiftd[31:0]",
                 "blshifte[31:0]",
                 "brshifta[32:0]",
                 "brshiftb[32:0]",
                 "brshiftc[32:0]",
                 "brshiftd[32:0]",
                 "brshifte[32:0]",
                 "car_ry",
                 "cmp_res",
                 "eminus1[7:0]",
                 "exdiff[8:0]",
                 "exdiff12[8:0]",
                 "expol[9:0]",
                 "ganzklein",
                 "iadder[32:0]",
                 "inex[1:0]",
                 "lsb",
                 "lsb_bl[1:0]",
                 "madiff[23:0]",
                 "minint",
                 "movdat[31:0]",
                 "movif[31:0]",
                 "muxsrc1[23:0]",
                 "muxsrc2[31:0]",
                 "out_v0[36:0]",
                 "out_v1[36:0]",
                 "ovflag",
                 "ovflag2",
                 "pipe1[23:0]",
                 "pshift[1:0]",
                 "result[35:0]",
                 "result_nosw[35:0]",
                 "result_sw[35:0]",
                 "rexdiff[8:0]",
                 "rexo[8:0]",
                 "rinex[1:0]",
                 "rovfl",
                 "select_v1",
                 "shift[4:0]",
                 "shift1[4:0]",
                 "shift2[4:0]",
                 "shift_1",
                 "shift_16",
                 "shift_2",
                 "shift_4",
                 "shift_8",
                 "shiftl[9:0]",
                 "sign",
                 "sign1",
                 "sign2",
                 "switch",
                 "vadd_q[33:0]",
                 "value1[24:0]",
                 "value2[24:0]",
                 "variante",
                 "vorz",
                 "vresult[35:0]",
                 "vsub_q[33:0]",
                 "vswitch",
                 "vzero",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "SP_FPU.v:291" ["TmP_21"] ["TmP_64"] ["TmP_32"] ,
        _eq 32 "SP_FPU.v:116" ["TmP_23"] ["SRC1[31:0]"] ["0b11001111000000000000000000000000"] ,
        _logic_not 8 "SP_FPU.v:135" ["TmP_24"] ["exdiff[8:1]"],
        _eq 9 "SP_FPU.v:135" ["TmP_25"] ["exdiff[8:0]"] ["0b111111111"] ,
        _logic_not 8 "SP_FPU.v:139" ["TmP_26"] ["exdiff[7:0]"],
        _eq 32 "SP_FPU.v:174" ["TmP_27"] ["SRC1[31:0]"] ["SRC2[31:0]"] ,
        _logic_not 16 "SP_FPU.v:191" ["shift_16"] ["blshift[31:16]"],
        _logic_not 8 "SP_FPU.v:211" ["shift_8"] ["blshifta[31:24]"],
        _logic_not 4 "SP_FPU.v:214" ["shift_4"] ["blshiftb[31:28]"],
        _logic_not 2 "SP_FPU.v:216" ["shift_2"] ["blshiftc[31:30]"],
        _eq 2 "SP_FPU.v:228" ["TmP_22"] ["SELECT[1:0]"] ["0b11"] ,
        _logic_not 32 "SP_FPU.v:231" ["TmP_28"] ["blshift[31:0]"],
        _eq 2 "SP_FPU.v:231" ["TmP_29"] ["SELECT[1:0]"] ["0b10"] ,
        _eq 3 "SP_FPU.v:290" ["TmP_30"] ["brshifte[2:0]"] ["0b110"] ,
        _eq 2 "SP_FPU.v:290" ["TmP_31"] ["brshifte[1:0]"] ["0b11"] ,
        _logic_not 2 "SP_FPU.v:291" ["TmP_32"] ["brshifte[1:0]"],
        _logic_not 27 "SP_FPU.v:336" ["vzero"] ["vresult[26:0]"],
        _logic_reduce_bool 3 "SP_FPU.v:104" ["TmP_33"] ["rexdiff[7:5]"],
        _logic_reduce_bool 5 "SP_FPU.v:111" ["TmP_34"] ["rexo[7:3]"],
        _logic_reduce_bool 4 "SP_FPU.v:112" ["TmP_35"] ["rexo[7:4]"],
        _logic_reduce_bool 3 "SP_FPU.v:113" ["TmP_36"] ["rexo[7:5]"],
        _ne 1 "SP_FPU.v:194" ["TmP_37"] ["muxsrc2[24]"] ["result[27]"] ,
        _logic_reduce_bool 3 "SP_FPU.v:194" ["TmP_38"] ["result[2:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:195" ["TmP_39"] ["result[1:0]"],
        _logic_reduce_bool 7 "SP_FPU.v:228" ["TmP_40"] ["blshifte[6:0]"],
        _logic_reduce_bool 3 "SP_FPU.v:253" ["TmP_41"] ["exdiff[7:5]"],
        _logic_reduce_bool 3 "SP_FPU.v:255" ["TmP_42"] ["exdiff12[7:5]"],
        _logic_reduce_bool 8 "SP_FPU.v:274" ["TmP_43"] ["pipe1[7:0]"],
        _logic_reduce_bool 9 "SP_FPU.v:275" ["TmP_44"] ["brshifta[8:0]"],
        _logic_reduce_bool 5 "SP_FPU.v:276" ["TmP_45"] ["brshiftb[4:0]"],
        _logic_reduce_bool 3 "SP_FPU.v:277" ["TmP_46"] ["brshiftc[2:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:278" ["TmP_47"] ["brshiftd[1:0]"],
        _ne 1 "SP_FPU.v:301" ["TmP_48"] ["iadder[8]"] ["iadder[7]"] ,
        _ne 1 "SP_FPU.v:302" ["TmP_49"] ["iadder[16]"] ["iadder[15]"] ,
        _ne 1 "SP_FPU.v:303" ["TmP_50"] ["iadder[32]"] ["iadder[31]"] ,
        _logic_reduce_bool 7 "SP_FPU.v:317" ["lsb"] ["brshifte[6:0]"],
        _ne 1 "SP_FPU.v:328" ["TmP_51"] ["muxsrc2[24]"] ["vresult[27]"] ,
        _logic_reduce_bool 3 "SP_FPU.v:328" ["TmP_52"] ["vresult[2:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:332" ["TmP_53"] ["vresult[1:0]"],
        _not 1 "SP_FPU.v:103" ["TmP_54"] ["minint"],
        _not 1 "SP_FPU.v:104" ["TmP_55"] ["rexdiff[8]"],
        _not 1 "SP_FPU.v:107" ["TmP_56"] ["BWD[1]"],
        _not 1 "SP_FPU.v:113" ["TmP_57"] ["rexo[8]"],
        _not 1 "SP_FPU.v:170" ["addflag"] ["TmP_63"],
        _not 1 "SP_FPU.v:175" ["TmP_60"] ["cmp_res"],
        _not 1 "SP_FPU.v:175" ["TmP_61"] ["SRC1[31]"],
        _not 1 "SP_FPU.v:218" ["shift_1"] ["blshiftd[31]"],
        _not 1 "SP_FPU.v:230" ["TmP_58"] ["NZEXP[1]"],
        _not 1 "SP_FPU.v:230" ["TmP_59"] ["NZEXP[0]"],
        _not 1 "SP_FPU.v:235" ["TmP_62"] ["SELECT[1]"],
        _not 1 "SP_FPU.v:291" ["TmP_64"] ["ganzklein"],
        _not 31 "SP_FPU.v:295" ["TmP_65[30:0]"] ["brshifte[32:2]"],
        _or 1 "SP_FPU.v:103" ["TmP_66"] ["ovflag"] ["ovflag2"] ,
        _or 1 "SP_FPU.v:135" ["TmP_67"] ["TmP_24"] ["TmP_25"] ,
        _or 1 "SP_FPU.v:135" ["TmP_9"] ["TmP_67"] ["SELECT[1]"] ,
        _or 1 "SP_FPU.v:139" ["switch"] ["exdiff[8]"] ["TmP_15"] ,
        _or 1 "SP_FPU.v:174" ["cmp_res"] ["TmP_27"] ["TmP_16"] ,
        _or 10 "SP_FPU.v:224" ["expol[9:0]"] ["TmP_73[9:0]"] ["0b0", "rovfl", "0b00000000"] ,
        _or 1 "SP_FPU.v:231" ["TmP_10"] ["TmP_18"] ["TmP_20"] ,
        _or 1 "SP_FPU.v:231" ["TmP_68"] ["TmP_19"] ["TmP_29"] ,
        _or 1 "SP_FPU.v:290" ["TmP_69"] ["TmP_30"] ["TmP_31"] ,
        _dff 37 "SP_FPU.v:338" ["out_v0[36:0]"] ["BCLK"] ["TmP_4[36:0]"],
        _dff 32 "SP_FPU.v:297" ["IOUT[31:0]"] ["BCLK"] ["TmP_1[31:0]"],
        _dff 1 "SP_FPU.v:235" ["select_v1"] ["BCLK"] ["TmP_6"],
        _dff 1 "SP_FPU.v:233" ["sign"] ["BCLK"] ["TmP_8"],
        _dff 1 "SP_FPU.v:230" ["zero"] ["BCLK"] ["TmP_10"],
        _dff 2 "SP_FPU.v:226" ["rinex[1:0]"] ["BCLK"] ["brshifte[1:0]"],
        _dff 2 "SP_FPU.v:221" ["pshift[1:0]"] ["BCLK"] ["shift_16", "shift_8"],
        _dff 32 "SP_FPU.v:212" ["blshiftb[31:0]"] ["BCLK"] ["TmP_3[31:0]"],
        _dff 34 "SP_FPU.v:194" ["add_q[33:0]"] ["BCLK"] ["TmP_2[33:0]"],
        _dff 10 "SP_FPU.v:189" ["shiftl[9:0]"] ["BCLK"] ["TmP_7[9:0]"],
        _dff 2 "SP_FPU.v:175" ["CMPRES[1:0]"] ["BCLK"] ["TmP_0[1]", "cmp_res"],
        _dff 1 "SP_FPU.v:135" ["variante"] ["BCLK"] ["TmP_9"],
        _dff 1 "SP_FPU.v:103" ["rovfl"] ["BCLK"] ["TmP_5"],
        _pmux 1 2 "SP_FPU.v:300" ["ovflag2"] ["TmP_50"] ["TmP_48", "TmP_49"] ["TmP_71", "TmP_70"],
        _pmux 1 2 "SP_FPU.v:289" ["car_ry"] ["SRC1[31]"] ["TmP_81", "TmP_77"] ["TmP_72", "SELECT[3]"],
        _logic_not 2 "SP_FPU.v:289" ["TmP_72"] ["SELECT[3:2]"],
        _pmux 1 2 "SP_FPU.v:110" ["ovflag"] ["TmP_14"] ["TmP_12", "TmP_13"] ["TmP_71", "TmP_70"],
        _pmux 32 2 "SP_FPU.v:85" ["movdat[31:0]"] ["SRC1[31:0]"] ["SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7:0]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15:0]"] ["TmP_71", "TmP_70"],
        _eq 2 "SP_FPU.v:85" ["TmP_70"] ["BWD[1:0]"] ["0b01"] ,
        _logic_not 2 "SP_FPU.v:85" ["TmP_71"] ["BWD[1:0]"],
        _sub 9 "SP_FPU.v:102" ["rexdiff[8:0]"] ["0b010011101"] ["0b0", "SRC1[30:23]"] ,
        _sub 9 "SP_FPU.v:107" ["rexo[8:0]"] ["0b0", "SRC1[30:23]"] ["0b00111111", "TmP_56"] ,
        _sub 9 "SP_FPU.v:131" ["exdiff[8:0]"] ["0b0", "SRC2[30:23]"] ["0b0", "SRC1[30:23]"] ,
        _sub 24 "SP_FPU.v:132" ["madiff[23:0]"] ["0b0", "SRC2[22:0]"] ["0b0", "SRC1[22:0]"] ,
        _sub 10 "SP_FPU.v:224" ["TmP_73[9:0]"] ["shiftl[9:0]"] ["0b00000", "pshift[1:0]", "shift_4", "shift_2", "shift_1"] ,
        _sub 9 "SP_FPU.v:254" ["exdiff12[8:0]"] ["0b0", "SRC1[30:23]"] ["0b0", "SRC2[30:23]"] ,
        _sub 8 "SP_FPU.v:325" ["eminus1[7:0]"] ["muxsrc2[31:24]"] ["0b00000001"] ,
        _mux 25 "SP_FPU.v:141" ["value1[24:0]"] ["NZEXP[0]", "SRC1[22:0]", "0b0"] ["0b0", "NZEXP[0]", "SRC1[22:0]"] ["exdiff[0]"],
        _mux 25 "SP_FPU.v:142" ["value2[24:0]"] ["NZEXP[1]", "SRC2[22:0]", "0b0"] ["0b0", "NZEXP[1]", "SRC2[22:0]"] ["exdiff[0]"],
        _mux 36 "SP_FPU.v:154" ["result[35:0]"] ["result_nosw[35:0]"] ["result_sw[35:0]"] ["switch"],
        _mux 1 "SP_FPU.v:169" ["vorz"] ["SRC2[31]"] ["TmP_79"] ["switch"],
        _mux 1 "SP_FPU.v:175" ["TmP_74"] ["SRC2[31]"] ["TmP_61"] ["switch"],
        _mux 32 "SP_FPU.v:187" ["blshift[31:0]"] ["result[26:0]", "0b00000"] ["movif[31:0]"] ["SELECT[1]"],
        _mux 10 "SP_FPU.v:189" ["TmP_7[9:0]"] ["0b0", "result[35:27]"] ["0b0010011110"] ["SELECT[1]"],
        _mux 34 "SP_FPU.v:195" ["TmP_2[33:0]"] ["result[35:27]", "result[25:2]", "TmP_39"] ["result[35:3]", "TmP_38"] ["TmP_37"],
        _mux 32 "SP_FPU.v:210" ["blshifta[31:0]"] ["blshift[31:0]"] ["blshift[15:0]", "0b0000000000000000"] ["shift_16"],
        _mux 32 "SP_FPU.v:213" ["TmP_3[31:0]"] ["blshifta[31:0]"] ["blshifta[23:0]", "0b00000000"] ["shift_8"],
        _mux 32 "SP_FPU.v:215" ["blshiftc[31:0]"] ["blshiftb[31:0]"] ["blshiftb[27:0]", "0b0000"] ["shift_4"],
        _mux 32 "SP_FPU.v:217" ["blshiftd[31:0]"] ["blshiftc[31:0]"] ["blshiftc[29:0]", "0b00"] ["shift_2"],
        _mux 32 "SP_FPU.v:219" ["blshifte[31:0]"] ["blshiftd[30:0]", "0b0"] ["0b1", "blshiftd[30:0]"] ["blshiftd[31]"],
        _mux 2 "SP_FPU.v:228" ["lsb_bl[1:0]"] ["blshifte[7]", "TmP_40"] ["rinex[1:0]"] ["TmP_22"],
        _mux 1 "SP_FPU.v:233" ["TmP_8"] ["vorz"] ["movdat[31]"] ["SELECT[1]"],
        _mux 37 "SP_FPU.v:238" ["out_v1[36:0]"] ["zero", "sign", "expol[9:0]", "blshifte[30:8]", "lsb_bl[1:0]"] ["zero", "sign", "0b0", "add_q[33:0]"] ["select_v1"],
        _mux 5 "SP_FPU.v:253" ["shift1[4:0]"] ["exdiff[4:0]"] ["0b11111"] ["TmP_41"],
        _mux 5 "SP_FPU.v:255" ["shift2[4:0]"] ["exdiff12[4:0]"] ["0b11111"] ["TmP_42"],
        _mux 32 "SP_FPU.v:257" ["muxsrc2[31:0]"] ["SRC2[30:23]", "0b1", "SRC2[22:0]"] ["SRC1[30:23]", "0b1", "SRC1[22:0]"] ["exdiff[8]"],
        _mux 24 "SP_FPU.v:258" ["muxsrc1[23:0]"] ["NZEXP[0]", "SRC1[22:0]"] ["NZEXP[1]", "SRC2[22:0]"] ["exdiff[8]"],
        _mux 24 "SP_FPU.v:260" ["TmP_75[23:0]"] ["NZEXP[0]", "SRC1[22:0]"] ["0b000000000000000000000000"] ["ganzklein"],
        _mux 24 "SP_FPU.v:260" ["pipe1[23:0]"] ["muxsrc1[23:0]"] ["TmP_75[23:0]"] ["SELECT[1]"],
        _mux 5 "SP_FPU.v:262" ["TmP_76[4:0]"] ["shift1[4:0]"] ["shift2[4:0]"] ["exdiff[8]"],
        _mux 5 "SP_FPU.v:262" ["shift[4:0]"] ["TmP_76[4:0]"] ["rexdiff[4:0]"] ["SELECT[1]"],
        _mux 33 "SP_FPU.v:274" ["brshifta[32:0]"] ["pipe1[23:0]", "0b000000000"] ["0b0000000000000000", "pipe1[23:8]", "TmP_43"] ["shift[4]"],
        _mux 33 "SP_FPU.v:275" ["brshiftb[32:0]"] ["brshifta[32:0]"] ["0b00000000", "brshifta[32:9]", "TmP_44"] ["shift[3]"],
        _mux 33 "SP_FPU.v:276" ["brshiftc[32:0]"] ["brshiftb[32:0]"] ["0b0000", "brshiftb[32:5]", "TmP_45"] ["shift[2]"],
        _mux 33 "SP_FPU.v:277" ["brshiftd[32:0]"] ["brshiftc[32:0]"] ["0b00", "brshiftc[32:3]", "TmP_46"] ["shift[1]"],
        _mux 33 "SP_FPU.v:278" ["brshifte[32:0]"] ["brshiftd[32:0]"] ["0b0", "brshiftd[32:2]", "TmP_47"] ["shift[0]"],
        _mux 1 "SP_FPU.v:291" ["TmP_77"] ["0b0"] ["TmP_21"] ["SRC1[31]"],
        _mux 33 "SP_FPU.v:295" ["TmP_78[32:0]"] ["0b00", "brshifte[32:2]"] ["0b11", "TmP_65[30:0]"] ["SRC1[31]"],
        _mux 32 "SP_FPU.v:297" ["TmP_1[31:0]"] ["iadder[31:0]"] ["0b10000000000000000000000000000000"] ["minint"],
        _mux 34 "SP_FPU.v:329" ["vadd_q[33:0]"] ["vresult[35:27]", "vresult[25:2]", "TmP_53"] ["vresult[35:3]", "TmP_52"] ["TmP_51"],
        _mux 34 "SP_FPU.v:333" ["vsub_q[33:0]"] ["vresult[35]", "eminus1[7:0]", "vresult[24:0]"] ["vresult[35:27]", "vresult[25:2]", "TmP_53"] ["vresult[26]"],
        _mux 37 "SP_FPU.v:339" ["TmP_4[36:0]"] ["0b0", "vorz", "0b0", "vadd_q[33:0]"] ["vzero", "vorz", "0b0", "vsub_q[33:0]"] ["TmP_63"],
        _mux 37 "SP_FPU.v:341" ["OUT[36:0]"] ["out_v0[36:0]"] ["out_v1[36:0]"] ["variante"],
        _xor 1 "SP_FPU.v:169" ["TmP_79"] ["SELECT[0]"] ["SRC1[31]"] ,
        _xor 1 "SP_FPU.v:170" ["TmP_80"] ["SRC1[31]"] ["SRC2[31]"] ,
        _xor 1 "SP_FPU.v:170" ["TmP_63"] ["SELECT[0]"] ["TmP_80"] ,
        _xor 1 "SP_FPU.v:290" ["TmP_81"] ["SRC1[31]"] ["TmP_69"] ,
        _xor 32 "SP_FPU.v:91" ["TmP_82[31:0]"] ["movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]"] ["movdat[31:0]"] ,
        _add 33 "SP_FPU.v:295" ["iadder[32:0]"] ["TmP_78[32:0]"] ["0b00000000000000000000000000000000", "car_ry"] ,
        _add 32 "SP_FPU.v:91" ["movif[31:0]"] ["TmP_82[31:0]"] ["0b0000000000000000000000000000000", "movdat[31]"] ,
        _and 1 "SP_FPU.v:103" ["TmP_11"] ["TmP_66"] ["TmP_22"] ,
        _and 1 "SP_FPU.v:103" ["TmP_5"] ["TmP_11"] ["TmP_54"] ,
        _and 1 "SP_FPU.v:104" ["ganzklein"] ["TmP_55"] ["TmP_33"] ,
        _and 1 "SP_FPU.v:111" ["TmP_12"] ["TmP_57"] ["TmP_34"] ,
        _and 1 "SP_FPU.v:112" ["TmP_13"] ["TmP_57"] ["TmP_35"] ,
        _and 1 "SP_FPU.v:113" ["TmP_14"] ["TmP_57"] ["TmP_36"] ,
        _and 1 "SP_FPU.v:116" ["minint"] ["TmP_23"] ["BWD[1]"] ,
        _and 1 "SP_FPU.v:139" ["TmP_15"] ["TmP_26"] ["madiff[23]"] ,
        _and 1 "SP_FPU.v:174" ["TmP_16"] ["TmP_58"] ["TmP_59"] ,
        _and 1 "SP_FPU.v:175" ["TmP_0[1]"] ["TmP_60"] ["TmP_74"] ,
        _and 1 "SP_FPU.v:230" ["TmP_17"] ["TmP_62"] ["TmP_58"] ,
        _and 1 "SP_FPU.v:230" ["TmP_18"] ["TmP_17"] ["TmP_59"] ,
        _and 1 "SP_FPU.v:231" ["TmP_19"] ["TmP_63"] ["TmP_62"] ,
        _and 1 "SP_FPU.v:231" ["TmP_20"] ["TmP_28"] ["TmP_68"] ,
        _and 1 "SP_FPU.v:235" ["TmP_6"] ["addflag"] ["TmP_62"] ,
        ADDSUB [("instance", "addsub_nosw"), ("src", "SP_FPU.v:146")] [
                ("add_sub",["addflag"]),
                ("dataa[35:0]",["0b0", "SRC2[30:23]", "NZEXP[1]", "SRC2[22:0]", "0b000"]),
                ("datab[35:0]",["0b000000000", "value1[24:0]", "0b00"]),
                ("result[35:0]",["result_nosw[35:0]"])],
        ADDSUB [("instance", "addsub_sw"), ("src", "SP_FPU.v:150")] [
                ("add_sub",["addflag"]),
                ("dataa[35:0]",["0b0", "SRC1[30:23]", "NZEXP[0]", "SRC1[22:0]", "0b000"]),
                ("datab[35:0]",["0b000000000", "value2[24:0]", "0b00"]),
                ("result[35:0]",["result_sw[35:0]"])],
        ADDSUB [("instance", "addsub_v"), ("src", "SP_FPU.v:321")] [
                ("add_sub",["addflag"]),
                ("dataa[35:0]",["0b0", "muxsrc2[31:0]", "0b000"]),
                ("datab[35:0]",["0b000000000", "brshifte[32:7]", "lsb"]),
                ("result[35:0]",["vresult[35:0]"])],
        _buf 2 "SP_FPU.v:185" ["inex[1:0]"] ["brshifte[1:0]"],
        _buf 1 "SP_FPU.v:124" ["sign1"] ["SRC1[31]"],
        _buf 1 "SP_FPU.v:124" ["sign2"] ["SRC2[31]"],
        _buf 1 "SP_FPU.v:242" ["vswitch"] ["exdiff[8]"]
    ] in
    PINST "SFPU_ADDSUB" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SFPU_MUL {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "MRESULT[47:0]",
                 "NZEXP[1:0]" ] in
    let outs = [ "OUT[36:0]" ] in
    let ints = [ "TmP_0[36:0]",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "expoh[9:0]",
                 "expol[9:0]",
                 "exponent[9:0]",
                 "orlow",
                 "resthigh[1:0]",
                 "restlow[1:0]",
                 "sign",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _not 1 "SP_FPU.v:364" ["TmP_3"] ["zero"],
        _or 1 "SP_FPU.v:363" ["zero"] ["TmP_1"] ["TmP_2"] ,
        _or 1 "SP_FPU.v:368" ["resthigh[0]"] ["MRESULT[22]"] ["orlow"] ,
        _dff 37 "SP_FPU.v:374" ["OUT[36:0]"] ["BCLK"] ["TmP_0[36:0]"],
        _sub 10 "SP_FPU.v:371" ["expoh[9:0]"] ["exponent[9:0]"] ["0b0001111110"] ,
        _sub 10 "SP_FPU.v:372" ["expol[9:0]"] ["exponent[9:0]"] ["0b0001111111"] ,
        _mux 37 "SP_FPU.v:375" ["TmP_0[36:0]"] ["zero", "sign", "expol[9:0]", "MRESULT[45:22]", "orlow"] ["zero", "sign", "expoh[9:0]", "MRESULT[46:23]", "resthigh[0]"] ["MRESULT[47]"],
        _xor 1 "SP_FPU.v:364" ["TmP_4"] ["SRC1[31]"] ["SRC2[31]"] ,
        _add 10 "SP_FPU.v:370" ["exponent[9:0]"] ["0b00", "SRC1[30:23]"] ["0b00", "SRC2[30:23]"] ,
        _and 1 "SP_FPU.v:364" ["sign"] ["TmP_4"] ["TmP_3"] ,
        _logic_reduce_bool 22 "SP_FPU.v:365" ["orlow"] ["MRESULT[21:0]"],
        _not 1 "SP_FPU.v:363" ["TmP_1"] ["NZEXP[1]"],
        _not 1 "SP_FPU.v:363" ["TmP_2"] ["NZEXP[0]"],
        _buf 1 "" ["resthigh[1]"] ["MRESULT[23]"],
        _buf 2 "SP_FPU.v:360" ["restlow[1:0]"] ["MRESULT[22]", "orlow"]
    ] in
    PINST "SFPU_MUL" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SP_FPU {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "START",
                 "OPCODE[7:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "FSR[5:0]",
                 "MRESULT[47:0]",
                 "BWD[1:0]",
                 "FL" ] in
    let outs = [ "FP_OUT[31:0]",
                 "I_OUT[31:0]",
                 "TT_SP[4:0]",
                 "SP_CMP[2:0]",
                 "SP_MUX",
                 "LD_FSR",
                 "UP_SP" ] in
    let ints = [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "addout[36:0]",
                 "car_ry",
                 "fpout[36:0]",
                 "inexact",
                 "mulout[36:0]",
                 "nan",
                 "nan_1",
                 "nan_2",
                 "nzexp[1:0]",
                 "op_cmp",
                 "overflow",
                 "rund[32:0]",
                 "select[3:0]",
                 "tt[2:0]",
                 "underflow" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        SFPU_ADDSUB [("instance", "IADDSUB"), ("src", "SP_FPU.v:444")] [
                ("BCLK",["BCLK"]),
                ("BWD[1:0]",["BWD[1:0]"]),
                ("CMPRES[1:0]",["SP_CMP[1:0]"]),
                ("IOUT[31:0]",["I_OUT[31:0]"]),
                ("NZEXP[1:0]",["nzexp[1:0]"]),
                ("OUT[36:0]",["addout[36:0]"]),
                ("SELECT[3:0]",["OPCODE[2:1]", "select[1:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"])],
        SFPU_MUL [("instance", "IMUL"), ("src", "SP_FPU.v:448")] [
                ("BCLK",["BCLK"]),
                ("MRESULT[47:0]",["MRESULT[47:0]"]),
                ("NZEXP[1:0]",["nzexp[1:0]"]),
                ("OUT[36:0]",["mulout[36:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"])],
        _dff 1 "SP_FPU.v:441" ["nan"] ["BCLK"] ["TmP_1"],
        _dff 1 "SP_FPU.v:431" ["UP_SP"] ["BCLK"] ["TmP_0"],
        _pmux 3 4 "SP_FPU.v:471" ["tt[2:0]"] ["0b000"] ["0b101010001110"] ["nan", "TmP_40", "TmP_39", "TmP_38"],
        _eq 7 "SP_FPU.v:471" ["TmP_38"] ["nan", "op_cmp", "overflow", "FSR[0]", "underflow", "FSR[2]", "inexact"] ["0b0000011"] ,
        _eq 5 "SP_FPU.v:471" ["TmP_39"] ["nan", "op_cmp", "overflow", "FSR[0]", "underflow"] ["0b00011"] ,
        _eq 3 "SP_FPU.v:471" ["TmP_40"] ["nan", "op_cmp", "overflow"] ["0b001"] ,
        _pmux 1 3 "SP_FPU.v:455" ["car_ry"] ["0b0"] ["TmP_34", "TmP_9", "TmP_10"] ["TmP_43", "TmP_42", "TmP_41"],
        _eq 2 "SP_FPU.v:455" ["TmP_41"] ["FSR[5:4]"] ["0b11"] ,
        _eq 2 "SP_FPU.v:455" ["TmP_42"] ["FSR[5:4]"] ["0b10"] ,
        _logic_not 2 "SP_FPU.v:455" ["TmP_43"] ["FSR[5:4]"],
        _pmux 4 5 "SP_FPU.v:416" ["select[3:0]"] ["0b0000"] ["0b10001010101110011100"] ["TmP_50", "TmP_48", "TmP_12", "TmP_11", "TmP_44"],
        _eq 8 "SP_FPU.v:416" ["TmP_44"] ["OPCODE[7:0]"] ["0b10111100"] ,
        _eq 8 "SP_FPU.v:416" ["TmP_15"] ["OPCODE[7:0]"] ["0b10110010"] ,
        _eq 7 "SP_FPU.v:416" ["TmP_45"] ["OPCODE[7:1]"] ["0b1001111"] ,
        _eq 7 "SP_FPU.v:416" ["TmP_46"] ["OPCODE[7:1]"] ["0b1001101"] ,
        _eq 7 "SP_FPU.v:416" ["TmP_47"] ["OPCODE[7:1]"] ["0b1001100"] ,
        _eq 7 "SP_FPU.v:416" ["TmP_48"] ["OPCODE[7:1]"] ["0b1001000"] ,
        _eq 8 "SP_FPU.v:416" ["TmP_49"] ["OPCODE[7:0]"] ["0b10110100"] ,
        _eq 8 "SP_FPU.v:416" ["TmP_50"] ["OPCODE[7:0]"] ["0b10110000"] ,
        _mux 1 "SP_FPU.v:441" ["TmP_1"] ["TmP_6"] ["nan_1"] ["TmP_18"],
        _mux 37 "SP_FPU.v:452" ["fpout[36:0]"] ["addout[36:0]"] ["mulout[36:0]"] ["TmP_7"],
        _mux 32 "SP_FPU.v:483" ["FP_OUT[31:0]"] ["fpout[35]", "rund[30:0]"] ["0b00000000000000000000000000000000"] ["TmP_37"],
        _add 33 "SP_FPU.v:462" ["rund[32:0]"] ["fpout[34:2]"] ["0b00000000000000000000000000000000", "car_ry"] ,
        _and 1 "SP_FPU.v:428" ["TmP_2"] ["select[3]"] ["TmP_23"] ,
        _and 1 "SP_FPU.v:428" ["SP_MUX"] ["TmP_2"] ["FL"] ,
        _and 1 "SP_FPU.v:430" ["LD_FSR"] ["TmP_13"] ["TmP_14"] ,
        _and 1 "SP_FPU.v:431" ["TmP_3"] ["select[3]"] ["FL"] ,
        _and 1 "SP_FPU.v:431" ["TmP_0"] ["TmP_3"] ["START"] ,
        _and 1 "SP_FPU.v:432" ["op_cmp"] ["TmP_15"] ["FL"] ,
        _and 1 "SP_FPU.v:438" ["TmP_4"] ["TmP_26"] ["TmP_24"] ,
        _and 1 "SP_FPU.v:439" ["TmP_5"] ["TmP_27"] ["TmP_25"] ,
        _and 1 "SP_FPU.v:441" ["TmP_6"] ["TmP_28"] ["TmP_33"] ,
        _and 1 "SP_FPU.v:452" ["TmP_7"] ["OPCODE[5]"] ["OPCODE[3]"] ,
        _and 1 "SP_FPU.v:456" ["TmP_8"] ["TmP_19"] ["fpout[2]"] ,
        _and 1 "SP_FPU.v:457" ["TmP_9"] ["TmP_29"] ["inexact"] ,
        _and 1 "SP_FPU.v:458" ["TmP_10"] ["fpout[35]"] ["inexact"] ,
        _and 1 "SP_FPU.v:465" ["overflow"] ["TmP_30"] ["TmP_35"] ,
        _and 1 "SP_FPU.v:466" ["underflow"] ["TmP_36"] ["TmP_31"] ,
        _and 1 "SP_FPU.v:479" ["TT_SP[3]"] ["underflow"] ["TmP_32"] ,
        _and 1 "SP_FPU.v:479" ["TT_SP[4]"] ["inexact"] ["TmP_32"] ,
        _logic_reduce_or 2 "" ["TmP_11"] ["TmP_15", "TmP_49"],
        _logic_reduce_or 3 "" ["TmP_12"] ["TmP_47", "TmP_46", "TmP_45"],
        _eq 4 "SP_FPU.v:430" ["TmP_13"] ["OPCODE[7:4]"] ["0b1001"] ,
        _eq 3 "SP_FPU.v:430" ["TmP_14"] ["OPCODE[3:1]"] ["0b001"] ,
        _eq 8 "SP_FPU.v:438" ["TmP_16"] ["SRC2[30:23]"] ["0b11111111"] ,
        _eq 8 "SP_FPU.v:439" ["TmP_17"] ["SRC1[30:23]"] ["0b11111111"] ,
        _eq 2 "SP_FPU.v:441" ["TmP_18"] ["select[1:0]"] ["0b11"] ,
        _eq 2 "SP_FPU.v:456" ["TmP_19"] ["fpout[1:0]"] ["0b10"] ,
        _eq 2 "SP_FPU.v:456" ["TmP_20"] ["fpout[1:0]"] ["0b11"] ,
        _eq 8 "SP_FPU.v:465" ["TmP_21"] ["rund[30:23]"] ["0b11111111"] ,
        _logic_not 9 "SP_FPU.v:466" ["TmP_22"] ["rund[31:23]"],
        _ne 2 "SP_FPU.v:428" ["TmP_23"] ["select[1:0]"] ["0b11"] ,
        _logic_reduce_bool 8 "SP_FPU.v:436" ["nzexp[1]"] ["SRC2[30:23]"],
        _logic_reduce_bool 8 "SP_FPU.v:437" ["nzexp[0]"] ["SRC1[30:23]"],
        _logic_reduce_bool 23 "SP_FPU.v:438" ["TmP_24"] ["SRC2[22:0]"],
        _logic_reduce_bool 23 "SP_FPU.v:439" ["TmP_25"] ["SRC1[22:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:467" ["inexact"] ["fpout[1:0]"],
        _not 1 "SP_FPU.v:438" ["TmP_26"] ["nzexp[1]"],
        _not 1 "SP_FPU.v:439" ["TmP_27"] ["nzexp[0]"],
        _not 1 "SP_FPU.v:441" ["TmP_28"] ["select[1]"],
        _not 1 "SP_FPU.v:457" ["TmP_29"] ["fpout[35]"],
        _not 1 "SP_FPU.v:465" ["TmP_30"] ["rund[32]"],
        _not 1 "SP_FPU.v:466" ["TmP_31"] ["fpout[36]"],
        _not 1 "SP_FPU.v:479" ["TmP_32"] ["op_cmp"],
        _or 1 "SP_FPU.v:438" ["nan_2"] ["TmP_16"] ["TmP_4"] ,
        _or 1 "SP_FPU.v:439" ["nan_1"] ["TmP_17"] ["TmP_5"] ,
        _or 1 "SP_FPU.v:441" ["TmP_33"] ["nan_2"] ["nan_1"] ,
        _or 1 "SP_FPU.v:456" ["TmP_34"] ["TmP_8"] ["TmP_20"] ,
        _or 1 "SP_FPU.v:465" ["TmP_35"] ["rund[31]"] ["TmP_21"] ,
        _or 1 "SP_FPU.v:466" ["TmP_36"] ["rund[32]"] ["TmP_22"] ,
        _or 1 "SP_FPU.v:483" ["TmP_37"] ["underflow"] ["fpout[36]"] ,
        _buf 1 "" ["SP_CMP[2]"] ["nan"],
        _buf 3 "" ["TT_SP[2:0]"] ["tt[2:0]"]
    ] in
    PINST "SP_FPU" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;

let p = SP_FPU [] [];

p fseq 1;

let ckt = pexlif2fsm p;
ckt;

let vis = STE_debug ckt;
vis;

printf "----- DO: draw i42/brshiftb*\n";
