//-------------------------------------------------------------------
// Copyright 2020 Carl-Johan Seger
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

load "bool_arithm.fl";

// Pick the prime number to use
let p = 1009;

// Add one bit to allow positive and negative numbers.
let SZ = (bits_needed p)+1;

let DSZ = 2*SZ+1;

// Pick an example p
let pv = int2fbv DSZ p;

let as = md_expand_vector (sprintf "a[%d:0]" (SZ-1));
let bs = md_expand_vector (sprintf "b[%d:0]" (SZ-1));

var_order (interleave [as,bs]);
update_vossrc "DYNAMIC-ORDERING" "NO";

let av = ZX DSZ (map variable as);
let bv = ZX DSZ (map variable bs);

let mres = ZX DSZ (fbvmult av bv);
time (bdd_size mres);

let spec = fbvmod mres pv;

time (bdd_size spec);

