load "ste.fl";

forward_declare {ADDR_UNIT::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {ADDSUB::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {BCDADDER::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {BITMASK::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {CA_MATCH::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {CONFIG_REGS::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DATENPFAD::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DCACHE::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DCACHE_SM::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DCA_CONTROL::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DEBUG_AE::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DECODER::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DFPU_ADDSUB::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DFPU_BCD::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DFPU_DIV::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DFPU_MISC::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DFPU_MUL::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DIVI_PREP::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DMUX::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DP_FPU::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {DP_LOGIK::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {FFS_LOGIK::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {FILTCMP::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {FP_STAT_REG::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {GRUPPE_2::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {ICACHE::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {ICACHE_SM::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {ILL_UNDEF::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {IO_SWITCH::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {I_PFAD::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {KOLDETECT::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {MAKE_STAT::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {MMU_MATCH::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {MMU_UP::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {MULFILTER::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {NEU_VALID::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {OPDEC_REG::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {PREPDATA::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {PROG_COUNTER::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {RD_ALIGNER::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {REGISTER::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {REG_LIST::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SCANDIG::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SCHALE::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SFPU_ADDSUB::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SFPU_MUL::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SHIFTER::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {SP_FPU::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {STEUERUNG::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {WRPORT::((string#string) list) -> ((string#(string list)) list) -> pexlif};
forward_declare {WR_ALIGNER::((string#string) list) -> ((string#(string list)) list) -> pexlif};

let ADDR_UNIT {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "READ",
                 "WRITE",
                 "LDEA",
                 "NEWACC",
                 "CLRMSW",
                 "POST",
                 "DISP_OK",
                 "FULLACC",
                 "SRC2SEL[1:0]",
                 "INDEX[3:0]",
                 "ASIZE[1:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "BWD[1:0]",
                 "DISP[31:0]",
                 "PC_ARCHI[31:0]",
                 "PC_ICACHE[31:0]",
                 "IO_READY",
                 "ACC_STAT[5:0]",
                 "MMU_UPDATE[1:0]",
                 "IC_TEX[2:0]",
                 "ABO_STAT[1:0]",
                 "ADIVAR",
                 "RWVAL_1",
                 "OP_RMW",
                 "PHASE_17",
                 "NO_TRAP",
                 "FPU_TRAP" ] in
    let outs = [ "READ_OUT",
                 "WRITE_OUT",
                 "ZTEST",
                 "RMW",
                 "VADR[31:0]",
                 "ADDR[31:0]",
                 "SIZE[1:0]",
                 "PACKET[3:0]",
                 "ACC_DONE",
                 "ABORT",
                 "CTRL_QW[1:0]",
                 "BITSEL[2:0]",
                 "QWATWO" ] in
    let ints = md_extract_vectors [ "TmP_0[2:0]",
                 "TmP_1[3:0]",
                 "TmP_10",
                 "TmP_100",
                 "TmP_101",
                 "TmP_102",
                 "TmP_103",
                 "TmP_104",
                 "TmP_105",
                 "TmP_106",
                 "TmP_107",
                 "TmP_108",
                 "TmP_109",
                 "TmP_11",
                 "TmP_110",
                 "TmP_111",
                 "TmP_112",
                 "TmP_113",
                 "TmP_114",
                 "TmP_115",
                 "TmP_116",
                 "TmP_117",
                 "TmP_118",
                 "TmP_119",
                 "TmP_12",
                 "TmP_120",
                 "TmP_121",
                 "TmP_122",
                 "TmP_123",
                 "TmP_124",
                 "TmP_125",
                 "TmP_126",
                 "TmP_127",
                 "TmP_128",
                 "TmP_129",
                 "TmP_13",
                 "TmP_130",
                 "TmP_131",
                 "TmP_132",
                 "TmP_133",
                 "TmP_134",
                 "TmP_135",
                 "TmP_136",
                 "TmP_137",
                 "TmP_138",
                 "TmP_139",
                 "TmP_14",
                 "TmP_140",
                 "TmP_141",
                 "TmP_142",
                 "TmP_143",
                 "TmP_144",
                 "TmP_145[3:0]",
                 "TmP_146[31:0]",
                 "TmP_147[31:0]",
                 "TmP_148",
                 "TmP_149",
                 "TmP_15[19:0]",
                 "TmP_150[31:0]",
                 "TmP_151",
                 "TmP_152",
                 "TmP_153",
                 "TmP_154",
                 "TmP_155",
                 "TmP_156",
                 "TmP_157",
                 "TmP_158",
                 "TmP_159",
                 "TmP_16",
                 "TmP_160",
                 "TmP_161",
                 "TmP_162",
                 "TmP_163",
                 "TmP_164",
                 "TmP_165",
                 "TmP_166",
                 "TmP_167",
                 "TmP_168",
                 "TmP_169",
                 "TmP_17",
                 "TmP_170",
                 "TmP_171",
                 "TmP_172",
                 "TmP_173",
                 "TmP_174[1:0]",
                 "TmP_175[15:0]",
                 "TmP_176[31:0]",
                 "TmP_177[31:0]",
                 "TmP_178",
                 "TmP_179[31:0]",
                 "TmP_18",
                 "TmP_180",
                 "TmP_181",
                 "TmP_182",
                 "TmP_183",
                 "TmP_184",
                 "TmP_185",
                 "TmP_19[1:0]",
                 "TmP_2",
                 "TmP_20[2:0]",
                 "TmP_21[31:0]",
                 "TmP_22",
                 "TmP_23[31:0]",
                 "TmP_24[31:0]",
                 "TmP_25[3:0]",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5[1:0]",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75",
                 "TmP_76",
                 "TmP_77",
                 "TmP_78",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82",
                 "TmP_83",
                 "TmP_84",
                 "TmP_85",
                 "TmP_86",
                 "TmP_87",
                 "TmP_88",
                 "TmP_89",
                 "TmP_9[31:0]",
                 "TmP_90",
                 "TmP_91",
                 "TmP_92",
                 "TmP_93",
                 "TmP_94",
                 "TmP_95",
                 "TmP_96",
                 "TmP_97",
                 "TmP_98",
                 "TmP_99",
                 "acc_ende",
                 "acc_err",
                 "acc_ok",
                 "acc_pass",
                 "acc_run",
                 "acc_step",
                 "all_ok",
                 "ca_hit",
                 "do_wr",
                 "ea_ok",
                 "ea_reg[31:0]",
                 "fa_out",
                 "final_addr[31:0]",
                 "frueh_ok",
                 "icache_adr[31:0]",
                 "inc_pack[1:0]",
                 "index_sel[3:0]",
                 "index_val[31:0]",
                 "init_acc",
                 "io_acc",
                 "io_rdy",
                 "irdy_flag",
                 "ld_ea_i",
                 "ld_ea_reg",
                 "next_reg",
                 "next_vadr[31:0]",
                 "no_done",
                 "pg_addr[31:0]",
                 "pg_areg[19:0]",
                 "pg_op",
                 "pg_test",
                 "qw_align",
                 "qwa_flag",
                 "reg_adder[31:0]",
                 "reg_out_i",
                 "sign_ext_src1[31:0]",
                 "source2[31:0]",
                 "tex_feld[1:0]",
                 "tos_offset[31:0]",
                 "u_ddt[2:0]",
                 "vadr_reg[31:0]",
                 "write_reg" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 32 "ADDR_UNIT.v:173" ["reg_adder[31:0]"] ["source2[31:0]"] ["index_val[31:0]"] ,
        _add 32 "ADDR_UNIT.v:175" ["final_addr[31:0]"] ["reg_adder[31:0]"] ["DISP[31:0]"] ,
        _add 32 "ADDR_UNIT.v:210" ["TmP_23[31:0]"] ["source2[31:0]"] ["tos_offset[31:0]"] ,
        _add 32 "ADDR_UNIT.v:236" ["TmP_24[31:0]"] ["vadr_reg[31:2]", "0b00"] ["0b00000000000000000000000000000100"] ,
        _add 32 "ADDR_UNIT.v:239" ["pg_addr[31:0]"] ["final_addr[31:0]"] ["0b00000000000000000000000000000", "TmP_31", "ASIZE[1]", "TmP_121"] ,
        _add 4 "ADDR_UNIT.v:292" ["TmP_25[3:0]"] ["PACKET[3:0]"] ["inc_pack[1:0]", "0b00"] ,
        _and 1 "ADDR_UNIT.v:135" ["acc_ok"] ["ACC_STAT[0]"] ["TmP_91"] ,
        _and 1 "ADDR_UNIT.v:136" ["acc_pass"] ["ACC_STAT[0]"] ["ZTEST"] ,
        _and 1 "ADDR_UNIT.v:193" ["TmP_12"] ["TmP_115"] ["TmP_93"] ,
        _and 1 "ADDR_UNIT.v:195" ["ld_ea_i"] ["TmP_115"] ["DISP_OK"] ,
        _and 1 "ADDR_UNIT.v:197" ["TmP_26"] ["TmP_118"] ["TmP_94"] ,
        _and 1 "ADDR_UNIT.v:197" ["ea_ok"] ["TmP_26"] ["DISP_OK"] ,
        _and 1 "ADDR_UNIT.v:218" ["TmP_27"] ["NEWACC"] ["acc_ende"] ,
        _and 1 "ADDR_UNIT.v:218" ["TmP_28"] ["TmP_119"] ["DISP_OK"] ,
        _and 1 "ADDR_UNIT.v:218" ["TmP_29"] ["TmP_28"] ["TmP_116"] ,
        _and 1 "ADDR_UNIT.v:218" ["TmP_30"] ["TmP_29"] ["TmP_96"] ,
        _and 1 "ADDR_UNIT.v:218" ["init_acc"] ["TmP_30"] ["NO_TRAP"] ,
        _and 1 "ADDR_UNIT.v:239" ["TmP_31"] ["ASIZE[1]"] ["ASIZE[0]"] ,
        _and 1 "ADDR_UNIT.v:241" ["pg_test"] ["TmP_88"] ["TmP_97"] ,
        _and 1 "ADDR_UNIT.v:246" ["TmP_33"] ["TmP_32"] ["pg_test"] ,
        _and 1 "ADDR_UNIT.v:246" ["TmP_34"] ["pg_op"] ["TmP_99"] ,
        _and 1 "ADDR_UNIT.v:246" ["TmP_35"] ["TmP_34"] ["TmP_100"] ,
        _and 1 "ADDR_UNIT.v:248" ["TmP_36"] ["pg_op"] ["ZTEST"] ,
        _and 1 "ADDR_UNIT.v:248" ["TmP_8"] ["TmP_36"] ["acc_pass"] ,
        _and 1 "ADDR_UNIT.v:253" ["TmP_37"] ["READ"] ["TmP_98"] ,
        _and 1 "ADDR_UNIT.v:253" ["TmP_38"] ["READ_OUT"] ["TmP_101"] ,
        _and 1 "ADDR_UNIT.v:253" ["TmP_39"] ["TmP_38"] ["TmP_100"] ,
        _and 1 "ADDR_UNIT.v:258" ["TmP_32"] ["WRITE"] ["TmP_98"] ,
        _and 1 "ADDR_UNIT.v:258" ["TmP_40"] ["TmP_32"] ["TmP_102"] ,
        _and 1 "ADDR_UNIT.v:258" ["TmP_41"] ["write_reg"] ["TmP_101"] ,
        _and 1 "ADDR_UNIT.v:258" ["TmP_42"] ["TmP_41"] ["TmP_100"] ,
        _and 1 "ADDR_UNIT.v:258" ["TmP_43"] ["TmP_42"] ["TmP_103"] ,
        _and 1 "ADDR_UNIT.v:260" ["WRITE_OUT"] ["write_reg"] ["TmP_103"] ,
        _and 1 "ADDR_UNIT.v:266" ["TmP_44"] ["TmP_99"] ["TmP_100"] ,
        _and 1 "ADDR_UNIT.v:266" ["TmP_45"] ["ZTEST"] ["TmP_101"] ,
        _and 1 "ADDR_UNIT.v:266" ["TmP_46"] ["TmP_45"] ["TmP_100"] ,
        _and 1 "ADDR_UNIT.v:271" ["TmP_47"] ["OP_RMW"] ["PHASE_17"] ,
        _and 1 "ADDR_UNIT.v:271" ["TmP_48"] ["RMW"] ["TmP_101"] ,
        _and 1 "ADDR_UNIT.v:271" ["TmP_49"] ["TmP_48"] ["TmP_100"] ,
        _and 1 "ADDR_UNIT.v:274" ["TmP_50"] ["TmP_80"] ["READ"] ,
        _and 1 "ADDR_UNIT.v:274" ["qw_align"] ["TmP_50"] ["TmP_81"] ,
        _and 1 "ADDR_UNIT.v:281" ["TmP_51"] ["acc_run"] ["TmP_101"] ,
        _and 1 "ADDR_UNIT.v:281" ["TmP_52"] ["TmP_51"] ["TmP_100"] ,
        _and 1 "ADDR_UNIT.v:281" ["TmP_53"] ["TmP_52"] ["TmP_103"] ,
        _and 1 "ADDR_UNIT.v:285" ["TmP_54"] ["SIZE[1]"] ["SIZE[0]"] ,
        _and 1 "ADDR_UNIT.v:313" ["TmP_55"] ["TmP_83"] ["TmP_89"] ,
        _and 1 "ADDR_UNIT.v:333" ["TmP_57"] ["TmP_56"] ["ACC_STAT[5]"] ,
        _and 1 "ADDR_UNIT.v:333" ["TmP_58"] ["acc_ok"] ["TmP_183"] ,
        _and 1 "ADDR_UNIT.v:342" ["TmP_59"] ["TmP_101"] ["acc_step"] ,
        _and 1 "ADDR_UNIT.v:342" ["TmP_60"] ["acc_run"] ["acc_ende"] ,
        _and 1 "ADDR_UNIT.v:342" ["TmP_61"] ["no_done"] ["TmP_109"] ,
        _and 1 "ADDR_UNIT.v:345" ["TmP_62"] ["acc_step"] ["TmP_110"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_63"] ["acc_run"] ["acc_ok"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_64"] ["TmP_63"] ["qwa_flag"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_65"] ["TmP_64"] ["TmP_107"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_66"] ["TmP_65"] ["ACC_STAT[5]"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_67"] ["TmP_66"] ["TmP_108"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_68"] ["TmP_67"] ["TmP_84"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_69"] ["TmP_68"] ["READ_OUT"] ,
        _and 1 "ADDR_UNIT.v:348" ["TmP_2"] ["TmP_69"] ["TmP_110"] ,
        _and 1 "ADDR_UNIT.v:350" ["TmP_70"] ["TmP_111"] ["BRESET"] ,
        _and 1 "ADDR_UNIT.v:350" ["TmP_56"] ["qwa_flag"] ["TmP_107"] ,
        _and 1 "ADDR_UNIT.v:350" ["TmP_71"] ["TmP_56"] ["TmP_112"] ,
        _and 1 "ADDR_UNIT.v:350" ["TmP_72"] ["TmP_71"] ["acc_ok"] ,
        _and 1 "ADDR_UNIT.v:350" ["TmP_18"] ["TmP_70"] ["TmP_124"] ,
        _and 1 "ADDR_UNIT.v:352" ["TmP_73"] ["READ_OUT"] ["ACC_STAT[4]"] ,
        _and 1 "ADDR_UNIT.v:352" ["TmP_74"] ["irdy_flag"] ["TmP_113"] ,
        _and 1 "ADDR_UNIT.v:353" ["TmP_10"] ["IO_READY"] ["irdy_flag"] ,
        _and 1 "ADDR_UNIT.v:355" ["TmP_75"] ["acc_step"] ["TmP_184"] ,
        _and 1 "ADDR_UNIT.v:355" ["TmP_13"] ["TmP_75"] ["TmP_84"] ,
        _logic_reduce_or 7 "" ["TmP_76"] ["TmP_144", "TmP_143", "TmP_142", "TmP_141", "TmP_140", "TmP_139", "TmP_136"],
        _logic_reduce_or 2 "" ["TmP_77"] ["TmP_138", "TmP_137"],
        _logic_reduce_or 11 "" ["TmP_78"] ["TmP_136", "TmP_135", "TmP_134", "TmP_133", "TmP_132", "TmP_131", "TmP_130", "TmP_129", "TmP_128", "TmP_126", "TmP_125"],
        _logic_not 3 "ADDR_UNIT.v:274" ["TmP_80"] ["final_addr[2:0]"],
        _eq 2 "ADDR_UNIT.v:274" ["TmP_81"] ["ASIZE[1:0]"] ["0b11"] ,
        _eq 2 "ADDR_UNIT.v:313" ["TmP_83"] ["PACKET[3:2]"] ["0b01"] ,
        _logic_not 2 "ADDR_UNIT.v:317" ["TmP_82"] ["PACKET[1:0]"],
        _land 1 "ADDR_UNIT.v:177" ["TmP_85"] ["LDEA"] ["TmP_79"],
        _land 1 "ADDR_UNIT.v:232" ["TmP_86"] ["pg_op"] ["ZTEST"],
        _land 1 "ADDR_UNIT.v:232" ["TmP_87"] ["TmP_86"] ["acc_err"],
        _ne 1 "ADDR_UNIT.v:241" ["TmP_88"] ["final_addr[12]"] ["pg_addr[12]"] ,
        _ne 2 "ADDR_UNIT.v:313" ["TmP_89"] ["vadr_reg[3:2]"] ["0b11"] ,
        _ne 2 "ADDR_UNIT.v:317" ["TmP_90"] ["PACKET[1:0]"] ["0b11"] ,
        _not 1 "ADDR_UNIT.v:135" ["TmP_91"] ["pg_op"],
        _not 1 "ADDR_UNIT.v:140" ["TmP_92"] ["ACC_STAT[2]"],
        _not 1 "ADDR_UNIT.v:193" ["TmP_93"] ["DISP_OK"],
        _not 1 "ADDR_UNIT.v:197" ["TmP_94"] ["FULLACC"],
        _not 1 "ADDR_UNIT.v:218" ["TmP_95"] ["acc_run"],
        _not 1 "ADDR_UNIT.v:218" ["TmP_96"] ["ABORT"],
        _not 1 "ADDR_UNIT.v:241" ["TmP_97"] ["OP_RMW"],
        _not 1 "ADDR_UNIT.v:258" ["TmP_98"] ["RWVAL_1"],
        _not 1 "ADDR_UNIT.v:258" ["TmP_102"] ["pg_test"],
        _not 1 "ADDR_UNIT.v:266" ["TmP_104"] ["ZTEST"],
        _not 1 "ADDR_UNIT.v:266" ["TmP_99"] ["acc_pass"],
        _not 1 "ADDR_UNIT.v:281" ["TmP_100"] ["acc_err"],
        _not 1 "ADDR_UNIT.v:281" ["TmP_103"] ["FPU_TRAP"],
        _not 1 "ADDR_UNIT.v:313" ["TmP_105"] ["vadr_reg[3]"],
        _not 1 "ADDR_UNIT.v:313" ["TmP_106"] ["vadr_reg[2]"],
        _not 1 "ADDR_UNIT.v:342" ["TmP_101"] ["acc_ende"],
        _not 1 "ADDR_UNIT.v:342" ["TmP_109"] ["TmP_60"],
        _not 1 "ADDR_UNIT.v:348" ["TmP_108"] ["PACKET[3]"],
        _not 1 "ADDR_UNIT.v:348" ["TmP_110"] ["no_done"],
        _not 1 "ADDR_UNIT.v:350" ["TmP_111"] ["acc_step"],
        _not 1 "ADDR_UNIT.v:350" ["TmP_107"] ["io_rdy"],
        _not 1 "ADDR_UNIT.v:350" ["TmP_112"] ["ACC_STAT[5]"],
        _not 1 "ADDR_UNIT.v:352" ["TmP_113"] ["IO_READY"],
        _or 1 "ADDR_UNIT.v:134" ["acc_err"] ["ACC_STAT[3]"] ["ACC_STAT[1]"] ,
        _or 1 "ADDR_UNIT.v:141" ["TmP_114"] ["WRITE_OUT"] ["ZTEST"] ,
        _or 1 "ADDR_UNIT.v:195" ["TmP_115"] ["LDEA"] ["ld_ea_reg"] ,
        _or 1 "ADDR_UNIT.v:197" ["TmP_117"] ["TmP_116"] ["LDEA"] ,
        _or 1 "ADDR_UNIT.v:197" ["TmP_118"] ["TmP_117"] ["ld_ea_reg"] ,
        _or 1 "ADDR_UNIT.v:218" ["TmP_119"] ["TmP_178"] ["TmP_95"] ,
        _or 1 "ADDR_UNIT.v:218" ["TmP_116"] ["READ"] ["WRITE"] ,
        _or 1 "ADDR_UNIT.v:220" ["fa_out"] ["init_acc"] ["ADIVAR"] ,
        _or 1 "ADDR_UNIT.v:230" ["TmP_120"] ["final_addr[2]"] ["qw_align"] ,
        _or 1 "ADDR_UNIT.v:239" ["TmP_121"] ["ASIZE[1]"] ["ASIZE[0]"] ,
        _or 1 "ADDR_UNIT.v:258" ["TmP_22"] ["TmP_180"] ["do_wr"] ,
        _or 1 "ADDR_UNIT.v:266" ["TmP_122"] ["TmP_104"] ["TmP_44"] ,
        _or 1 "ADDR_UNIT.v:281" ["TmP_7"] ["init_acc"] ["TmP_53"] ,
        _or 1 "ADDR_UNIT.v:313" ["TmP_123"] ["TmP_105"] ["TmP_106"] ,
        _or 1 "ADDR_UNIT.v:342" ["TmP_14"] ["TmP_59"] ["TmP_61"] ,
        _or 1 "ADDR_UNIT.v:350" ["TmP_124"] ["TmP_72"] ["reg_out_i"] ,
        _or 1 "ADDR_UNIT.v:352" ["TmP_11"] ["TmP_73"] ["TmP_74"] ,
        _or 1 "ADDR_UNIT.v:356" ["CTRL_QW[0]"] ["reg_out_i"] ["next_reg"] ,
        _dff 1 "ADDR_UNIT.v:355" ["next_reg"] ["BCLK"] ["TmP_13"],
        _dff 1 "ADDR_UNIT.v:353" ["io_rdy"] ["BCLK"] ["TmP_10"],
        _dff 1 "ADDR_UNIT.v:352" ["irdy_flag"] ["BCLK"] ["TmP_11"],
        _dff 1 "ADDR_UNIT.v:350" ["reg_out_i"] ["BCLK"] ["TmP_18"],
        _dff 1 "ADDR_UNIT.v:348" ["QWATWO"] ["BCLK"] ["TmP_2"],
        _adff 1 "ADDR_UNIT.v:340" ["no_done"] ["BRESET"] ["BCLK"] ["TmP_14"],
        _dff 4 "ADDR_UNIT.v:289" ["PACKET[3:0]"] ["BCLK"] ["TmP_1[3:0]"],
        _dff 2 "ADDR_UNIT.v:283" ["SIZE[1:0]"] ["BCLK"] ["TmP_5[1:0]"],
        _adff 1 "ADDR_UNIT.v:278" ["acc_run"] ["BRESET"] ["BCLK"] ["TmP_7"],
        _dff 1 "ADDR_UNIT.v:276" ["qwa_flag"] ["BCLK"] ["TmP_17"],
        _adff 1 "ADDR_UNIT.v:268" ["RMW"] ["BRESET"] ["BCLK"] ["TmP_4"],
        _adff 1 "ADDR_UNIT.v:263" ["ZTEST"] ["BRESET"] ["BCLK"] ["TmP_6"],
        _adff 1 "ADDR_UNIT.v:255" ["write_reg"] ["BRESET"] ["BCLK"] ["TmP_22"],
        _adff 1 "ADDR_UNIT.v:250" ["READ_OUT"] ["BRESET"] ["BCLK"] ["TmP_3"],
        _dff 1 "ADDR_UNIT.v:248" ["do_wr"] ["BCLK"] ["TmP_8"],
        _adff 1 "ADDR_UNIT.v:243" ["pg_op"] ["BRESET"] ["BCLK"] ["TmP_16"],
        _dff 20 "ADDR_UNIT.v:240" ["pg_areg[19:0]"] ["BCLK"] ["TmP_15[19:0]"],
        _dff 32 "ADDR_UNIT.v:229" ["vadr_reg[31:0]"] ["BCLK"] ["TmP_21[31:0]"],
        _dff 32 "ADDR_UNIT.v:202" ["ea_reg[31:0]"] ["BCLK"] ["TmP_9[31:0]"],
        _dff 32 "ADDR_UNIT.v:199" ["icache_adr[31:0]"] ["BCLK"] ["PC_ICACHE[31:0]"],
        _adff 1 "ADDR_UNIT.v:191" ["ld_ea_reg"] ["BRESET"] ["BCLK"] ["TmP_12"],
        _dff 3 "ADDR_UNIT.v:177" ["BITSEL[2:0]"] ["BCLK"] ["TmP_0[2:0]"],
        _dff 3 "ADDR_UNIT.v:141" ["u_ddt[2:0]"] ["BCLK"] ["TmP_20[2:0]"],
        _dff 2 "ADDR_UNIT.v:140" ["tex_feld[1:0]"] ["BCLK"] ["TmP_19[1:0]"],
        _dff 1 "ADDR_UNIT.v:138" ["ABORT"] ["BCLK"] ["acc_err"],
        _pmux 1 2 "ADDR_UNIT.v:335|ADDR_UNIT.v:320" ["acc_step"] ["0b0"] ["TmP_58", "acc_ok"] ["TmP_127", "TmP_78"],
        _eq 6 "ADDR_UNIT.v:335|ADDR_UNIT.v:320" ["TmP_125"] ["SIZE[1:0]", "READ_OUT", "frueh_ok", "PACKET[3]", "ACC_STAT[4]"] ["0b110100"] ,
        _eq 4 "ADDR_UNIT.v:334|ADDR_UNIT.v:320" ["TmP_126"] ["SIZE[1:0]", "READ_OUT", "PACKET[3]"] ["0b1101"] ,
        _eq 3 "ADDR_UNIT.v:333|ADDR_UNIT.v:320" ["TmP_127"] ["SIZE[1:0]", "READ_OUT"] ["0b111"] ,
        _eq 7 "ADDR_UNIT.v:331|ADDR_UNIT.v:320" ["TmP_128"] ["SIZE[1:0]", "READ_OUT", "frueh_ok", "PACKET[3]", "ACC_STAT[4]", "all_ok"] ["0b1001000"] ,
        _eq 5 "ADDR_UNIT.v:330|ADDR_UNIT.v:320" ["TmP_129"] ["SIZE[1:0]", "READ_OUT", "PACKET[3]", "all_ok"] ["0b10010"] ,
        _eq 5 "ADDR_UNIT.v:329|ADDR_UNIT.v:320" ["TmP_130"] ["SIZE[1:0]", "READ_OUT", "PACKET[3]", "all_ok"] ["0b10110"] ,
        _eq 3 "ADDR_UNIT.v:328|ADDR_UNIT.v:320" ["TmP_131"] ["SIZE[1:0]", "all_ok"] ["0b101"] ,
        _eq 7 "ADDR_UNIT.v:326|ADDR_UNIT.v:320" ["TmP_132"] ["SIZE[1:0]", "READ_OUT", "frueh_ok", "PACKET[3]", "ACC_STAT[4]", "all_ok"] ["0b0101000"] ,
        _eq 5 "ADDR_UNIT.v:325|ADDR_UNIT.v:320" ["TmP_133"] ["SIZE[1:0]", "READ_OUT", "PACKET[3]", "all_ok"] ["0b01010"] ,
        _eq 5 "ADDR_UNIT.v:324|ADDR_UNIT.v:320" ["TmP_134"] ["SIZE[1:0]", "READ_OUT", "PACKET[3]", "all_ok"] ["0b01110"] ,
        _eq 3 "ADDR_UNIT.v:323|ADDR_UNIT.v:320" ["TmP_135"] ["SIZE[1:0]", "all_ok"] ["0b011"] ,
        _pmux 1 2 "ADDR_UNIT.v:313|ADDR_UNIT.v:310" ["frueh_ok"] ["0b1"] ["TmP_89", "TmP_182"] ["TmP_77", "TmP_84"],
        _eq 2 "ADDR_UNIT.v:313|ADDR_UNIT.v:310" ["TmP_84"] ["SIZE[1:0]"] ["0b11"] ,
        _eq 2 "ADDR_UNIT.v:312|ADDR_UNIT.v:310" ["TmP_137"] ["SIZE[1:0]"] ["0b10"] ,
        _eq 2 "ADDR_UNIT.v:311|ADDR_UNIT.v:310" ["TmP_138"] ["SIZE[1:0]"] ["0b01"] ,
        _mux 1 "ADDR_UNIT.v:303|ADDR_UNIT.v:296" ["acc_ende"] ["0b0"] ["acc_ok"] ["TmP_76"],
        _eq 3 "ADDR_UNIT.v:303|ADDR_UNIT.v:296" ["TmP_139"] ["SIZE[1:0]", "PACKET[3]"] ["0b111"] ,
        _eq 3 "ADDR_UNIT.v:302|ADDR_UNIT.v:296" ["TmP_140"] ["SIZE[1:0]", "PACKET[3]"] ["0b101"] ,
        _eq 5 "ADDR_UNIT.v:301|ADDR_UNIT.v:296" ["TmP_141"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b10000"] ,
        _eq 3 "ADDR_UNIT.v:300|ADDR_UNIT.v:296" ["TmP_142"] ["SIZE[1:0]", "PACKET[3]"] ["0b011"] ,
        _eq 5 "ADDR_UNIT.v:299|ADDR_UNIT.v:296" ["TmP_143"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b01010"] ,
        _eq 4 "ADDR_UNIT.v:298|ADDR_UNIT.v:296" ["TmP_144"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1]"] ["0b0100"] ,
        _logic_not 2 "ADDR_UNIT.v:297|ADDR_UNIT.v:296" ["TmP_136"] ["SIZE[1:0]"],
        _mux 4 "ADDR_UNIT.v:292" ["TmP_145[3:0]"] ["PACKET[3:0]"] ["TmP_25[3:0]"] ["acc_ok"],
        _mux 4 "ADDR_UNIT.v:290" ["TmP_1[3:0]"] ["TmP_145[3:0]"] ["0b00", "final_addr[1:0]"] ["init_acc"],
        _mux 2 "ADDR_UNIT.v:283" ["TmP_5[1:0]"] ["SIZE[1:0]"] ["ASIZE[1:0]"] ["init_acc"],
        _mux 1 "ADDR_UNIT.v:276" ["TmP_17"] ["qwa_flag"] ["qw_align"] ["init_acc"],
        _mux 20 "ADDR_UNIT.v:240" ["TmP_15[19:0]"] ["pg_areg[19:0]"] ["pg_addr[31:12]"] ["init_acc"],
        _mux 32 "ADDR_UNIT.v:234" ["TmP_146[31:0]"] ["vadr_reg[31:0]"] ["next_vadr[31:0]"] ["acc_ok"],
        _mux 32 "ADDR_UNIT.v:232" ["TmP_147[31:0]"] ["TmP_146[31:0]"] ["pg_areg[19:0]", "0b000000000000"] ["TmP_87"],
        _mux 32 "ADDR_UNIT.v:230" ["TmP_21[31:0]"] ["TmP_147[31:0]"] ["final_addr[31:3]", "TmP_120", "final_addr[1:0]"] ["init_acc"],
        _pmux 32 3 "ADDR_UNIT.v:226|ADDR_UNIT.v:223" ["VADR[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["final_addr[31:3]", "TmP_120", "final_addr[1:0]", "TmP_179[31:0]", "next_vadr[31:0]"] ["fa_out", "TmP_149", "TmP_148"],
        _eq 2 "ADDR_UNIT.v:226|ADDR_UNIT.v:223" ["TmP_148"] ["fa_out", "acc_ok"] ["0b01"] ,
        _logic_not 2 "ADDR_UNIT.v:225|ADDR_UNIT.v:223" ["TmP_149"] ["fa_out", "acc_ok"],
        _pmux 32 4 "ADDR_UNIT.v:211|ADDR_UNIT.v:205" ["TmP_150[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["TmP_176[31:0]", "TmP_177[31:0]", "TmP_23[31:0]", "final_addr[31:0]"] ["TmP_154", "TmP_153", "TmP_152", "TmP_151"],
        _logic_not 2 "ADDR_UNIT.v:211|ADDR_UNIT.v:205" ["TmP_151"] ["MMU_UPDATE[1]", "POST"],
        _eq 2 "ADDR_UNIT.v:210|ADDR_UNIT.v:205" ["TmP_152"] ["MMU_UPDATE[1]", "POST"] ["0b01"] ,
        _eq 2 "ADDR_UNIT.v:207|ADDR_UNIT.v:205" ["TmP_153"] ["MMU_UPDATE[1]", "INDEX[0]"] ["0b11"] ,
        _eq 2 "ADDR_UNIT.v:206|ADDR_UNIT.v:205" ["TmP_154"] ["MMU_UPDATE[1]", "INDEX[0]"] ["0b10"] ,
        _mux 32 "ADDR_UNIT.v:203" ["TmP_9[31:0]"] ["ea_reg[31:0]"] ["TmP_150[31:0]"] ["ld_ea_i"],
        _pmux 32 8 "ADDR_UNIT.v:188|ADDR_UNIT.v:180" ["tos_offset[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["0b0000000000000000000000000000000100000000000000000000000000000010000000000000000000000000000001000000000000000000000000000000100011111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111110011111111111111111111111111111000"] ["TmP_162", "TmP_161", "TmP_160", "TmP_159", "TmP_158", "TmP_157", "TmP_156", "TmP_155"],
        _eq 3 "ADDR_UNIT.v:188|ADDR_UNIT.v:180" ["TmP_155"] ["INDEX[2:0]"] ["0b111"] ,
        _eq 3 "ADDR_UNIT.v:187|ADDR_UNIT.v:180" ["TmP_156"] ["INDEX[2:0]"] ["0b110"] ,
        _eq 3 "ADDR_UNIT.v:186|ADDR_UNIT.v:180" ["TmP_157"] ["INDEX[2:0]"] ["0b101"] ,
        _eq 3 "ADDR_UNIT.v:185|ADDR_UNIT.v:180" ["TmP_158"] ["INDEX[2:0]"] ["0b100"] ,
        _eq 3 "ADDR_UNIT.v:184|ADDR_UNIT.v:180" ["TmP_159"] ["INDEX[2:0]"] ["0b011"] ,
        _eq 3 "ADDR_UNIT.v:183|ADDR_UNIT.v:180" ["TmP_160"] ["INDEX[2:0]"] ["0b010"] ,
        _eq 3 "ADDR_UNIT.v:182|ADDR_UNIT.v:180" ["TmP_161"] ["INDEX[2:0]"] ["0b001"] ,
        _logic_not 3 "ADDR_UNIT.v:181|ADDR_UNIT.v:180" ["TmP_162"] ["INDEX[2:0]"],
        _mux 3 "ADDR_UNIT.v:177" ["TmP_0[2:0]"] ["BITSEL[2:0]"] ["SRC1[2:0]"] ["TmP_85"],
        _pmux 32 6 "ADDR_UNIT.v:169|ADDR_UNIT.v:163" ["index_val[31:0]"] ["0b00000000000000000000000000000000"] ["sign_ext_src1[31:0]", "sign_ext_src1[31]", "sign_ext_src1[31]", "sign_ext_src1[31]", "sign_ext_src1[31:3]", "SRC1[31:0]", "SRC1[30:0]", "0b0", "SRC1[29:0]", "0b00", "SRC1[28:0]", "0b000"] ["TmP_167", "TmP_79", "TmP_166", "TmP_165", "TmP_164", "TmP_163"],
        _eq 4 "ADDR_UNIT.v:169|ADDR_UNIT.v:163" ["TmP_163"] ["index_sel[3:0]"] ["0b0111"] ,
        _eq 4 "ADDR_UNIT.v:168|ADDR_UNIT.v:163" ["TmP_164"] ["index_sel[3:0]"] ["0b0110"] ,
        _eq 4 "ADDR_UNIT.v:167|ADDR_UNIT.v:163" ["TmP_165"] ["index_sel[3:0]"] ["0b0101"] ,
        _eq 4 "ADDR_UNIT.v:166|ADDR_UNIT.v:163" ["TmP_166"] ["index_sel[3:0]"] ["0b0100"] ,
        _eq 2 "ADDR_UNIT.v:165|ADDR_UNIT.v:163" ["TmP_79"] ["index_sel[3:2]"] ["0b11"] ,
        _eq 2 "ADDR_UNIT.v:164|ADDR_UNIT.v:163" ["TmP_167"] ["index_sel[3:2]"] ["0b10"] ,
        _pmux 32 2 "ADDR_UNIT.v:158|ADDR_UNIT.v:156" ["sign_ext_src1[31:0]"] ["SRC1[31:0]"] ["SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7:0]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15:0]"] ["TmP_169", "TmP_168"],
        _eq 2 "ADDR_UNIT.v:158|ADDR_UNIT.v:156" ["TmP_168"] ["BWD[1:0]"] ["0b01"] ,
        _logic_not 2 "ADDR_UNIT.v:157|ADDR_UNIT.v:156" ["TmP_169"] ["BWD[1:0]"],
        _pmux 32 4 "ADDR_UNIT.v:150|ADDR_UNIT.v:146" ["source2[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["TmP_175[15:0]", "SRC2[15:0]", "PC_ARCHI[31:0]", "0b00000000000000000000000000000000", "ea_reg[31:0]"] ["TmP_173", "TmP_172", "TmP_171", "TmP_170"],
        _eq 2 "ADDR_UNIT.v:150|ADDR_UNIT.v:146" ["TmP_170"] ["SRC2SEL[1:0]"] ["0b11"] ,
        _eq 2 "ADDR_UNIT.v:149|ADDR_UNIT.v:146" ["TmP_171"] ["SRC2SEL[1:0]"] ["0b10"] ,
        _eq 2 "ADDR_UNIT.v:148|ADDR_UNIT.v:146" ["TmP_172"] ["SRC2SEL[1:0]"] ["0b01"] ,
        _logic_not 2 "ADDR_UNIT.v:147|ADDR_UNIT.v:146" ["TmP_173"] ["SRC2SEL[1:0]"],
        _mux 3 "ADDR_UNIT.v:141" ["TmP_20[2:0]"] ["u_ddt[2:0]"] ["RMW", "ABO_STAT[1]", "TmP_114"] ["acc_err"],
        _mux 2 "ADDR_UNIT.v:140" ["TmP_19[1:0]"] ["tex_feld[1:0]"] ["TmP_174[1:0]"] ["acc_err"],
        _mux 2 "ADDR_UNIT.v:140" ["TmP_174[1:0]"] ["TmP_92", "ACC_STAT[2]"] ["0b11"] ["ACC_STAT[3]"],
        _mux 16 "ADDR_UNIT.v:147" ["TmP_175[15:0]"] ["SRC2[31:16]"] ["0b0000000000000000"] ["CLRMSW"],
        _mux 4 "ADDR_UNIT.v:153" ["index_sel[3:0]"] ["INDEX[3:0]"] ["0b0000"] ["POST"],
        _mux 32 "ADDR_UNIT.v:206" ["TmP_176[31:0]"] ["icache_adr[31:0]"] ["vadr_reg[31:0]"] ["MMU_UPDATE[0]"],
        _mux 32 "ADDR_UNIT.v:209" ["TmP_177[31:0]"] ["0b000000000000000000000000100", "IC_TEX[2]", "ABO_STAT[0]", "0b0", "IC_TEX[1:0]"] ["0b000000000000000000000000101", "u_ddt[2:0]", "tex_feld[1:0]"] ["MMU_UPDATE[0]"],
        _mux 1 "ADDR_UNIT.v:218" ["TmP_178"] ["acc_ende"] ["TmP_27"] ["FULLACC"],
        _mux 32 "ADDR_UNIT.v:225" ["TmP_179[31:0]"] ["vadr_reg[31:0]"] ["pg_areg[19:0]", "0b000000000000"] ["pg_op"],
        _mux 32 "ADDR_UNIT.v:236" ["next_vadr[31:0]"] ["TmP_24[31:0]"] ["vadr_reg[31:3]", "0b000"] ["qwa_flag"],
        _mux 1 "ADDR_UNIT.v:246" ["TmP_16"] ["TmP_35"] ["TmP_33"] ["init_acc"],
        _mux 1 "ADDR_UNIT.v:253" ["TmP_3"] ["TmP_39"] ["TmP_37"] ["init_acc"],
        _mux 1 "ADDR_UNIT.v:258" ["TmP_180"] ["TmP_43"] ["TmP_40"] ["init_acc"],
        _mux 1 "ADDR_UNIT.v:266" ["TmP_181"] ["TmP_46"] ["RWVAL_1"] ["init_acc"],
        _mux 1 "ADDR_UNIT.v:266" ["TmP_6"] ["TmP_181"] ["TmP_122"] ["pg_op"],
        _mux 1 "ADDR_UNIT.v:271" ["TmP_4"] ["TmP_49"] ["TmP_47"] ["init_acc"],
        _mux 2 "ADDR_UNIT.v:285" ["inc_pack[1:0]"] ["TmP_185", "TmP_54"] ["0b10"] ["TmP_82"],
        _mux 1 "ADDR_UNIT.v:313" ["TmP_182"] ["TmP_55"] ["TmP_123"] ["TmP_82"],
        _mux 1 "ADDR_UNIT.v:317" ["all_ok"] ["TmP_90"] ["TmP_82"] ["SIZE[1]"],
        _mux 1 "ADDR_UNIT.v:333" ["TmP_183"] ["PACKET[3]"] ["TmP_108"] ["TmP_57"],
        _mux 1 "ADDR_UNIT.v:345" ["ACC_DONE"] ["ea_ok"] ["TmP_62"] ["acc_run"],
        _mux 1 "ADDR_UNIT.v:355" ["TmP_184"] ["0b1"] ["io_rdy"] ["qwa_flag"],
        _xor 1 "ADDR_UNIT.v:285" ["TmP_185"] ["SIZE[1]"] ["SIZE[0]"] ,
        _buf 32 "ADDR_UNIT.v:74" ["ADDR[31:0]"] ["ea_reg[31:0]"],
        _buf 1 "" ["CTRL_QW[1]"] ["qwa_flag"],
        _buf 1 "ADDR_UNIT.v:112" ["ca_hit"] ["ACC_STAT[5]"],
        _buf 1 "ADDR_UNIT.v:110" ["io_acc"] ["ACC_STAT[4]"]
    ] in
    PINST "draw_hier ADDR_UNIT" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let ADDSUB {attrs::(string#string) list} conns =
    let inps = [ "dataa[35:0]",
                 "datab[35:0]",
                 "add_sub" ] in
    let outs = [ "result[35:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[35:0]",
                 "TmP_1[35:0]",
                 "TmP_2",
                 "TmP_3[35:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 36 "SP_FPU.v:57" ["TmP_0[35:0]"] ["dataa[35:0]"] ["TmP_3[35:0]"] ,
        _add 36 "SP_FPU.v:57" ["result[35:0]"] ["TmP_0[35:0]"] ["0b00000000000000000000000000000000000", "TmP_2"] ,
        _not 36 "SP_FPU.v:57" ["TmP_1[35:0]"] ["datab[35:0]"],
        _not 1 "SP_FPU.v:57" ["TmP_2"] ["add_sub"],
        _mux 36 "SP_FPU.v:57" ["TmP_3[35:0]"] ["TmP_1[35:0]"] ["datab[35:0]"] ["add_sub"]
    ] in
    PINST "draw_hier ADDSUB" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let BCDADDER {attrs::(string#string) list} conns =
    let inps = [ "A_IN[3:0]",
                 "B_IN[3:0]",
                 "CY_IN",
                 "SUBP" ] in
    let outs = [ "OUT[3:0]",
                 "CY_OUT" ] in
    let ints = md_extract_vectors [ "TmP_0[4:0]",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14[4:0]",
                 "TmP_15[3:0]",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "data[4:0]",
                 "over",
                 "result[4:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 5 "DP_FPU.v:127" ["TmP_0[4:0]"] ["0b0", "A_IN[3:0]"] ["TmP_14[4:0]"] ,
        _add 5 "DP_FPU.v:127" ["result[4:0]"] ["TmP_0[4:0]"] ["TmP_1", "TmP_1", "TmP_1", "TmP_1", "CY_IN"] ,
        _and 1 "DP_FPU.v:127" ["TmP_1"] ["SUBP"] ["CY_IN"] ,
        _and 1 "DP_FPU.v:129" ["TmP_2"] ["result[3]"] ["TmP_3"] ,
        _or 1 "DP_FPU.v:129" ["TmP_3"] ["result[2]"] ["result[1]"] ,
        _or 1 "DP_FPU.v:129" ["over"] ["result[4]"] ["TmP_2"] ,
        _pmux 5 10 "DP_FPU.v:123|DP_FPU.v:113" ["data[4:0]"] ["0bxxxxx"] ["0b00000111111111011101111001101111010110011100010111"] ["TmP_13", "TmP_12", "TmP_11", "TmP_10", "TmP_9", "TmP_8", "TmP_7", "TmP_6", "TmP_5", "TmP_4"],
        _eq 4 "DP_FPU.v:123|DP_FPU.v:113" ["TmP_4"] ["B_IN[3:0]"] ["0b1001"] ,
        _eq 4 "DP_FPU.v:122|DP_FPU.v:113" ["TmP_5"] ["B_IN[3:0]"] ["0b1000"] ,
        _eq 4 "DP_FPU.v:121|DP_FPU.v:113" ["TmP_6"] ["B_IN[3:0]"] ["0b0111"] ,
        _eq 4 "DP_FPU.v:120|DP_FPU.v:113" ["TmP_7"] ["B_IN[3:0]"] ["0b0110"] ,
        _eq 4 "DP_FPU.v:119|DP_FPU.v:113" ["TmP_8"] ["B_IN[3:0]"] ["0b0101"] ,
        _eq 4 "DP_FPU.v:118|DP_FPU.v:113" ["TmP_9"] ["B_IN[3:0]"] ["0b0100"] ,
        _eq 4 "DP_FPU.v:117|DP_FPU.v:113" ["TmP_10"] ["B_IN[3:0]"] ["0b0011"] ,
        _eq 4 "DP_FPU.v:116|DP_FPU.v:113" ["TmP_11"] ["B_IN[3:0]"] ["0b0010"] ,
        _eq 4 "DP_FPU.v:115|DP_FPU.v:113" ["TmP_12"] ["B_IN[3:0]"] ["0b0001"] ,
        _logic_not 4 "DP_FPU.v:114|DP_FPU.v:113" ["TmP_13"] ["B_IN[3:0]"],
        _sub 4 "DP_FPU.v:132" ["OUT[3:0]"] ["result[3:0]"] ["TmP_15[3:0]"] ,
        _mux 5 "DP_FPU.v:127" ["TmP_14[4:0]"] ["0b0", "B_IN[3:0]"] ["data[4:0]"] ["SUBP"],
        _mux 4 "DP_FPU.v:132" ["TmP_15[3:0]"] ["over", "0b0", "over", "0b0"] ["0b0", "result[4]", "result[4]", "0b0"] ["SUBP"],
        _mux 1 "DP_FPU.v:134" ["CY_OUT"] ["over"] ["result[4]"] ["SUBP"]
    ] in
    PINST "draw_hier BCDADDER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let BITMASK {attrs::(string#string) list} conns =
    let inps = [ "AA[6:0]" ] in
    let outs = [ "DOUT[31:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "code[4:0]",
                 "dec_bit[7:0]",
                 "high",
                 "low" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _logic_not 2 "I_PFAD.v:87" ["high"] ["AA[6:5]"],
        _pmux 32 4 "I_PFAD.v:107|I_PFAD.v:103" ["DOUT[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "dec_bit[7:0]", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "high", "dec_bit[7:0]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "high", "high", "high", "high", "high", "high", "high", "high", "dec_bit[7:0]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "dec_bit[7:0]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]"] ["TmP_3", "TmP_2", "TmP_1", "TmP_0"],
        _eq 2 "I_PFAD.v:107|I_PFAD.v:103" ["TmP_0"] ["code[4:3]"] ["0b11"] ,
        _eq 2 "I_PFAD.v:106|I_PFAD.v:103" ["TmP_1"] ["code[4:3]"] ["0b10"] ,
        _eq 2 "I_PFAD.v:105|I_PFAD.v:103" ["TmP_2"] ["code[4:3]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:104|I_PFAD.v:103" ["TmP_3"] ["code[4:3]"],
        _pmux 8 8 "I_PFAD.v:99|I_PFAD.v:91" ["dec_bit[7:0]"] ["0bxxxxxxxx"] ["high", "high", "high", "high", "high", "high", "high", "0b1", "high", "high", "high", "high", "high", "high", "0b1", "AA[6]", "high", "high", "high", "high", "high", "0b1", "AA[6]", "AA[6]", "high", "high", "high", "high", "0b1", "AA[6]", "AA[6]", "AA[6]", "high", "high", "high", "0b1", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "high", "high", "0b1", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "high", "0b1", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "0b1", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]", "AA[6]"] ["TmP_11", "TmP_10", "TmP_9", "TmP_8", "TmP_7", "TmP_6", "TmP_5", "TmP_4"],
        _eq 3 "I_PFAD.v:99|I_PFAD.v:91" ["TmP_4"] ["code[2:0]"] ["0b111"] ,
        _eq 3 "I_PFAD.v:98|I_PFAD.v:91" ["TmP_5"] ["code[2:0]"] ["0b110"] ,
        _eq 3 "I_PFAD.v:97|I_PFAD.v:91" ["TmP_6"] ["code[2:0]"] ["0b101"] ,
        _eq 3 "I_PFAD.v:96|I_PFAD.v:91" ["TmP_7"] ["code[2:0]"] ["0b100"] ,
        _eq 3 "I_PFAD.v:95|I_PFAD.v:91" ["TmP_8"] ["code[2:0]"] ["0b011"] ,
        _eq 3 "I_PFAD.v:94|I_PFAD.v:91" ["TmP_9"] ["code[2:0]"] ["0b010"] ,
        _eq 3 "I_PFAD.v:93|I_PFAD.v:91" ["TmP_10"] ["code[2:0]"] ["0b001"] ,
        _logic_not 3 "I_PFAD.v:92|I_PFAD.v:91" ["TmP_11"] ["code[2:0]"],
        _logic_reduce_and 2 "I_PFAD.v:85" ["TmP_12"] ["AA[5]", "AA[6]"],
        _sub 5 "I_PFAD.v:85" ["code[4:0]"] ["AA[4:0]"] ["0b0000", "TmP_12"] ,
        _buf 1 "I_PFAD.v:82" ["low"] ["AA[6]"]
    ] in
    PINST "draw_hier BITMASK" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let CA_MATCH {attrs::(string#string) list} conns =
    let inps = [ "CVALID[23:0]",
                 "DRAMSZ[2:0]",
                 "ADDR[27:0]",
                 "TAG0[16:0]",
                 "TAG1[16:0]",
                 "CFG[1:0]",
                 "WRITE",
                 "MMU_HIT",
                 "CI",
                 "INVAL_L",
                 "KDET",
                 "ENDRAM",
                 "DC_ILO" ] in
    let outs = [ "CA_HIT",
                 "CA_SET",
                 "UPDATE[23:0]",
                 "IO_SPACE",
                 "USE_CA",
                 "WB_ACC",
                 "KILL" ] in
    let ints = md_extract_vectors [ "TmP_0[7:0]",
                 "TmP_1[7:0]",
                 "TmP_10[7:0]",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26[7:0]",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33[7:0]",
                 "TmP_34[7:0]",
                 "TmP_35[7:0]",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52[7:0]",
                 "TmP_53[7:0]",
                 "TmP_54[7:0]",
                 "TmP_6",
                 "TmP_7[7:0]",
                 "TmP_8[7:0]",
                 "TmP_9[7:0]",
                 "acc_dram",
                 "clear",
                 "lastinfo[7:0]",
                 "maske[7:0]",
                 "match_0",
                 "match_1",
                 "sel_dram",
                 "select",
                 "update_0[7:0]",
                 "update_1[7:0]",
                 "valid_0",
                 "valid_1" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _or 8 "CACHE_LOGIK.v:447" ["TmP_34[7:0]"] ["CVALID[15:8]"] ["maske[7:0]"] ,
        _or 8 "CACHE_LOGIK.v:449" ["TmP_35[7:0]"] ["CVALID[23:16]"] ["maske[7:0]"] ,
        _pmux 1 8 "CACHE_LOGIK.v:464|CACHE_LOGIK.v:456" ["acc_dram"] ["0bx"] ["TmP_16", "TmP_17", "TmP_18", "TmP_19", "TmP_20", "TmP_28", "0b1", "TmP_29"] ["TmP_43", "TmP_42", "TmP_41", "TmP_40", "TmP_39", "TmP_38", "TmP_37", "TmP_36"],
        _eq 3 "CACHE_LOGIK.v:464|CACHE_LOGIK.v:456" ["TmP_36"] ["DRAMSZ[2:0]"] ["0b111"] ,
        _eq 3 "CACHE_LOGIK.v:463|CACHE_LOGIK.v:456" ["TmP_37"] ["DRAMSZ[2:0]"] ["0b110"] ,
        _eq 3 "CACHE_LOGIK.v:462|CACHE_LOGIK.v:456" ["TmP_38"] ["DRAMSZ[2:0]"] ["0b101"] ,
        _eq 3 "CACHE_LOGIK.v:461|CACHE_LOGIK.v:456" ["TmP_39"] ["DRAMSZ[2:0]"] ["0b100"] ,
        _eq 3 "CACHE_LOGIK.v:460|CACHE_LOGIK.v:456" ["TmP_40"] ["DRAMSZ[2:0]"] ["0b011"] ,
        _eq 3 "CACHE_LOGIK.v:459|CACHE_LOGIK.v:456" ["TmP_41"] ["DRAMSZ[2:0]"] ["0b010"] ,
        _eq 3 "CACHE_LOGIK.v:458|CACHE_LOGIK.v:456" ["TmP_42"] ["DRAMSZ[2:0]"] ["0b001"] ,
        _logic_not 3 "CACHE_LOGIK.v:457|CACHE_LOGIK.v:456" ["TmP_43"] ["DRAMSZ[2:0]"],
        _pmux 8 8 "CACHE_LOGIK.v:428|CACHE_LOGIK.v:420" ["maske[7:0]"] ["0bxxxxxxxx"] ["0b0000000100000010000001000000100000010000001000000100000010000000"] ["TmP_51", "TmP_50", "TmP_49", "TmP_48", "TmP_47", "TmP_46", "TmP_45", "TmP_44"],
        _eq 3 "CACHE_LOGIK.v:428|CACHE_LOGIK.v:420" ["TmP_44"] ["ADDR[2:0]"] ["0b111"] ,
        _eq 3 "CACHE_LOGIK.v:427|CACHE_LOGIK.v:420" ["TmP_45"] ["ADDR[2:0]"] ["0b110"] ,
        _eq 3 "CACHE_LOGIK.v:426|CACHE_LOGIK.v:420" ["TmP_46"] ["ADDR[2:0]"] ["0b101"] ,
        _eq 3 "CACHE_LOGIK.v:425|CACHE_LOGIK.v:420" ["TmP_47"] ["ADDR[2:0]"] ["0b100"] ,
        _eq 3 "CACHE_LOGIK.v:424|CACHE_LOGIK.v:420" ["TmP_48"] ["ADDR[2:0]"] ["0b011"] ,
        _eq 3 "CACHE_LOGIK.v:423|CACHE_LOGIK.v:420" ["TmP_49"] ["ADDR[2:0]"] ["0b010"] ,
        _eq 3 "CACHE_LOGIK.v:422|CACHE_LOGIK.v:420" ["TmP_50"] ["ADDR[2:0]"] ["0b001"] ,
        _logic_not 3 "CACHE_LOGIK.v:421|CACHE_LOGIK.v:420" ["TmP_51"] ["ADDR[2:0]"],
        _mux 1 "CACHE_LOGIK.v:440" ["select"] ["valid_0"] ["TmP_25"] ["TmP_6"],
        _mux 1 "CACHE_LOGIK.v:442" ["CA_SET"] ["select"] ["TmP_3"] ["CA_HIT"],
        _mux 8 "CACHE_LOGIK.v:446" ["TmP_52[7:0]"] ["TmP_33[7:0]"] ["TmP_8[7:0]"] ["clear"],
        _mux 8 "CACHE_LOGIK.v:446" ["update_0[7:0]"] ["TmP_52[7:0]"] ["CVALID[7:0]"] ["CA_SET"],
        _mux 8 "CACHE_LOGIK.v:447" ["TmP_53[7:0]"] ["TmP_34[7:0]"] ["TmP_9[7:0]"] ["clear"],
        _mux 8 "CACHE_LOGIK.v:447" ["update_1[7:0]"] ["CVALID[15:8]"] ["TmP_53[7:0]"] ["CA_SET"],
        _mux 8 "CACHE_LOGIK.v:449" ["TmP_54[7:0]"] ["TmP_10[7:0]"] ["TmP_35[7:0]"] ["CA_SET"],
        _mux 8 "CACHE_LOGIK.v:449" ["lastinfo[7:0]"] ["CVALID[23:16]"] ["TmP_54[7:0]"] ["CA_HIT"],
        _and 8 "CACHE_LOGIK.v:431" ["TmP_0[7:0]"] ["CVALID[7:0]"] ["maske[7:0]"] ,
        _and 8 "CACHE_LOGIK.v:432" ["TmP_1[7:0]"] ["CVALID[15:8]"] ["maske[7:0]"] ,
        _and 1 "CACHE_LOGIK.v:437" ["TmP_2"] ["valid_0"] ["match_0"] ,
        _and 1 "CACHE_LOGIK.v:437" ["TmP_4"] ["TmP_31"] ["TmP_24"] ,
        _and 1 "CACHE_LOGIK.v:437" ["TmP_5"] ["TmP_4"] ["CFG[0]"] ,
        _and 1 "CACHE_LOGIK.v:437" ["CA_HIT"] ["TmP_5"] ["TmP_32"] ,
        _and 1 "CACHE_LOGIK.v:440" ["TmP_6"] ["valid_1"] ["valid_0"] ,
        _and 8 "CACHE_LOGIK.v:440" ["TmP_7[7:0]"] ["CVALID[23:16]"] ["maske[7:0]"] ,
        _and 1 "CACHE_LOGIK.v:442" ["TmP_3"] ["valid_1"] ["match_1"] ,
        _and 8 "CACHE_LOGIK.v:446" ["TmP_8[7:0]"] ["CVALID[7:0]"] ["TmP_26[7:0]"] ,
        _and 8 "CACHE_LOGIK.v:447" ["TmP_9[7:0]"] ["CVALID[15:8]"] ["TmP_26[7:0]"] ,
        _and 8 "CACHE_LOGIK.v:449" ["TmP_10[7:0]"] ["CVALID[23:16]"] ["TmP_26[7:0]"] ,
        _and 1 "CACHE_LOGIK.v:453" ["TmP_11"] ["clear"] ["CA_HIT"] ,
        _and 1 "CACHE_LOGIK.v:453" ["KILL"] ["TmP_11"] ["TmP_27"] ,
        _and 1 "CACHE_LOGIK.v:467" ["TmP_12"] ["TmP_22"] ["acc_dram"] ,
        _and 1 "CACHE_LOGIK.v:467" ["sel_dram"] ["TmP_12"] ["ENDRAM"] ,
        _and 1 "CACHE_LOGIK.v:470" ["TmP_13"] ["TmP_30"] ["TmP_24"] ,
        _and 1 "CACHE_LOGIK.v:470" ["TmP_14"] ["TmP_13"] ["CFG[0]"] ,
        _and 1 "CACHE_LOGIK.v:470" ["USE_CA"] ["TmP_14"] ["TmP_27"] ,
        _and 1 "CACHE_LOGIK.v:471" ["TmP_15"] ["WRITE"] ["MMU_HIT"] ,
        _and 1 "CACHE_LOGIK.v:471" ["WB_ACC"] ["TmP_15"] ["sel_dram"] ,
        _eq 17 "CACHE_LOGIK.v:434" ["match_0"] ["TAG0[16:0]"] ["ADDR[24:8]"] ,
        _eq 17 "CACHE_LOGIK.v:435" ["match_1"] ["TAG1[16:0]"] ["ADDR[24:8]"] ,
        _logic_not 6 "CACHE_LOGIK.v:457" ["TmP_16"] ["ADDR[24:19]"],
        _logic_not 5 "CACHE_LOGIK.v:458" ["TmP_17"] ["ADDR[24:20]"],
        _logic_not 4 "CACHE_LOGIK.v:459" ["TmP_18"] ["ADDR[24:21]"],
        _logic_not 3 "CACHE_LOGIK.v:460" ["TmP_19"] ["ADDR[24:22]"],
        _logic_not 2 "CACHE_LOGIK.v:461" ["TmP_20"] ["ADDR[24:23]"],
        _eq 2 "CACHE_LOGIK.v:464" ["TmP_21"] ["ADDR[24:23]"] ["0b10"] ,
        _logic_not 3 "CACHE_LOGIK.v:467" ["TmP_22"] ["ADDR[27:25]"],
        _logic_reduce_bool 8 "CACHE_LOGIK.v:431" ["valid_0"] ["TmP_0[7:0]"],
        _logic_reduce_bool 8 "CACHE_LOGIK.v:432" ["valid_1"] ["TmP_1[7:0]"],
        _logic_reduce_bool 8 "CACHE_LOGIK.v:440" ["TmP_23"] ["TmP_7[7:0]"],
        _not 1 "CACHE_LOGIK.v:440" ["TmP_25"] ["TmP_23"],
        _not 8 "CACHE_LOGIK.v:449" ["TmP_26[7:0]"] ["maske[7:0]"],
        _not 1 "CACHE_LOGIK.v:462" ["TmP_28"] ["ADDR[24]"],
        _not 1 "CACHE_LOGIK.v:464" ["TmP_29"] ["TmP_21"],
        _not 1 "CACHE_LOGIK.v:468" ["IO_SPACE"] ["sel_dram"],
        _not 1 "CACHE_LOGIK.v:470" ["TmP_30"] ["CI"],
        _not 1 "CACHE_LOGIK.v:470" ["TmP_24"] ["DC_ILO"],
        _not 1 "CACHE_LOGIK.v:470" ["TmP_27"] ["CFG[1]"],
        _or 1 "CACHE_LOGIK.v:437" ["TmP_31"] ["TmP_2"] ["TmP_3"] ,
        _or 1 "CACHE_LOGIK.v:437" ["TmP_32"] ["sel_dram"] ["KDET"] ,
        _or 1 "CACHE_LOGIK.v:444" ["clear"] ["INVAL_L"] ["KDET"] ,
        _or 8 "CACHE_LOGIK.v:446" ["TmP_33[7:0]"] ["CVALID[7:0]"] ["maske[7:0]"] ,
        _buf 24 "CACHE_LOGIK.v:403" ["UPDATE[23:0]"] ["lastinfo[7:0]", "update_1[7:0]", "update_0[7:0]"]
    ] in
    PINST "draw_hier CA_MATCH" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let CONFIG_REGS {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "WREN",
                 "LD_OUT",
                 "OPCODE[7:0]",
                 "SRC1[31:0]",
                 "WRADR[5:0]",
                 "PC_ARCHI[31:0]",
                 "USER",
                 "PCMATCH",
                 "DBG_HIT",
                 "READ" ] in
    let outs = [ "CFG[12:0]",
                 "MCR[3:0]",
                 "PTB_WR",
                 "PTB_SEL",
                 "IVAR[1:0]",
                 "IVAR_MUX",
                 "CINV[3:0]",
                 "Y_INIT",
                 "DSR[3:0]",
                 "DBG_TRAPS[2:0]",
                 "DBG_IN[38:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[12:0]",
                 "TmP_1[3:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[3:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4[31:0]",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_5[29:0]",
                 "TmP_6",
                 "TmP_7[1:0]",
                 "TmP_8[1:0]",
                 "TmP_9[12:0]",
                 "bpc[31:0]",
                 "car[29:0]",
                 "check_y",
                 "ci_all[1:0]",
                 "ci_line[1:0]",
                 "dcr[12:0]",
                 "do_cinv",
                 "enable",
                 "init_dc",
                 "init_ic",
                 "ivarreg",
                 "ld_bpc",
                 "ld_car",
                 "ld_cfg",
                 "ld_dcr",
                 "ld_dsr",
                 "ld_mcr",
                 "old_cfg[1:0]",
                 "op_dbg",
                 "op_ok" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _adff 13 "REGISTERS.v:145" ["dcr[12:0]"] ["BRESET"] ["BCLK"] ["TmP_9[12:0]"],
        _dff 1 "REGISTERS.v:123" ["check_y"] ["BCLK"] ["TmP_6"],
        _dff 2 "REGISTERS.v:115" ["ci_line[1:0]"] ["BCLK"] ["TmP_8[1:0]"],
        _dff 2 "REGISTERS.v:114" ["ci_all[1:0]"] ["BCLK"] ["TmP_7[1:0]"],
        _dff 2 "REGISTERS.v:111" ["old_cfg[1:0]"] ["BCLK"] ["CFG[11]", "CFG[9]"],
        _dff 1 "REGISTERS.v:108" ["PTB_SEL"] ["BCLK"] ["WRADR[0]"],
        _dff 1 "REGISTERS.v:107" ["PTB_WR"] ["BCLK"] ["TmP_3"],
        _dff 1 "REGISTERS.v:104" ["ivarreg"] ["BCLK"] ["IVAR_MUX"],
        _adff 4 "REGISTERS.v:99" ["MCR[3:0]"] ["BRESET"] ["BCLK"] ["TmP_2[3:0]"],
        _adff 13 "REGISTERS.v:95" ["CFG[12:0]"] ["BRESET"] ["BCLK"] ["TmP_0[12:0]"],
        _mux 1 "REGISTERS.v:158" ["TmP_1[1]"] ["DSR[1]"] ["SRC1[29]"] ["ld_dsr"],
        _mux 1 "REGISTERS.v:158" ["TmP_1[0]"] ["TmP_41"] ["SRC1[28]"] ["ld_dsr"],
        _mux 1 "REGISTERS.v:158" ["TmP_1[2]"] ["TmP_40"] ["SRC1[30]"] ["ld_dsr"],
        _mux 1 "REGISTERS.v:158" ["TmP_1[3]"] ["TmP_43"] ["SRC1[31]"] ["ld_dsr"],
        _mux 30 "REGISTERS.v:150" ["TmP_5[29:0]"] ["car[29:0]"] ["SRC1[31:2]"] ["ld_car"],
        _mux 32 "REGISTERS.v:149" ["TmP_4[31:0]"] ["bpc[31:0]"] ["SRC1[31:0]"] ["ld_bpc"],
        _mux 13 "REGISTERS.v:147" ["TmP_9[12:0]"] ["dcr[12:0]"] ["SRC1[23:19]", "SRC1[7:0]"] ["ld_dcr"],
        _mux 4 "REGISTERS.v:101" ["TmP_2[3:0]"] ["MCR[3:0]"] ["SRC1[3:0]"] ["ld_mcr"],
        _mux 13 "REGISTERS.v:97" ["TmP_0[12:0]"] ["CFG[12:0]"] ["SRC1[12:0]"] ["ld_cfg"],
        _mux 2 "REGISTERS.v:114" ["TmP_7[1:0]"] ["0b00"] ["WRADR[1:0]"] ["TmP_12"],
        _mux 2 "REGISTERS.v:115" ["TmP_8[1:0]"] ["0b00"] ["WRADR[1:0]"] ["TmP_13"],
        _mux 1 "REGISTERS.v:143" ["TmP_42"] ["dcr[11]"] ["dcr[10]"] ["USER"],
        _mux 1 "REGISTERS.v:161" ["TmP_43"] ["DSR[3]"] ["READ"] ["DBG_HIT"],
        _and 1 "REGISTERS.v:103" ["TmP_10"] ["op_ok"] ["TmP_23"] ,
        _and 1 "REGISTERS.v:103" ["IVAR_MUX"] ["TmP_10"] ["WREN"] ,
        _and 1 "REGISTERS.v:107" ["TmP_11"] ["op_ok"] ["TmP_24"] ,
        _and 1 "REGISTERS.v:107" ["TmP_3"] ["TmP_11"] ["WREN"] ,
        _and 1 "REGISTERS.v:114" ["TmP_12"] ["do_cinv"] ["WRADR[2]"] ,
        _and 1 "REGISTERS.v:115" ["TmP_13"] ["do_cinv"] ["TmP_33"] ,
        _and 1 "REGISTERS.v:117" ["init_ic"] ["old_cfg[1]"] ["TmP_38"] ,
        _and 1 "REGISTERS.v:118" ["init_dc"] ["old_cfg[0]"] ["TmP_39"] ,
        _and 1 "REGISTERS.v:124" ["TmP_14"] ["check_y"] ["TmP_36"] ,
        _and 1 "REGISTERS.v:124" ["Y_INIT"] ["TmP_14"] ["TmP_37"] ,
        _and 1 "REGISTERS.v:138" ["TmP_15"] ["op_dbg"] ["TmP_25"] ,
        _and 1 "REGISTERS.v:138" ["ld_dcr"] ["TmP_15"] ["WREN"] ,
        _and 1 "REGISTERS.v:139" ["TmP_16"] ["op_dbg"] ["TmP_26"] ,
        _and 1 "REGISTERS.v:139" ["ld_bpc"] ["TmP_16"] ["WREN"] ,
        _and 1 "REGISTERS.v:140" ["TmP_17"] ["op_dbg"] ["TmP_27"] ,
        _and 1 "REGISTERS.v:140" ["ld_dsr"] ["TmP_17"] ["WREN"] ,
        _and 1 "REGISTERS.v:141" ["TmP_18"] ["op_dbg"] ["TmP_28"] ,
        _and 1 "REGISTERS.v:141" ["ld_car"] ["TmP_18"] ["WREN"] ,
        _and 1 "REGISTERS.v:143" ["enable"] ["dcr[12]"] ["TmP_42"] ,
        _and 1 "REGISTERS.v:153" ["DBG_IN[35]"] ["dcr[7]"] ["dcr[5]"] ,
        _and 1 "REGISTERS.v:153" ["DBG_IN[36]"] ["dcr[7]"] ["dcr[6]"] ,
        _and 1 "REGISTERS.v:153" ["DBG_IN[37]"] ["dcr[12]"] ["dcr[10]"] ,
        _and 1 "REGISTERS.v:153" ["DBG_IN[38]"] ["dcr[12]"] ["dcr[11]"] ,
        _and 1 "REGISTERS.v:167" ["TmP_19"] ["enable"] ["dcr[9]"] ,
        _and 1 "REGISTERS.v:167" ["DBG_TRAPS[0]"] ["TmP_19"] ["TmP_29"] ,
        _and 1 "REGISTERS.v:90" ["TmP_20"] ["op_ok"] ["TmP_30"] ,
        _and 1 "REGISTERS.v:90" ["ld_cfg"] ["TmP_20"] ["WREN"] ,
        _and 1 "REGISTERS.v:91" ["TmP_21"] ["op_ok"] ["TmP_31"] ,
        _and 1 "REGISTERS.v:91" ["ld_mcr"] ["TmP_21"] ["WREN"] ,
        _and 1 "REGISTERS.v:92" ["TmP_22"] ["op_ok"] ["TmP_32"] ,
        _and 1 "REGISTERS.v:92" ["do_cinv"] ["TmP_22"] ["WREN"] ,
        _eq 5 "REGISTERS.v:103" ["TmP_23"] ["WRADR[5:1]"] ["0b00111"] ,
        _eq 5 "REGISTERS.v:107" ["TmP_24"] ["WRADR[5:1]"] ["0b00110"] ,
        _eq 8 "REGISTERS.v:136" ["op_dbg"] ["OPCODE[7:0]"] ["0b01110110"] ,
        _eq 6 "REGISTERS.v:138" ["TmP_25"] ["WRADR[5:0]"] ["0b010001"] ,
        _eq 6 "REGISTERS.v:139" ["TmP_26"] ["WRADR[5:0]"] ["0b010010"] ,
        _eq 6 "REGISTERS.v:140" ["TmP_27"] ["WRADR[5:0]"] ["0b010011"] ,
        _eq 6 "REGISTERS.v:141" ["TmP_28"] ["WRADR[5:0]"] ["0b010100"] ,
        _eq 32 "REGISTERS.v:167" ["TmP_29"] ["PC_ARCHI[31:0]"] ["bpc[31:0]"] ,
        _eq 8 "REGISTERS.v:88" ["op_ok"] ["OPCODE[7:0]"] ["0b01101010"] ,
        _eq 6 "REGISTERS.v:90" ["TmP_30"] ["WRADR[5:0]"] ["0b011100"] ,
        _eq 6 "REGISTERS.v:91" ["TmP_31"] ["WRADR[5:0]"] ["0b001001"] ,
        _eq 2 "REGISTERS.v:92" ["TmP_32"] ["WRADR[5:4]"] ["0b11"] ,
        _not 1 "REGISTERS.v:115" ["TmP_33"] ["WRADR[2]"],
        _not 1 "REGISTERS.v:117" ["TmP_34"] ["CFG[11]"],
        _not 1 "REGISTERS.v:118" ["TmP_35"] ["CFG[9]"],
        _not 1 "REGISTERS.v:124" ["TmP_36"] ["init_ic"],
        _not 1 "REGISTERS.v:124" ["TmP_37"] ["init_dc"],
        _or 1 "REGISTERS.v:117" ["TmP_38"] ["TmP_34"] ["ci_all[1]"] ,
        _or 1 "REGISTERS.v:118" ["TmP_39"] ["TmP_35"] ["ci_all[0]"] ,
        _or 1 "REGISTERS.v:123" ["TmP_6"] ["ld_cfg"] ["do_cinv"] ,
        _or 1 "REGISTERS.v:162" ["TmP_40"] ["DSR[2]"] ["PCMATCH"] ,
        _or 1 "REGISTERS.v:164" ["TmP_41"] ["DSR[0]"] ["DBG_HIT"] ,
        _adff 4 "REGISTERS.v:155" ["DSR[3:0]"] ["BRESET"] ["BCLK"] ["TmP_1[3:0]"],
        _dff 30 "REGISTERS.v:150" ["car[29:0]"] ["BCLK"] ["TmP_5[29:0]"],
        _dff 32 "REGISTERS.v:149" ["bpc[31:0]"] ["BCLK"] ["TmP_4[31:0]"],
        _buf 4 "REGISTERS.v:70" ["CINV[3:0]"] ["init_ic", "ci_line[1]", "init_dc", "ci_line[0]"],
        _buf 35 "" ["DBG_IN[34:0]"] ["dcr[4:0]", "car[29:0]"],
        _buf 2 "" ["DBG_TRAPS[2:1]"] ["dcr[8]", "DBG_HIT"],
        _buf 2 "REGISTERS.v:68" ["IVAR[1:0]"] ["ivarreg", "PTB_SEL"]
    ] in
    PINST "draw_hier CONFIG_REGS" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DATENPFAD {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "WREN",
                 "IO_READY",
                 "LD_DIN",
                 "LD_IMME",
                 "WR_REG",
                 "IC_USER",
                 "ACC_FELD[14:0]",
                 "ACC_STAT[5:0]",
                 "DIN[31:0]",
                 "DISP[31:0]",
                 "IC_TEX[2:0]",
                 "IMME_Q[31:0]",
                 "INFO_AU[6:0]",
                 "LD_OUT[1:0]",
                 "DETOIP[12:0]",
                 "MMU_UPDATE[1:0]",
                 "OPER[10:0]",
                 "PC_ARCHI[31:0]",
                 "PC_ICACHE[31:0]",
                 "RDAA[7:0]",
                 "RDAB[7:0]",
                 "START[1:0]",
                 "WMASKE[1:0]",
                 "WRADR[5:0]",
                 "RWVFLAG",
                 "DBG_HIT",
                 "COP_OP[23:0]",
                 "COP_IN[63:0]",
                 "COP_DONE" ] in
    let outs = [ "DONE",
                 "Y_INIT",
                 "WRITE_OUT",
                 "READ_OUT",
                 "ZTEST",
                 "RMW",
                 "QWATWO",
                 "ACC_DONE",
                 "CTRL_QW[1:0]",
                 "PTB_SEL",
                 "PTB_WR",
                 "ACB_ZERO",
                 "ABORT",
                 "SAVE_PC",
                 "CFG[12:0]",
                 "CINV[3:0]",
                 "DP_Q[63:0]",
                 "IVAR[1:0]",
                 "IVAR_MUX",
                 "MCR[3:0]",
                 "PACKET[3:0]",
                 "PC_NEW[31:0]",
                 "PSR[11:0]",
                 "SIZE[1:0]",
                 "STRING[4:0]",
                 "TRAPS[5:0]",
                 "VADR[31:0]",
                 "DBG_IN[38:0]",
                 "COP_GO",
                 "COP_OUT[127:0]" ] in
    let ints = md_extract_vectors [ "BITSEL[2:0]",
                 "BMASKE[31:0]",
                 "BMCODE[6:0]",
                 "BWD[1:0]",
                 "BYDIN[31:0]",
                 "CLR_LSB",
                 "DOWR",
                 "DP_CMP[2:0]",
                 "DP_OUT[31:0]",
                 "DSR[3:0]",
                 "ENWR",
                 "ERGEBNIS[31:0]",
                 "FL",
                 "FP_OUT[31:0]",
                 "FSR[31:0]",
                 "IMMREG[31:0]",
                 "I_OUT[31:0]",
                 "LDIMR",
                 "LD_FSR",
                 "MEMREG[31:0]",
                 "MRESULT[32:0]",
                 "OPCODE[7:0]",
                 "OUT_A[31:0]",
                 "OUT_B[31:0]",
                 "OUT_I[31:0]",
                 "OVF_BCD[3:0]",
                 "SELI_A",
                 "SELI_B",
                 "SFP_DAT[31:0]",
                 "SP_CMP[2:0]",
                 "SP_MUX",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "TT_DP[4:0]",
                 "TT_SP[4:0]",
                 "TWREN",
                 "TmP_0",
                 "TmP_1[31:0]",
                 "TmP_2[31:0]",
                 "TmP_3",
                 "TmP_4[31:0]",
                 "TmP_5[31:0]",
                 "TmP_6",
                 "TmP_7",
                 "UP_DP",
                 "UP_SP",
                 "WRADR_0",
                 "WREN_L",
                 "WREN_LX",
                 "acb_zero_i",
                 "addr_i[31:0]",
                 "high_dq[31:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        ADDR_UNIT [("instance", "ADDR_U"), ("src", "DATENPFAD.v:273")] [
                ("ABORT",["ABORT"]),
                ("ABO_STAT[1:0]",["INFO_AU[1]", "IC_USER"]),
                ("ACC_DONE",["ACC_DONE"]),
                ("ACC_STAT[5:0]",["ACC_STAT[5:0]"]),
                ("ADDR[31:0]",["addr_i[31:0]"]),
                ("ADIVAR",["INFO_AU[2]"]),
                ("ASIZE[1:0]",["ACC_FELD[13:12]"]),
                ("BCLK",["BCLK"]),
                ("BITSEL[2:0]",["BITSEL[2:0]"]),
                ("BRESET",["BRESET"]),
                ("BWD[1:0]",["OPER[9:8]"]),
                ("CLRMSW",["ACC_FELD[2]"]),
                ("CTRL_QW[1:0]",["CTRL_QW[1:0]"]),
                ("DISP[31:0]",["DISP[31:0]"]),
                ("DISP_OK",["INFO_AU[0]"]),
                ("FPU_TRAP",["TRAPS[0]"]),
                ("FULLACC",["ACC_FELD[8]"]),
                ("IC_TEX[2:0]",["IC_TEX[2:0]"]),
                ("INDEX[3:0]",["ACC_FELD[7:4]"]),
                ("IO_READY",["IO_READY"]),
                ("LDEA",["ACC_FELD[9]"]),
                ("MMU_UPDATE[1:0]",["MMU_UPDATE[1:0]"]),
                ("NEWACC",["ACC_FELD[14]"]),
                ("NO_TRAP",["INFO_AU[6]"]),
                ("OP_RMW",["INFO_AU[4]"]),
                ("PACKET[3:0]",["PACKET[3:0]"]),
                ("PC_ARCHI[31:0]",["PC_ARCHI[31:0]"]),
                ("PC_ICACHE[31:0]",["PC_ICACHE[31:0]"]),
                ("PHASE_17",["INFO_AU[5]"]),
                ("POST",["ACC_FELD[3]"]),
                ("QWATWO",["QWATWO"]),
                ("READ",["ACC_FELD[11]"]),
                ("READ_OUT",["READ_OUT"]),
                ("RMW",["RMW"]),
                ("RWVAL_1",["INFO_AU[3]"]),
                ("SIZE[1:0]",["SIZE[1:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("SRC2SEL[1:0]",["ACC_FELD[1:0]"]),
                ("VADR[31:0]",["VADR[31:0]"]),
                ("WRITE",["ACC_FELD[10]"]),
                ("WRITE_OUT",["WRITE_OUT"]),
                ("ZTEST",["ZTEST"])],
        BITMASK [("instance", "BITM_U"), ("src", "DATENPFAD.v:230")] [
                ("AA[6:0]",["BMCODE[6:0]"]),
                ("DOUT[31:0]",["BMASKE[31:0]"])],
        CONFIG_REGS [("instance", "CFG_DBG"), ("src", "DATENPFAD.v:318")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CFG[12:0]",["CFG[12:0]"]),
                ("CINV[3:0]",["CINV[3:0]"]),
                ("DBG_HIT",["DBG_HIT"]),
                ("DBG_IN[38:0]",["DBG_IN[38:0]"]),
                ("DBG_TRAPS[2:0]",["TRAPS[5:3]"]),
                ("DSR[3:0]",["DSR[3:0]"]),
                ("IVAR[1:0]",["IVAR[1:0]"]),
                ("IVAR_MUX",["IVAR_MUX"]),
                ("LD_OUT",["LD_OUT[1]"]),
                ("MCR[3:0]",["MCR[3:0]"]),
                ("OPCODE[7:0]",["OPER[7:0]"]),
                ("PCMATCH",["DETOIP[12]"]),
                ("PC_ARCHI[31:0]",["PC_ARCHI[31:0]"]),
                ("PTB_SEL",["PTB_SEL"]),
                ("PTB_WR",["PTB_WR"]),
                ("READ",["READ_OUT"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("USER",["PSR[8]"]),
                ("WRADR[5:0]",["WRADR[5:0]"]),
                ("WREN",["WREN"]),
                ("Y_INIT",["Y_INIT"])],
        DP_FPU [("instance", "DOUBLE_U"), ("src", "DATENPFAD.v:346")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("BWD[1:0]",["OPER[9:8]"]),
                ("CLR_LSB",["CLR_LSB"]),
                ("COP_DONE",["COP_DONE"]),
                ("COP_GO",["COP_GO"]),
                ("COP_IN[63:0]",["COP_IN[63:0]"]),
                ("COP_OP[23:0]",["COP_OP[23:0]"]),
                ("COP_OUT[127:0]",["COP_OUT[127:0]"]),
                ("CY_IN",["PSR[0]"]),
                ("DONE",["DONE"]),
                ("DP_CMP[2:0]",["DP_CMP[2:0]"]),
                ("DP_OUT[31:0]",["DP_OUT[31:0]"]),
                ("DP_Q[31:0]",["DP_Q[31:0]"]),
                ("DVZ_TRAP",["TRAPS[1]"]),
                ("FL",["OPER[10]"]),
                ("FSR[5:0]",["FSR[8:3]"]),
                ("LD_OUT[1:0]",["LD_OUT[1:0]"]),
                ("OPCODE[7:0]",["OPER[7:0]"]),
                ("OVF_BCD[3:0]",["OVF_BCD[3:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("START[1:0]",["START[1:0]"]),
                ("TT_DP[4:0]",["TT_DP[4:0]"]),
                ("UP_DP",["UP_DP"]),
                ("WREN_L",["WREN_LX"]),
                ("WR_REG",["WR_REG"])],
        FP_STAT_REG [("instance", "FPS_REG"), ("src", "DATENPFAD.v:395")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("DIN[16:0]",["SRC1[16:0]"]),
                ("FPU_TRAP",["TRAPS[0]"]),
                ("FSR[31:0]",["FSR[31:0]"]),
                ("LFSR",["LD_FSR"]),
                ("SAVE_PC",["SAVE_PC"]),
                ("TT_DP[4:0]",["TT_DP[4:0]"]),
                ("TT_SP[4:0]",["TT_SP[4:0]"]),
                ("TWREN",["TWREN"]),
                ("UP_DP",["UP_DP"]),
                ("UP_SP",["UP_SP"]),
                ("WRADR[1:0]",["WRADR[5:4]"]),
                ("WREN",["ENWR"])],
        I_PFAD [("instance", "GANZ_U"), ("src", "DATENPFAD.v:237")] [
                ("ACB_ZERO",["acb_zero_i"]),
                ("ADDR[31:0]",["addr_i[31:0]"]),
                ("BCLK",["BCLK"]),
                ("BITSEL[2:0]",["BITSEL[2:0]"]),
                ("BMASKE[31:0]",["BMASKE[31:0]"]),
                ("BMCODE[6:0]",["BMCODE[6:0]"]),
                ("BRESET",["BRESET"]),
                ("BWD[1:0]",["OPER[9:8]"]),
                ("DETOIP[11:0]",["DETOIP[11:0]"]),
                ("DISP[4:0]",["DISP[4:0]"]),
                ("DP_CMP[2:0]",["DP_CMP[2:0]"]),
                ("DP_OUT[31:0]",["DP_OUT[31:0]"]),
                ("DSR[3:0]",["DSR[3:0]"]),
                ("FL",["OPER[10]"]),
                ("FSR[31:0]",["FSR[31:0]"]),
                ("I_OUT[31:0]",["I_OUT[31:0]"]),
                ("LD_OUT",["LD_OUT[1]"]),
                ("MRESULT[32:0]",["MRESULT[32:0]"]),
                ("OPCODE[7:0]",["OPER[7:0]"]),
                ("OVF_BCD[3:0]",["OVF_BCD[3:0]"]),
                ("OV_FLAG",["TRAPS[2]"]),
                ("PSR[11:0]",["PSR[11:0]"]),
                ("RDAA[7:0]",["RDAA[7:0]"]),
                ("RWVFLAG",["RWVFLAG"]),
                ("SFP_DAT[31:0]",["SFP_DAT[31:0]"]),
                ("SP_CMP[2:0]",["SP_CMP[2:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("STRING[4:0]",["STRING[4:0]"]),
                ("WRADR[5:0]",["WRADR[5:0]"]),
                ("WREN",["WREN"])],
        MULFILTER [("instance", "M_FILTER"), ("src", "DATENPFAD.v:224")] [
                ("BWD[1:0]",["OPER[9:8]"]),
                ("MRESULT[32:0]",["MRESULT[32:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"])],
        REGISTER [("instance", "REG_SET_A"), ("src", "DATENPFAD.v:193")] [
                ("BCLK",["BCLK"]),
                ("BYDIN[31:0]",["BYDIN[31:0]"]),
                ("DIN[31:0]",["ERGEBNIS[31:0]"]),
                ("DOUT[31:0]",["OUT_A[31:0]"]),
                ("DOWR",["DOWR"]),
                ("ENWR",["ENWR"]),
                ("RADR[7:0]",["RDAA[7:0]"]),
                ("SELI",["SELI_A"]),
                ("WADR[5:0]",["WRADR[5:1]", "WRADR_0"]),
                ("WMASKE[1:0]",["WMASKE[1:0]"])],
        REGISTER [("instance", "REG_SET_B"), ("src", "DATENPFAD.v:210")] [
                ("BCLK",["BCLK"]),
                ("BYDIN[31:0]",["BYDIN[31:0]"]),
                ("DIN[31:0]",["ERGEBNIS[31:0]"]),
                ("DOUT[31:0]",["OUT_B[31:0]"]),
                ("DOWR",["DOWR"]),
                ("ENWR",["ENWR"]),
                ("RADR[7:0]",["RDAB[7:0]"]),
                ("SELI",["SELI_B"]),
                ("WADR[5:0]",["WRADR[5:1]", "WRADR_0"]),
                ("WMASKE[1:0]",["WMASKE[1:0]"])],
        SP_FPU [("instance", "SINGLE_U"), ("src", "DATENPFAD.v:378")] [
                ("BCLK",["BCLK"]),
                ("BWD[1:0]",["OPER[9:8]"]),
                ("FL",["OPER[10]"]),
                ("FP_OUT[31:0]",["FP_OUT[31:0]"]),
                ("FSR[5:0]",["FSR[8:3]"]),
                ("I_OUT[31:0]",["SFP_DAT[31:0]"]),
                ("LD_FSR",["LD_FSR"]),
                ("OPCODE[7:0]",["OPER[7:0]"]),
                ("SP_CMP[2:0]",["SP_CMP[2:0]"]),
                ("SP_MUX",["SP_MUX"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("START",["START[1]"]),
                ("TT_SP[4:0]",["TT_SP[4:0]"]),
                ("UP_SP",["UP_SP"])],
        _lor 1 "DATENPFAD.v:174" ["TmP_6"] ["LD_OUT[1]"] ["WREN"],
        _not 1 "DATENPFAD.v:168" ["TmP_7"] ["TRAPS[0]"],
        _or 1 "DATENPFAD.v:165" ["ENWR"] ["WREN_L"] ["WREN"] ,
        _dff 32 "DATENPFAD.v:188" ["BYDIN[31:0]"] ["BCLK"] ["TmP_1[31:0]"],
        _dff 32 "DATENPFAD.v:178" ["IMMREG[31:0]"] ["BCLK"] ["TmP_2[31:0]"],
        _dff 32 "DATENPFAD.v:178" ["MEMREG[31:0]"] ["BCLK"] ["TmP_4[31:0]"],
        _dff 1 "DATENPFAD.v:178" ["LDIMR"] ["BCLK"] ["TmP_3"],
        _dff 32 "DATENPFAD.v:176" ["high_dq[31:0]"] ["BCLK"] ["TmP_5[31:0]"],
        _dff 1 "DATENPFAD.v:174" ["ACB_ZERO"] ["BCLK"] ["TmP_0"],
        _mux 32 "DATENPFAD.v:188" ["TmP_1[31:0]"] ["BYDIN[31:0]"] ["ERGEBNIS[31:0]"] ["RDAA[7]"],
        _mux 1 "DATENPFAD.v:179" ["TmP_3"] ["LDIMR"] ["LD_IMME"] ["LD_DIN"],
        _mux 32 "DATENPFAD.v:179" ["TmP_4[31:0]"] ["MEMREG[31:0]"] ["DIN[31:0]"] ["LD_DIN"],
        _mux 32 "DATENPFAD.v:179" ["TmP_2[31:0]"] ["IMMREG[31:0]"] ["IMME_Q[31:0]"] ["LD_DIN"],
        _mux 32 "DATENPFAD.v:176" ["TmP_5[31:0]"] ["high_dq[31:0]"] ["ERGEBNIS[31:0]"] ["LD_OUT[1]"],
        _mux 1 "DATENPFAD.v:174" ["TmP_0"] ["ACB_ZERO"] ["acb_zero_i"] ["TmP_6"],
        _mux 32 "DATENPFAD.v:162" ["ERGEBNIS[31:0]"] ["I_OUT[31:0]"] ["FP_OUT[31:0]"] ["SP_MUX"],
        _mux 32 "DATENPFAD.v:186" ["OUT_I[31:0]"] ["MEMREG[31:0]"] ["IMMREG[31:0]"] ["LDIMR"],
        _mux 32 "DATENPFAD.v:205" ["SRC1[31:0]"] ["OUT_A[31:0]"] ["OUT_I[31:0]"] ["SELI_A"],
        _mux 32 "DATENPFAD.v:222" ["SRC2[31:0]"] ["OUT_B[31:0]"] ["OUT_I[31:0]"] ["SELI_B"],
        _xor 1 "DATENPFAD.v:164" ["WRADR_0"] ["WRADR[0]"] ["CLR_LSB"] ,
        _and 1 "DATENPFAD.v:166" ["DOWR"] ["ENWR"] ["TWREN"] ,
        _and 1 "DATENPFAD.v:168" ["WREN_L"] ["WREN_LX"] ["TmP_7"] ,
        _buf 2 "DATENPFAD.v:121" ["BWD[1:0]"] ["OPER[9:8]"],
        _buf 32 "" ["DP_Q[63:32]"] ["high_dq[31:0]"],
        _buf 1 "DATENPFAD.v:124" ["FL"] ["OPER[10]"],
        _buf 8 "DATENPFAD.v:127" ["OPCODE[7:0]"] ["OPER[7:0]"],
        _buf 32 "DATENPFAD.v:105" ["PC_NEW[31:0]"] ["SRC1[31:0]"]
    ] in
    PINST "draw_hier DATENPFAD" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DCACHE {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "DRAMSZ[2:0]",
                 "MDONE",
                 "BRESET",
                 "PTB_WR",
                 "PTB_SEL",
                 "IO_READY",
                 "CTRL_QW[1:0]",
                 "PSR_USER",
                 "WRITE",
                 "READ",
                 "RMW",
                 "QWATWO",
                 "ENWR",
                 "IC_PREQ",
                 "DMA_CHK",
                 "CFG[1:0]",
                 "CINVAL[1:0]",
                 "DMA_AA[24:0]",
                 "DP_Q[63:0]",
                 "DRAM_Q[127:0]",
                 "IC_VA[19:0]",
                 "ICTODC[3:0]",
                 "IO_Q[31:0]",
                 "IVAR[1:0]",
                 "MCR_FLAGS[3:0]",
                 "PACKET[3:0]",
                 "SIZE[1:0]",
                 "VADR[31:0]",
                 "INHIBIT",
                 "ZTEST",
                 "RWVAL[2:0]",
                 "DBG_IN[38:0]",
                 "ENDRAM" ] in
    let outs = [ "IO_RD",
                 "IO_WR",
                 "DRAM_ACC",
                 "DRAM_WR",
                 "INIT_RUN",
                 "PTE_STAT[1:0]",
                 "KDET",
                 "HLDA",
                 "ACC_STAT[5:0]",
                 "DP_DI[31:0]",
                 "DRAM_A[28:0]",
                 "DRAM_DI[35:0]",
                 "IACC_STAT[2:0]",
                 "IC_SIGS[1:0]",
                 "IO_A[31:0]",
                 "IO_BE[3:0]",
                 "IO_DI[31:0]",
                 "KOLLI_A[24:0]",
                 "MMU_DIN[23:0]",
                 "RWVFLAG",
                 "DBG_HIT" ] in
    let ints = md_extract_vectors [ "ADDR[24:0]",
                 "ADR_EQU",
                 "ADR_MX[28:0]",
                 "ALT_DAT[31:0]",
                 "AUX_ALT",
                 "AUX_DAT",
                 "AUX_QW",
                 "BE_SET[15:0]",
                 "CAPDAT[31:0]",
                 "CAP_Q[31:0]",
                 "CA_HIT",
                 "CA_SET",
                 "CI",
                 "CUPDATE",
                 "CVALID[23:0]",
                 "DAT_CV[23:0]",
                 "DAT_MV[31:0]",
                 "DAT_SET[127:0]",
                 "DFFE_IOR[31:0]",
                 "DFF_QWEXT",
                 "DMA_MUX",
                 "ENBYTE[3:0]",
                 "HIT_ALL",
                 "INIT_CA_RUN",
                 "IO_ACC",
                 "IO_SPACE",
                 "KILL",
                 "KOLLI_AR[7:0]",
                 "KOMUX",
                 "LAST_DAT[31:0]",
                 "LAST_MUX",
                 "MMU_HIT",
                 "MMU_Q[35:0]",
                 "MVALID[31:0]",
                 "NEW_PTB",
                 "NEW_PTB_RUN",
                 "PD_MUX",
                 "PKEEP",
                 "PROT_ERROR",
                 "PTB_ONE",
                 "PTE_ADR[28:0]",
                 "PTE_DAT[19:0]",
                 "PTE_MUX",
                 "RADR[19:0]",
                 "RADR_MV[3:0]",
                 "RDDATA0[127:0]",
                 "RDDATA1[127:0]",
                 "SEL_PTB1",
                 "SET_DAT[31:0]",
                 "SET_DAT0[31:0]",
                 "SET_DAT1[31:0]",
                 "TAG0[16:0]",
                 "TAG1[16:0]",
                 "TAGA[7:0]",
                 "TAGDAT[16:0]",
                 "TmP_0[7:0]",
                 "TmP_1[7:0]",
                 "TmP_10[7:0]",
                 "TmP_100[31:0]",
                 "TmP_101[31:0]",
                 "TmP_102[7:0]",
                 "TmP_103[16:0]",
                 "TmP_104[16:0]",
                 "TmP_105[7:0]",
                 "TmP_106[16:0]",
                 "TmP_107[16:0]",
                 "TmP_108",
                 "TmP_109[31:0]",
                 "TmP_11[7:0]",
                 "TmP_110[31:0]",
                 "TmP_111",
                 "TmP_112[28:0]",
                 "TmP_113[35:0]",
                 "TmP_114[31:0]",
                 "TmP_115[3:0]",
                 "TmP_116[31:0]",
                 "TmP_117[35:0]",
                 "TmP_118[31:0]",
                 "TmP_119[127:0]",
                 "TmP_12[7:0]",
                 "TmP_120[127:0]",
                 "TmP_121[16:0]",
                 "TmP_122[16:0]",
                 "TmP_123",
                 "TmP_124[7:0]",
                 "TmP_125[7:0]",
                 "TmP_126[7:0]",
                 "TmP_127[7:0]",
                 "TmP_128[7:0]",
                 "TmP_129[7:0]",
                 "TmP_13[7:0]",
                 "TmP_130[7:0]",
                 "TmP_131[7:0]",
                 "TmP_132[7:0]",
                 "TmP_133[7:0]",
                 "TmP_134[7:0]",
                 "TmP_135[7:0]",
                 "TmP_136[7:0]",
                 "TmP_137[7:0]",
                 "TmP_138[7:0]",
                 "TmP_139[7:0]",
                 "TmP_14[7:0]",
                 "TmP_140[7:0]",
                 "TmP_141[7:0]",
                 "TmP_142[7:0]",
                 "TmP_143[7:0]",
                 "TmP_144[7:0]",
                 "TmP_145[7:0]",
                 "TmP_146[7:0]",
                 "TmP_147[7:0]",
                 "TmP_148[7:0]",
                 "TmP_149[7:0]",
                 "TmP_15[7:0]",
                 "TmP_150[7:0]",
                 "TmP_151[7:0]",
                 "TmP_152[7:0]",
                 "TmP_153[7:0]",
                 "TmP_154[7:0]",
                 "TmP_155[7:0]",
                 "TmP_156[7:0]",
                 "TmP_157[7:0]",
                 "TmP_158[7:0]",
                 "TmP_159[7:0]",
                 "TmP_16[7:0]",
                 "TmP_160[7:0]",
                 "TmP_161[7:0]",
                 "TmP_162[7:0]",
                 "TmP_163[7:0]",
                 "TmP_164[7:0]",
                 "TmP_165[7:0]",
                 "TmP_166[7:0]",
                 "TmP_167[7:0]",
                 "TmP_168[7:0]",
                 "TmP_169[7:0]",
                 "TmP_17[7:0]",
                 "TmP_170[7:0]",
                 "TmP_171[7:0]",
                 "TmP_172[7:0]",
                 "TmP_173[7:0]",
                 "TmP_174[7:0]",
                 "TmP_175[7:0]",
                 "TmP_176[7:0]",
                 "TmP_177[7:0]",
                 "TmP_178[7:0]",
                 "TmP_179[7:0]",
                 "TmP_18[7:0]",
                 "TmP_180[7:0]",
                 "TmP_181[7:0]",
                 "TmP_182[7:0]",
                 "TmP_183[7:0]",
                 "TmP_184[7:0]",
                 "TmP_185[7:0]",
                 "TmP_186[7:0]",
                 "TmP_187[7:0]",
                 "TmP_188[7:0]",
                 "TmP_189[7:0]",
                 "TmP_19[7:0]",
                 "TmP_190[7:0]",
                 "TmP_191[7:0]",
                 "TmP_192[7:0]",
                 "TmP_193[7:0]",
                 "TmP_194[7:0]",
                 "TmP_195[7:0]",
                 "TmP_196[7:0]",
                 "TmP_197[7:0]",
                 "TmP_198[7:0]",
                 "TmP_199[7:0]",
                 "TmP_2[7:0]",
                 "TmP_20[7:0]",
                 "TmP_200[7:0]",
                 "TmP_201[7:0]",
                 "TmP_202[7:0]",
                 "TmP_203[7:0]",
                 "TmP_204[7:0]",
                 "TmP_205[7:0]",
                 "TmP_206[7:0]",
                 "TmP_207[7:0]",
                 "TmP_208[7:0]",
                 "TmP_209[7:0]",
                 "TmP_21[7:0]",
                 "TmP_210[7:0]",
                 "TmP_211[7:0]",
                 "TmP_212[7:0]",
                 "TmP_213[7:0]",
                 "TmP_214[7:0]",
                 "TmP_215[7:0]",
                 "TmP_216[7:0]",
                 "TmP_217[7:0]",
                 "TmP_218[7:0]",
                 "TmP_219[7:0]",
                 "TmP_22[7:0]",
                 "TmP_220[7:0]",
                 "TmP_221[35:0]",
                 "TmP_222[35:0]",
                 "TmP_223[3:0]",
                 "TmP_224[31:0]",
                 "TmP_225[31:0]",
                 "TmP_226[7:0]",
                 "TmP_227[16:0]",
                 "TmP_228[16:0]",
                 "TmP_229[7:0]",
                 "TmP_23[7:0]",
                 "TmP_230[16:0]",
                 "TmP_231[16:0]",
                 "TmP_232",
                 "TmP_233",
                 "TmP_234",
                 "TmP_235",
                 "TmP_236[7:0]",
                 "TmP_237[7:0]",
                 "TmP_238[7:0]",
                 "TmP_239[7:0]",
                 "TmP_24[7:0]",
                 "TmP_240[7:0]",
                 "TmP_241[7:0]",
                 "TmP_242[7:0]",
                 "TmP_243[7:0]",
                 "TmP_244[7:0]",
                 "TmP_245[7:0]",
                 "TmP_246[7:0]",
                 "TmP_247[7:0]",
                 "TmP_248[7:0]",
                 "TmP_249[7:0]",
                 "TmP_25[7:0]",
                 "TmP_250[7:0]",
                 "TmP_251[7:0]",
                 "TmP_252[7:0]",
                 "TmP_253[7:0]",
                 "TmP_254[7:0]",
                 "TmP_255[7:0]",
                 "TmP_256[7:0]",
                 "TmP_257[7:0]",
                 "TmP_258[7:0]",
                 "TmP_259[7:0]",
                 "TmP_26[7:0]",
                 "TmP_260[7:0]",
                 "TmP_261[7:0]",
                 "TmP_262[7:0]",
                 "TmP_263[7:0]",
                 "TmP_264[7:0]",
                 "TmP_265[7:0]",
                 "TmP_266[7:0]",
                 "TmP_267[7:0]",
                 "TmP_268[7:0]",
                 "TmP_269[7:0]",
                 "TmP_27[7:0]",
                 "TmP_270[7:0]",
                 "TmP_271[7:0]",
                 "TmP_272[7:0]",
                 "TmP_273[7:0]",
                 "TmP_274[7:0]",
                 "TmP_275[7:0]",
                 "TmP_276[7:0]",
                 "TmP_277[7:0]",
                 "TmP_278[7:0]",
                 "TmP_279[7:0]",
                 "TmP_28[7:0]",
                 "TmP_280[7:0]",
                 "TmP_281[7:0]",
                 "TmP_282[7:0]",
                 "TmP_283[7:0]",
                 "TmP_284",
                 "TmP_285",
                 "TmP_286",
                 "TmP_287",
                 "TmP_29[7:0]",
                 "TmP_3[7:0]",
                 "TmP_30[7:0]",
                 "TmP_31[7:0]",
                 "TmP_32[7:0]",
                 "TmP_33[7:0]",
                 "TmP_34[7:0]",
                 "TmP_35[7:0]",
                 "TmP_36[7:0]",
                 "TmP_37[7:0]",
                 "TmP_38[7:0]",
                 "TmP_39[7:0]",
                 "TmP_4[7:0]",
                 "TmP_40[7:0]",
                 "TmP_41[7:0]",
                 "TmP_42[7:0]",
                 "TmP_43[7:0]",
                 "TmP_44[7:0]",
                 "TmP_45[7:0]",
                 "TmP_46[7:0]",
                 "TmP_47[7:0]",
                 "TmP_48[7:0]",
                 "TmP_49[7:0]",
                 "TmP_5[7:0]",
                 "TmP_50[7:0]",
                 "TmP_51[7:0]",
                 "TmP_52[7:0]",
                 "TmP_53[7:0]",
                 "TmP_54[7:0]",
                 "TmP_55[7:0]",
                 "TmP_56[7:0]",
                 "TmP_57[7:0]",
                 "TmP_58[7:0]",
                 "TmP_59[7:0]",
                 "TmP_6[7:0]",
                 "TmP_60[7:0]",
                 "TmP_61[7:0]",
                 "TmP_62[7:0]",
                 "TmP_63[7:0]",
                 "TmP_64[7:0]",
                 "TmP_65[7:0]",
                 "TmP_66[7:0]",
                 "TmP_67[7:0]",
                 "TmP_68[7:0]",
                 "TmP_69[7:0]",
                 "TmP_7[7:0]",
                 "TmP_70[7:0]",
                 "TmP_71[7:0]",
                 "TmP_72[7:0]",
                 "TmP_73[7:0]",
                 "TmP_74[7:0]",
                 "TmP_75[7:0]",
                 "TmP_76[7:0]",
                 "TmP_77[7:0]",
                 "TmP_78[7:0]",
                 "TmP_79[7:0]",
                 "TmP_8[7:0]",
                 "TmP_80[7:0]",
                 "TmP_81[7:0]",
                 "TmP_82[7:0]",
                 "TmP_83[7:0]",
                 "TmP_84[7:0]",
                 "TmP_85[7:0]",
                 "TmP_86[7:0]",
                 "TmP_87[7:0]",
                 "TmP_88[7:0]",
                 "TmP_89[7:0]",
                 "TmP_9[7:0]",
                 "TmP_90[7:0]",
                 "TmP_91[7:0]",
                 "TmP_92[7:0]",
                 "TmP_93[7:0]",
                 "TmP_94[7:0]",
                 "TmP_95[7:0]",
                 "TmP_96[7:0]",
                 "TmP_97[35:0]",
                 "TmP_98[35:0]",
                 "TmP_99[3:0]",
                 "UPDATE_C[23:0]",
                 "UPDATE_M[31:0]",
                 "USER",
                 "USE_CA",
                 "VADR_R[31:0]",
                 "VIRTUELL",
                 "VIRT_A",
                 "WADR_CV[4:0]",
                 "WADR_MV[3:0]",
                 "WB_ACC",
                 "WEMV",
                 "WE_CV",
                 "WRCRAM0",
                 "WRCRAM1",
                 "WRDATA[31:0]",
                 "WRSET0",
                 "WRSET1",
                 "WR_MRAM",
                 "XADDR2",
                "DATA0_A[255:0][7:0]",
                "DATA0_B[255:0][7:0]",
                "DATA0_C[255:0][7:0]",
                "DATA0_D[255:0][7:0]",
                "DATA0_E[255:0][7:0]",
                "DATA0_F[255:0][7:0]",
                "DATA0_G[255:0][7:0]",
                "DATA0_H[255:0][7:0]",
                "DATA0_I[255:0][7:0]",
                "DATA0_J[255:0][7:0]",
                "DATA0_K[255:0][7:0]",
                "DATA0_L[255:0][7:0]",
                "DATA0_M[255:0][7:0]",
                "DATA0_N[255:0][7:0]",
                "DATA0_O[255:0][7:0]",
                "DATA0_P[255:0][7:0]",
                "DATA1_A[255:0][7:0]",
                "DATA1_B[255:0][7:0]",
                "DATA1_C[255:0][7:0]",
                "DATA1_D[255:0][7:0]",
                "DATA1_E[255:0][7:0]",
                "DATA1_F[255:0][7:0]",
                "DATA1_G[255:0][7:0]",
                "DATA1_H[255:0][7:0]",
                "DATA1_I[255:0][7:0]",
                "DATA1_J[255:0][7:0]",
                "DATA1_K[255:0][7:0]",
                "DATA1_L[255:0][7:0]",
                "DATA1_M[255:0][7:0]",
                "DATA1_N[255:0][7:0]",
                "DATA1_O[255:0][7:0]",
                "DATA1_P[255:0][7:0]",
                "MMU_TAGS[255:0][35:0]",
                "MMU_VALID[15:0][31:0]",
                "TAGSET_0[255:0][16:0]",
                "TAGSET_1[255:0][16:0]" ] in
    let DATA0_A = "DATA0_A[255:0][7:0]" in
    let DATA0_B = "DATA0_B[255:0][7:0]" in
    let DATA0_C = "DATA0_C[255:0][7:0]" in
    let DATA0_D = "DATA0_D[255:0][7:0]" in
    let DATA0_E = "DATA0_E[255:0][7:0]" in
    let DATA0_F = "DATA0_F[255:0][7:0]" in
    let DATA0_G = "DATA0_G[255:0][7:0]" in
    let DATA0_H = "DATA0_H[255:0][7:0]" in
    let DATA0_I = "DATA0_I[255:0][7:0]" in
    let DATA0_J = "DATA0_J[255:0][7:0]" in
    let DATA0_K = "DATA0_K[255:0][7:0]" in
    let DATA0_L = "DATA0_L[255:0][7:0]" in
    let DATA0_M = "DATA0_M[255:0][7:0]" in
    let DATA0_N = "DATA0_N[255:0][7:0]" in
    let DATA0_O = "DATA0_O[255:0][7:0]" in
    let DATA0_P = "DATA0_P[255:0][7:0]" in
    let DATA1_A = "DATA1_A[255:0][7:0]" in
    let DATA1_B = "DATA1_B[255:0][7:0]" in
    let DATA1_C = "DATA1_C[255:0][7:0]" in
    let DATA1_D = "DATA1_D[255:0][7:0]" in
    let DATA1_E = "DATA1_E[255:0][7:0]" in
    let DATA1_F = "DATA1_F[255:0][7:0]" in
    let DATA1_G = "DATA1_G[255:0][7:0]" in
    let DATA1_H = "DATA1_H[255:0][7:0]" in
    let DATA1_I = "DATA1_I[255:0][7:0]" in
    let DATA1_J = "DATA1_J[255:0][7:0]" in
    let DATA1_K = "DATA1_K[255:0][7:0]" in
    let DATA1_L = "DATA1_L[255:0][7:0]" in
    let DATA1_M = "DATA1_M[255:0][7:0]" in
    let DATA1_N = "DATA1_N[255:0][7:0]" in
    let DATA1_O = "DATA1_O[255:0][7:0]" in
    let DATA1_P = "DATA1_P[255:0][7:0]" in
    let MMU_TAGS = "MMU_TAGS[255:0][35:0]" in
    let MMU_VALID = "MMU_VALID[15:0][31:0]" in
    let TAGSET_0 = "TAGSET_0[255:0][16:0]" in
    let TAGSET_1 = "TAGSET_1[255:0][16:0]" in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        DEBUG_AE [("instance", "DBGAE"), ("src", "DCACHE.v:593")] [
                ("ACC_OK",["ACC_STAT[0]"]),
                ("DBG_HIT",["DBG_HIT"]),
                ("DBG_IN[38:0]",["DBG_IN[38:0]"]),
                ("ENBYTE[3:0]",["ENBYTE[3:0]"]),
                ("MMU_Q[19:0]",["MMU_Q[19:0]"]),
                ("READ",["READ"]),
                ("USER",["USER"]),
                ("VADR_R[29:0]",["VADR_R[31:2]"]),
                ("VIRTUELL",["VIRTUELL"]),
                ("WRITE",["WRITE"])],
        CA_MATCH [("instance", "DCA_COMPARE"), ("src", "DCACHE.v:483")] [
                ("ADDR[27:0]",["RADR[19:17]", "ADDR[24:0]"]),
                ("CA_HIT",["CA_HIT"]),
                ("CA_SET",["CA_SET"]),
                ("CFG[1:0]",["CFG[1:0]"]),
                ("CI",["CI"]),
                ("CVALID[23:0]",["CVALID[23:0]"]),
                ("DC_ILO",["RWVAL[2]"]),
                ("DRAMSZ[2:0]",["DRAMSZ[2:0]"]),
                ("ENDRAM",["ENDRAM"]),
                ("INVAL_L",["CINVAL[0]"]),
                ("IO_SPACE",["IO_SPACE"]),
                ("KDET",["KDET"]),
                ("KILL",["KILL"]),
                ("MMU_HIT",["MMU_HIT"]),
                ("TAG0[16:0]",["TAG0[16:0]"]),
                ("TAG1[16:0]",["TAG1[16:0]"]),
                ("UPDATE[23:0]",["UPDATE_C[23:0]"]),
                ("USE_CA",["USE_CA"]),
                ("WB_ACC",["WB_ACC"]),
                ("WRITE",["WRITE"])],
        DCA_CONTROL [("instance", "DCA_CTRL"), ("src", "DCACHE.v:505")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CA_SET",["CA_SET"]),
                ("CUPDATE",["CUPDATE"]),
                ("DAT_CV[23:0]",["DAT_CV[23:0]"]),
                ("DRAM_ACC",["DRAM_ACC"]),
                ("HIT_ALL",["HIT_ALL"]),
                ("INHIBIT",["INHIBIT"]),
                ("INIT_CA_RUN",["INIT_CA_RUN"]),
                ("INVAL_A",["CINVAL[1]"]),
                ("KILL",["KILL"]),
                ("MDONE",["MDONE"]),
                ("UPDATE[23:0]",["UPDATE_C[23:0]"]),
                ("USE_CA",["DRAM_A[1]"]),
                ("VADR_R[4:0]",["ADDR[7:3]"]),
                ("WADR_CV[4:0]",["WADR_CV[4:0]"]),
                ("WE_CV",["WE_CV"]),
                ("WRCRAM0",["WRCRAM0"]),
                ("WRCRAM1",["WRCRAM1"]),
                ("WRITE",["WRITE"]),
                ("WRSET0",["WRSET0"]),
                ("WRSET1",["WRSET1"])],
        DCACHE_SM [("instance", "DC_SM"), ("src", "DCACHE.v:422")] [
                ("ABORT",["ACC_STAT[1]"]),
                ("ABO_LEVEL1",["ACC_STAT[2]"]),
                ("ACC_OK",["ACC_STAT[0]"]),
                ("ADR_EQU",["ADR_EQU"]),
                ("AUX_DAT",["AUX_DAT"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CAPDAT[31:0]",["CAPDAT[31:0]"]),
                ("CA_HIT",["CA_HIT"]),
                ("CPU_OUT[16:0]",["DP_Q[60:44]"]),
                ("CUPDATE",["CUPDATE"]),
                ("DMA_CHK",["DMA_CHK"]),
                ("DMA_MUX",["DMA_MUX"]),
                ("DRAM_ACC",["DRAM_ACC"]),
                ("DRAM_WR",["DRAM_WR"]),
                ("ENWR",["ENWR"]),
                ("HIT_ALL",["HIT_ALL"]),
                ("HLDA",["HLDA"]),
                ("IACC_STAT[2:0]",["IACC_STAT[2:0]"]),
                ("ICTODC[3:0]",["ICTODC[3:0]"]),
                ("IC_PREQ",["IC_PREQ"]),
                ("IC_SIGS[1:0]",["IC_SIGS[1:0]"]),
                ("IC_VA[19:0]",["IC_VA[19:0]"]),
                ("IO_ACC",["IO_ACC"]),
                ("IO_RD",["IO_RD"]),
                ("IO_READY",["IO_READY"]),
                ("IO_SPACE",["IO_SPACE"]),
                ("IO_WR",["IO_WR"]),
                ("KDET",["KDET"]),
                ("KOMUX",["KOMUX"]),
                ("MDONE",["MDONE"]),
                ("MMU_DIN[23:0]",["MMU_DIN[23:0]"]),
                ("MMU_HIT",["MMU_HIT"]),
                ("NEW_PTB",["NEW_PTB"]),
                ("PD_MUX",["PD_MUX"]),
                ("PKEEP",["PKEEP"]),
                ("PROTECT",["ACC_STAT[3]"]),
                ("PROT_ERROR",["PROT_ERROR"]),
                ("PTB_ONE",["PTB_ONE"]),
                ("PTB_SEL",["PTB_SEL"]),
                ("PTB_WR",["PTB_WR"]),
                ("PTE_ADR[28:0]",["PTE_ADR[28:0]"]),
                ("PTE_DAT[19:0]",["PTE_DAT[19:0]"]),
                ("PTE_MUX",["PTE_MUX"]),
                ("PTE_STAT[1:0]",["PTE_STAT[1:0]"]),
                ("QWATWO",["QWATWO"]),
                ("READ",["READ"]),
                ("RMW",["RMW"]),
                ("RWVAL[1:0]",["RWVAL[1:0]"]),
                ("RWVFLAG",["RWVFLAG"]),
                ("SEL_PTB1",["SEL_PTB1"]),
                ("USER",["USER"]),
                ("USE_CA",["USE_CA"]),
                ("VADR_R[19:0]",["VADR_R[31:12]"]),
                ("VIRTUELL",["VIRTUELL"]),
                ("WB_ACC",["WB_ACC"]),
                ("WRITE",["WRITE"]),
                ("WR_MRAM",["WR_MRAM"]),
                ("ZTEST",["ZTEST"])],
        WRPORT [("instance", "DINMUX"), ("src", "DCACHE.v:309")] [
                ("CAP_Q[31:0]",["CAP_Q[31:0]"]),
                ("DADDR[1:0]",["DRAM_A[3:2]"]),
                ("DRAM_Q[127:0]",["DRAM_Q[127:0]"]),
                ("ENB[15:0]",["BE_SET[15:0]"]),
                ("ENBYTE[3:0]",["ENBYTE[3:0]"]),
                ("VADDR[1:0]",["VADR_R[3:2]"]),
                ("WDAT[127:0]",["DAT_SET[127:0]"]),
                ("WRDATA[31:0]",["WRDATA[31:0]"]),
                ("WRITE",["WRITE"])],
        FILTCMP [("instance", "FILT_CMP"), ("src", "DCACHE.v:605")] [
                ("ADR_EQU",["ADR_EQU"]),
                ("DRAMSZ[2:0]",["DRAMSZ[2:0]"]),
                ("DRAM_A[24:0]",["DRAM_A[28:4]"]),
                ("RADR[24:0]",["RADR[16:0]", "VADR_R[11:4]"]),
                ("TAGDAT[16:0]",["TAGDAT[16:0]"])],
        MMU_MATCH [("instance", "MMU_COMPARE"), ("src", "DCACHE.v:529")] [
                ("CI",["CI"]),
                ("IVAR[1:0]",["IVAR[1:0]"]),
                ("MCR_FLAGS[2:0]",["MCR_FLAGS[2:0]"]),
                ("MMU_HIT",["MMU_HIT"]),
                ("MMU_VA[15:0]",["MMU_Q[35:20]"]),
                ("MVALID[31:0]",["MVALID[31:0]"]),
                ("PROT_ERROR",["PROT_ERROR"]),
                ("READ",["READ"]),
                ("RMW",["RMW"]),
                ("SEL_PTB1",["SEL_PTB1"]),
                ("UPDATE[31:0]",["UPDATE_M[31:0]"]),
                ("USER",["USER"]),
                ("VADR_R[19:0]",["VADR_R[31:12]"]),
                ("VIRTUELL",["VIRTUELL"]),
                ("WRITE",["WRITE"])],
        MMU_UP [("instance", "MMU_CTRL"), ("src", "DCACHE.v:546")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("DAT_MV[31:0]",["DAT_MV[31:0]"]),
                ("IVAR",["IVAR[1]"]),
                ("MVALID[31:0]",["MVALID[31:0]"]),
                ("NEW_PTB",["NEW_PTB"]),
                ("NEW_PTB_RUN",["NEW_PTB_RUN"]),
                ("PTB1",["PTB_ONE"]),
                ("RADR_MV[3:0]",["RADR_MV[3:0]"]),
                ("UPDATE[31:0]",["UPDATE_M[31:0]"]),
                ("VADR[3:0]",["VADR[19:16]"]),
                ("VADR_R[3:0]",["VADR_R[19:16]"]),
                ("WADR_MV[3:0]",["WADR_MV[3:0]"]),
                ("WE_MV",["WEMV"]),
                ("WR_MRAM",["WR_MRAM"])],
        RD_ALIGNER [("instance", "RD_ALI"), ("src", "DCACHE.v:575")] [
                ("ACC_OK",["ACC_STAT[0]"]),
                ("AUX_QW",["AUX_QW"]),
                ("BCLK",["BCLK"]),
                ("CA_HIT",["CA_HIT"]),
                ("DP_DI[31:0]",["DP_DI[31:0]"]),
                ("PACKET[3:0]",["PACKET[3:0]"]),
                ("RDDATA[31:0]",["LAST_DAT[31:0]"]),
                ("REG_OUT",["CTRL_QW[0]"]),
                ("SIZE[1:0]",["SIZE[1:0]"])],
        _and 1 "DCACHE.v:239" ["VIRT_A"] ["TmP_232"] ["VIRTUELL"] ,
        _and 1 "DCACHE.v:241" ["USER"] ["TmP_233"] ["PSR_USER"] ,
        _and 1 "DCACHE.v:279" ["TmP_123"] ["IO_RD"] ["SIZE[0]"] ,
        _and 1 "DCACHE.v:279" ["TmP_111"] ["TmP_123"] ["SIZE[1]"] ,
        _memrd "DCACHE.v:339" 8 8 DATA0_A ["0bx"] ["VADR[11:4]"] ["TmP_119[7:0]"],
        _memrd "DCACHE.v:338" 8 8 DATA0_B ["0bx"] ["VADR[11:4]"] ["TmP_119[15:8]"],
        _memrd "DCACHE.v:337" 8 8 DATA0_C ["0bx"] ["VADR[11:4]"] ["TmP_119[23:16]"],
        _memrd "DCACHE.v:336" 8 8 DATA0_D ["0bx"] ["VADR[11:4]"] ["TmP_119[31:24]"],
        _memrd "DCACHE.v:335" 8 8 DATA0_E ["0bx"] ["VADR[11:4]"] ["TmP_119[39:32]"],
        _memrd "DCACHE.v:334" 8 8 DATA0_F ["0bx"] ["VADR[11:4]"] ["TmP_119[47:40]"],
        _memrd "DCACHE.v:333" 8 8 DATA0_G ["0bx"] ["VADR[11:4]"] ["TmP_119[55:48]"],
        _memrd "DCACHE.v:332" 8 8 DATA0_H ["0bx"] ["VADR[11:4]"] ["TmP_119[63:56]"],
        _memrd "DCACHE.v:331" 8 8 DATA0_I ["0bx"] ["VADR[11:4]"] ["TmP_119[71:64]"],
        _memrd "DCACHE.v:330" 8 8 DATA0_J ["0bx"] ["VADR[11:4]"] ["TmP_119[79:72]"],
        _memrd "DCACHE.v:329" 8 8 DATA0_K ["0bx"] ["VADR[11:4]"] ["TmP_119[87:80]"],
        _memrd "DCACHE.v:328" 8 8 DATA0_L ["0bx"] ["VADR[11:4]"] ["TmP_119[95:88]"],
        _memrd "DCACHE.v:327" 8 8 DATA0_M ["0bx"] ["VADR[11:4]"] ["TmP_119[103:96]"],
        _memrd "DCACHE.v:326" 8 8 DATA0_N ["0bx"] ["VADR[11:4]"] ["TmP_119[111:104]"],
        _memrd "DCACHE.v:325" 8 8 DATA0_O ["0bx"] ["VADR[11:4]"] ["TmP_119[119:112]"],
        _memrd "DCACHE.v:324" 8 8 DATA0_P ["0bx"] ["VADR[11:4]"] ["TmP_119[127:120]"],
        _memrd "DCACHE.v:390" 8 8 DATA1_A ["0bx"] ["VADR[11:4]"] ["TmP_120[7:0]"],
        _memrd "DCACHE.v:389" 8 8 DATA1_B ["0bx"] ["VADR[11:4]"] ["TmP_120[15:8]"],
        _memrd "DCACHE.v:388" 8 8 DATA1_C ["0bx"] ["VADR[11:4]"] ["TmP_120[23:16]"],
        _memrd "DCACHE.v:387" 8 8 DATA1_D ["0bx"] ["VADR[11:4]"] ["TmP_120[31:24]"],
        _memrd "DCACHE.v:386" 8 8 DATA1_E ["0bx"] ["VADR[11:4]"] ["TmP_120[39:32]"],
        _memrd "DCACHE.v:385" 8 8 DATA1_F ["0bx"] ["VADR[11:4]"] ["TmP_120[47:40]"],
        _memrd "DCACHE.v:384" 8 8 DATA1_G ["0bx"] ["VADR[11:4]"] ["TmP_120[55:48]"],
        _memrd "DCACHE.v:383" 8 8 DATA1_H ["0bx"] ["VADR[11:4]"] ["TmP_120[63:56]"],
        _memrd "DCACHE.v:382" 8 8 DATA1_I ["0bx"] ["VADR[11:4]"] ["TmP_120[71:64]"],
        _memrd "DCACHE.v:381" 8 8 DATA1_J ["0bx"] ["VADR[11:4]"] ["TmP_120[79:72]"],
        _memrd "DCACHE.v:380" 8 8 DATA1_K ["0bx"] ["VADR[11:4]"] ["TmP_120[87:80]"],
        _memrd "DCACHE.v:379" 8 8 DATA1_L ["0bx"] ["VADR[11:4]"] ["TmP_120[95:88]"],
        _memrd "DCACHE.v:378" 8 8 DATA1_M ["0bx"] ["VADR[11:4]"] ["TmP_120[103:96]"],
        _memrd "DCACHE.v:377" 8 8 DATA1_N ["0bx"] ["VADR[11:4]"] ["TmP_120[111:104]"],
        _memrd "DCACHE.v:376" 8 8 DATA1_O ["0bx"] ["VADR[11:4]"] ["TmP_120[119:112]"],
        _memrd "DCACHE.v:375" 8 8 DATA1_P ["0bx"] ["VADR[11:4]"] ["TmP_120[127:120]"],
        _memrd "DCACHE.v:571" 36 8 MMU_TAGS ["0bx"] ["VADR[19:12]"] ["TmP_117[35:0]"],
        _memrd "DCACHE.v:565" 32 4 MMU_VALID ["0bx"] ["RADR_MV[3:0]"] ["TmP_118[31:0]"],
        _memrd "DCACHE.v:297" 17 8 TAGSET_0 ["0bx"] ["TAGA[7:0]"] ["TmP_121[16:0]"],
        _memrd "DCACHE.v:303" 17 8 TAGSET_1 ["0bx"] ["TAGA[7:0]"] ["TmP_122[16:0]"],
        _memwr "DCACHE.v:368" 8 8 DATA0_A ["TmP_126[7:0]"] ["TmP_124[7:0]"] ["TmP_125[7:0]"],
        _memwr "DCACHE.v:367" 8 8 DATA0_B ["TmP_129[7:0]"] ["TmP_127[7:0]"] ["TmP_128[7:0]"],
        _memwr "DCACHE.v:366" 8 8 DATA0_C ["TmP_132[7:0]"] ["TmP_130[7:0]"] ["TmP_131[7:0]"],
        _memwr "DCACHE.v:365" 8 8 DATA0_D ["TmP_135[7:0]"] ["TmP_133[7:0]"] ["TmP_134[7:0]"],
        _memwr "DCACHE.v:364" 8 8 DATA0_E ["TmP_138[7:0]"] ["TmP_136[7:0]"] ["TmP_137[7:0]"],
        _memwr "DCACHE.v:363" 8 8 DATA0_F ["TmP_141[7:0]"] ["TmP_139[7:0]"] ["TmP_140[7:0]"],
        _memwr "DCACHE.v:362" 8 8 DATA0_G ["TmP_144[7:0]"] ["TmP_142[7:0]"] ["TmP_143[7:0]"],
        _memwr "DCACHE.v:361" 8 8 DATA0_H ["TmP_147[7:0]"] ["TmP_145[7:0]"] ["TmP_146[7:0]"],
        _memwr "DCACHE.v:360" 8 8 DATA0_I ["TmP_150[7:0]"] ["TmP_148[7:0]"] ["TmP_149[7:0]"],
        _memwr "DCACHE.v:359" 8 8 DATA0_J ["TmP_153[7:0]"] ["TmP_151[7:0]"] ["TmP_152[7:0]"],
        _memwr "DCACHE.v:358" 8 8 DATA0_K ["TmP_156[7:0]"] ["TmP_154[7:0]"] ["TmP_155[7:0]"],
        _memwr "DCACHE.v:357" 8 8 DATA0_L ["TmP_159[7:0]"] ["TmP_157[7:0]"] ["TmP_158[7:0]"],
        _memwr "DCACHE.v:356" 8 8 DATA0_M ["TmP_162[7:0]"] ["TmP_160[7:0]"] ["TmP_161[7:0]"],
        _memwr "DCACHE.v:355" 8 8 DATA0_N ["TmP_165[7:0]"] ["TmP_163[7:0]"] ["TmP_164[7:0]"],
        _memwr "DCACHE.v:354" 8 8 DATA0_O ["TmP_168[7:0]"] ["TmP_166[7:0]"] ["TmP_167[7:0]"],
        _memwr "DCACHE.v:353" 8 8 DATA0_P ["TmP_171[7:0]"] ["TmP_169[7:0]"] ["TmP_170[7:0]"],
        _memwr "DCACHE.v:419" 8 8 DATA1_A ["TmP_174[7:0]"] ["TmP_172[7:0]"] ["TmP_173[7:0]"],
        _memwr "DCACHE.v:418" 8 8 DATA1_B ["TmP_177[7:0]"] ["TmP_175[7:0]"] ["TmP_176[7:0]"],
        _memwr "DCACHE.v:417" 8 8 DATA1_C ["TmP_180[7:0]"] ["TmP_178[7:0]"] ["TmP_179[7:0]"],
        _memwr "DCACHE.v:416" 8 8 DATA1_D ["TmP_183[7:0]"] ["TmP_181[7:0]"] ["TmP_182[7:0]"],
        _memwr "DCACHE.v:415" 8 8 DATA1_E ["TmP_186[7:0]"] ["TmP_184[7:0]"] ["TmP_185[7:0]"],
        _memwr "DCACHE.v:414" 8 8 DATA1_F ["TmP_189[7:0]"] ["TmP_187[7:0]"] ["TmP_188[7:0]"],
        _memwr "DCACHE.v:413" 8 8 DATA1_G ["TmP_192[7:0]"] ["TmP_190[7:0]"] ["TmP_191[7:0]"],
        _memwr "DCACHE.v:412" 8 8 DATA1_H ["TmP_195[7:0]"] ["TmP_193[7:0]"] ["TmP_194[7:0]"],
        _memwr "DCACHE.v:411" 8 8 DATA1_I ["TmP_198[7:0]"] ["TmP_196[7:0]"] ["TmP_197[7:0]"],
        _memwr "DCACHE.v:410" 8 8 DATA1_J ["TmP_201[7:0]"] ["TmP_199[7:0]"] ["TmP_200[7:0]"],
        _memwr "DCACHE.v:409" 8 8 DATA1_K ["TmP_204[7:0]"] ["TmP_202[7:0]"] ["TmP_203[7:0]"],
        _memwr "DCACHE.v:408" 8 8 DATA1_L ["TmP_207[7:0]"] ["TmP_205[7:0]"] ["TmP_206[7:0]"],
        _memwr "DCACHE.v:407" 8 8 DATA1_M ["TmP_210[7:0]"] ["TmP_208[7:0]"] ["TmP_209[7:0]"],
        _memwr "DCACHE.v:406" 8 8 DATA1_N ["TmP_213[7:0]"] ["TmP_211[7:0]"] ["TmP_212[7:0]"],
        _memwr "DCACHE.v:405" 8 8 DATA1_O ["TmP_216[7:0]"] ["TmP_214[7:0]"] ["TmP_215[7:0]"],
        _memwr "DCACHE.v:404" 8 8 DATA1_P ["TmP_219[7:0]"] ["TmP_217[7:0]"] ["TmP_218[7:0]"],
        _memwr "DCACHE.v:573" 36 8 MMU_TAGS ["TmP_222[35:0]"] ["TmP_220[7:0]"] ["TmP_221[35:0]"],
        _memwr "DCACHE.v:567" 32 4 MMU_VALID ["TmP_225[31:0]"] ["TmP_223[3:0]"] ["TmP_224[31:0]"],
        _memwr "DCACHE.v:299" 17 8 TAGSET_0 ["TmP_228[16:0]"] ["TmP_226[7:0]"] ["TmP_227[16:0]"],
        _memwr "DCACHE.v:305" 17 8 TAGSET_1 ["TmP_231[16:0]"] ["TmP_229[7:0]"] ["TmP_230[16:0]"],
        _not 1 "DCACHE.v:239" ["TmP_232"] ["CINVAL[0]"],
        _not 1 "DCACHE.v:241" ["TmP_233"] ["MCR_FLAGS[3]"],
        _or 1 "DCACHE.v:247" ["INIT_RUN"] ["NEW_PTB_RUN"] ["INIT_CA_RUN"] ,
        _or 1 "DCACHE.v:249" ["TmP_234"] ["AUX_ALT"] ["AUX_DAT"] ,
        _or 1 "DCACHE.v:249" ["LAST_MUX"] ["TmP_234"] ["AUX_QW"] ,
        _or 1 "DCACHE.v:253" ["TmP_235"] ["DRAM_ACC"] ["PKEEP"] ,
        _or 1 "DCACHE.v:278" ["TmP_108"] ["DFF_QWEXT"] ["IO_RD"] ,
        _dff 8 "DCACHE.v:573" ["TmP_220[7:0]"] ["BCLK"] ["TmP_96[7:0]"],
        _dff 36 "DCACHE.v:573" ["TmP_221[35:0]"] ["BCLK"] ["TmP_97[35:0]"],
        _dff 36 "DCACHE.v:573" ["TmP_222[35:0]"] ["BCLK"] ["TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]"],
        _dff 36 "DCACHE.v:571" ["MMU_Q[35:0]"] ["BCLK"] ["TmP_117[35:0]"],
        _dff 4 "DCACHE.v:567" ["TmP_223[3:0]"] ["BCLK"] ["TmP_99[3:0]"],
        _dff 32 "DCACHE.v:567" ["TmP_224[31:0]"] ["BCLK"] ["TmP_100[31:0]"],
        _dff 32 "DCACHE.v:567" ["TmP_225[31:0]"] ["BCLK"] ["TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]"],
        _dff 32 "DCACHE.v:565" ["MVALID[31:0]"] ["BCLK"] ["TmP_118[31:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_217[7:0]"] ["BCLK"] ["TmP_93[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_218[7:0]"] ["BCLK"] ["TmP_94[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_219[7:0]"] ["BCLK"] ["TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_214[7:0]"] ["BCLK"] ["TmP_90[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_215[7:0]"] ["BCLK"] ["TmP_91[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_216[7:0]"] ["BCLK"] ["TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_211[7:0]"] ["BCLK"] ["TmP_87[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_212[7:0]"] ["BCLK"] ["TmP_88[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_213[7:0]"] ["BCLK"] ["TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_208[7:0]"] ["BCLK"] ["TmP_84[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_209[7:0]"] ["BCLK"] ["TmP_85[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_210[7:0]"] ["BCLK"] ["TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_205[7:0]"] ["BCLK"] ["TmP_81[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_206[7:0]"] ["BCLK"] ["TmP_82[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_207[7:0]"] ["BCLK"] ["TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_202[7:0]"] ["BCLK"] ["TmP_78[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_203[7:0]"] ["BCLK"] ["TmP_79[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_204[7:0]"] ["BCLK"] ["TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_199[7:0]"] ["BCLK"] ["TmP_75[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_200[7:0]"] ["BCLK"] ["TmP_76[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_201[7:0]"] ["BCLK"] ["TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_196[7:0]"] ["BCLK"] ["TmP_72[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_197[7:0]"] ["BCLK"] ["TmP_73[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_198[7:0]"] ["BCLK"] ["TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_193[7:0]"] ["BCLK"] ["TmP_69[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_194[7:0]"] ["BCLK"] ["TmP_70[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_195[7:0]"] ["BCLK"] ["TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_190[7:0]"] ["BCLK"] ["TmP_66[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_191[7:0]"] ["BCLK"] ["TmP_67[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_192[7:0]"] ["BCLK"] ["TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_187[7:0]"] ["BCLK"] ["TmP_63[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_188[7:0]"] ["BCLK"] ["TmP_64[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_189[7:0]"] ["BCLK"] ["TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_184[7:0]"] ["BCLK"] ["TmP_60[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_185[7:0]"] ["BCLK"] ["TmP_61[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_186[7:0]"] ["BCLK"] ["TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_181[7:0]"] ["BCLK"] ["TmP_57[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_182[7:0]"] ["BCLK"] ["TmP_58[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_183[7:0]"] ["BCLK"] ["TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_178[7:0]"] ["BCLK"] ["TmP_54[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_179[7:0]"] ["BCLK"] ["TmP_55[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_180[7:0]"] ["BCLK"] ["TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_175[7:0]"] ["BCLK"] ["TmP_51[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_176[7:0]"] ["BCLK"] ["TmP_52[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_177[7:0]"] ["BCLK"] ["TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]"],
        _dff 8 "DCACHE.v:401" ["TmP_172[7:0]"] ["BCLK"] ["TmP_48[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_173[7:0]"] ["BCLK"] ["TmP_49[7:0]"],
        _dff 8 "DCACHE.v:401" ["TmP_174[7:0]"] ["BCLK"] ["TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]"],
        _dff 128 "DCACHE.v:373" ["RDDATA1[127:0]"] ["BCLK"] ["TmP_120[127:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_169[7:0]"] ["BCLK"] ["TmP_45[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_170[7:0]"] ["BCLK"] ["TmP_46[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_171[7:0]"] ["BCLK"] ["TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_166[7:0]"] ["BCLK"] ["TmP_42[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_167[7:0]"] ["BCLK"] ["TmP_43[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_168[7:0]"] ["BCLK"] ["TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_163[7:0]"] ["BCLK"] ["TmP_39[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_164[7:0]"] ["BCLK"] ["TmP_40[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_165[7:0]"] ["BCLK"] ["TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_160[7:0]"] ["BCLK"] ["TmP_36[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_161[7:0]"] ["BCLK"] ["TmP_37[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_162[7:0]"] ["BCLK"] ["TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_157[7:0]"] ["BCLK"] ["TmP_33[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_158[7:0]"] ["BCLK"] ["TmP_34[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_159[7:0]"] ["BCLK"] ["TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_154[7:0]"] ["BCLK"] ["TmP_30[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_155[7:0]"] ["BCLK"] ["TmP_31[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_156[7:0]"] ["BCLK"] ["TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_151[7:0]"] ["BCLK"] ["TmP_27[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_152[7:0]"] ["BCLK"] ["TmP_28[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_153[7:0]"] ["BCLK"] ["TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_148[7:0]"] ["BCLK"] ["TmP_24[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_149[7:0]"] ["BCLK"] ["TmP_25[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_150[7:0]"] ["BCLK"] ["TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_145[7:0]"] ["BCLK"] ["TmP_21[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_146[7:0]"] ["BCLK"] ["TmP_22[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_147[7:0]"] ["BCLK"] ["TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_142[7:0]"] ["BCLK"] ["TmP_18[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_143[7:0]"] ["BCLK"] ["TmP_19[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_144[7:0]"] ["BCLK"] ["TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_139[7:0]"] ["BCLK"] ["TmP_15[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_140[7:0]"] ["BCLK"] ["TmP_16[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_141[7:0]"] ["BCLK"] ["TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_136[7:0]"] ["BCLK"] ["TmP_12[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_137[7:0]"] ["BCLK"] ["TmP_13[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_138[7:0]"] ["BCLK"] ["TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_133[7:0]"] ["BCLK"] ["TmP_9[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_134[7:0]"] ["BCLK"] ["TmP_10[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_135[7:0]"] ["BCLK"] ["TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_130[7:0]"] ["BCLK"] ["TmP_6[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_131[7:0]"] ["BCLK"] ["TmP_7[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_132[7:0]"] ["BCLK"] ["TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_127[7:0]"] ["BCLK"] ["TmP_3[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_128[7:0]"] ["BCLK"] ["TmP_4[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_129[7:0]"] ["BCLK"] ["TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]"],
        _dff 8 "DCACHE.v:350" ["TmP_124[7:0]"] ["BCLK"] ["TmP_0[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_125[7:0]"] ["BCLK"] ["TmP_1[7:0]"],
        _dff 8 "DCACHE.v:350" ["TmP_126[7:0]"] ["BCLK"] ["TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]"],
        _dff 128 "DCACHE.v:322" ["RDDATA0[127:0]"] ["BCLK"] ["TmP_119[127:0]"],
        _dff 8 "DCACHE.v:305" ["TmP_229[7:0]"] ["BCLK"] ["TmP_105[7:0]"],
        _dff 17 "DCACHE.v:305" ["TmP_230[16:0]"] ["BCLK"] ["TmP_106[16:0]"],
        _dff 17 "DCACHE.v:305" ["TmP_231[16:0]"] ["BCLK"] ["TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]"],
        _dff 17 "DCACHE.v:303" ["TAG1[16:0]"] ["BCLK"] ["TmP_122[16:0]"],
        _dff 8 "DCACHE.v:299" ["TmP_226[7:0]"] ["BCLK"] ["TmP_102[7:0]"],
        _dff 17 "DCACHE.v:299" ["TmP_227[16:0]"] ["BCLK"] ["TmP_103[16:0]"],
        _dff 17 "DCACHE.v:299" ["TmP_228[16:0]"] ["BCLK"] ["TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]"],
        _dff 17 "DCACHE.v:297" ["TAG0[16:0]"] ["BCLK"] ["TmP_121[16:0]"],
        _dff 32 "DCACHE.v:283" ["CAPDAT[31:0]"] ["BCLK"] ["TmP_109[31:0]"],
        _dff 36 "DCACHE.v:274" ["DRAM_DI[35:0]"] ["BCLK"] ["TmP_113[35:32]", "WRDATA[31:16]", "TmP_113[15:0]"],
        _dff 32 "DCACHE.v:274" ["VADR_R[31:0]"] ["BCLK"] ["VADR[31:0]"],
        _dff 1 "DCACHE.v:274" ["AUX_ALT"] ["BCLK"] ["TmP_108"],
        _dff 1 "DCACHE.v:274" ["DFF_QWEXT"] ["BCLK"] ["TmP_111"],
        _dff 32 "DCACHE.v:272" ["DFFE_IOR[31:0]"] ["BCLK"] ["TmP_110[31:0]"],
        _dff 29 "DCACHE.v:270" ["DRAM_A[28:0]"] ["BCLK"] ["TmP_112[28:0]"],
        _dff 32 "DCACHE.v:262" ["IO_A[31:0]"] ["BCLK"] ["TmP_114[31:0]"],
        _dff 4 "DCACHE.v:262" ["IO_BE[3:0]"] ["BCLK"] ["TmP_115[3:0]"],
        _dff 32 "DCACHE.v:262" ["IO_DI[31:0]"] ["BCLK"] ["TmP_116[31:0]"],
        _dff 8 "DCACHE.v:260" ["KOLLI_AR[7:0]"] ["BCLK"] ["KOLLI_A[7:0]"],
        _mux 1 "DCACHE.v:573" ["TmP_98[35]"] ["0b0"] ["0b1"] ["WR_MRAM"],
        _mux 36 "DCACHE.v:573" ["TmP_97[35:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["VADR_R[31:20]", "MMU_DIN[23:0]"] ["WR_MRAM"],
        _mux 8 "DCACHE.v:573" ["TmP_96[7:0]"] ["0bxxxxxxxx"] ["VADR_R[19:12]"] ["WR_MRAM"],
        _mux 1 "DCACHE.v:567" ["TmP_101[31]"] ["0b0"] ["0b1"] ["WEMV"],
        _mux 32 "DCACHE.v:567" ["TmP_100[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["DAT_MV[31:0]"] ["WEMV"],
        _mux 4 "DCACHE.v:567" ["TmP_99[3:0]"] ["0bxxxx"] ["WADR_MV[3:0]"] ["WEMV"],
        _mux 1 "DCACHE.v:402" ["TmP_95[7]"] ["0b0"] ["TmP_236[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_94[7:0]"] ["0bxxxxxxxx"] ["TmP_237[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_93[7:0]"] ["0bxxxxxxxx"] ["TmP_238[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_92[7]"] ["0b0"] ["TmP_239[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_91[7:0]"] ["0bxxxxxxxx"] ["TmP_240[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_90[7:0]"] ["0bxxxxxxxx"] ["TmP_241[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_89[7]"] ["0b0"] ["TmP_242[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_88[7:0]"] ["0bxxxxxxxx"] ["TmP_243[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_87[7:0]"] ["0bxxxxxxxx"] ["TmP_244[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_86[7]"] ["0b0"] ["TmP_245[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_85[7:0]"] ["0bxxxxxxxx"] ["TmP_246[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_84[7:0]"] ["0bxxxxxxxx"] ["TmP_247[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_83[7]"] ["0b0"] ["TmP_248[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_82[7:0]"] ["0bxxxxxxxx"] ["TmP_249[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_81[7:0]"] ["0bxxxxxxxx"] ["TmP_250[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_80[7]"] ["0b0"] ["TmP_251[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_79[7:0]"] ["0bxxxxxxxx"] ["TmP_252[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_78[7:0]"] ["0bxxxxxxxx"] ["TmP_253[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_77[7]"] ["0b0"] ["TmP_254[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_76[7:0]"] ["0bxxxxxxxx"] ["TmP_255[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_75[7:0]"] ["0bxxxxxxxx"] ["TmP_256[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_74[7]"] ["0b0"] ["TmP_257[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_73[7:0]"] ["0bxxxxxxxx"] ["TmP_258[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_72[7:0]"] ["0bxxxxxxxx"] ["TmP_259[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_71[7]"] ["0b0"] ["TmP_260[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_70[7:0]"] ["0bxxxxxxxx"] ["TmP_261[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_69[7:0]"] ["0bxxxxxxxx"] ["TmP_262[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_68[7]"] ["0b0"] ["TmP_263[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_67[7:0]"] ["0bxxxxxxxx"] ["TmP_264[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_66[7:0]"] ["0bxxxxxxxx"] ["TmP_265[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_65[7]"] ["0b0"] ["TmP_266[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_64[7:0]"] ["0bxxxxxxxx"] ["TmP_267[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_63[7:0]"] ["0bxxxxxxxx"] ["TmP_268[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_62[7]"] ["0b0"] ["TmP_269[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_61[7:0]"] ["0bxxxxxxxx"] ["TmP_270[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_60[7:0]"] ["0bxxxxxxxx"] ["TmP_271[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_59[7]"] ["0b0"] ["TmP_272[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_58[7:0]"] ["0bxxxxxxxx"] ["TmP_273[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_57[7:0]"] ["0bxxxxxxxx"] ["TmP_274[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_56[7]"] ["0b0"] ["TmP_275[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_55[7:0]"] ["0bxxxxxxxx"] ["TmP_276[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_54[7:0]"] ["0bxxxxxxxx"] ["TmP_277[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_53[7]"] ["0b0"] ["TmP_278[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_52[7:0]"] ["0bxxxxxxxx"] ["TmP_279[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_51[7:0]"] ["0bxxxxxxxx"] ["TmP_280[7:0]"] ["WRSET1"],
        _mux 1 "DCACHE.v:402" ["TmP_50[7]"] ["0b0"] ["TmP_281[7]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_49[7:0]"] ["0bxxxxxxxx"] ["TmP_282[7:0]"] ["WRSET1"],
        _mux 8 "DCACHE.v:402" ["TmP_48[7:0]"] ["0bxxxxxxxx"] ["TmP_283[7:0]"] ["WRSET1"],
        _pmux 32 4 "DCACHE.v:398|DCACHE.v:394" ["SET_DAT1[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["RDDATA1[31:0]", "RDDATA1[63:32]", "RDDATA1[95:64]", "RDDATA1[127:96]"] ["TmP_287", "TmP_286", "TmP_285", "TmP_284"],
        _mux 1 "DCACHE.v:353" ["TmP_236[7]"] ["0b0"] ["0b1"] ["BE_SET[15]"],
        _mux 1 "DCACHE.v:351" ["TmP_47[7]"] ["0b0"] ["TmP_236[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:353" ["TmP_237[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[127:120]"] ["BE_SET[15]"],
        _mux 8 "DCACHE.v:351" ["TmP_46[7:0]"] ["0bxxxxxxxx"] ["TmP_237[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:353" ["TmP_238[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[15]"],
        _mux 8 "DCACHE.v:351" ["TmP_45[7:0]"] ["0bxxxxxxxx"] ["TmP_238[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:354" ["TmP_239[7]"] ["0b0"] ["0b1"] ["BE_SET[14]"],
        _mux 1 "DCACHE.v:351" ["TmP_44[7]"] ["0b0"] ["TmP_239[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:354" ["TmP_240[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[119:112]"] ["BE_SET[14]"],
        _mux 8 "DCACHE.v:351" ["TmP_43[7:0]"] ["0bxxxxxxxx"] ["TmP_240[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:354" ["TmP_241[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[14]"],
        _mux 8 "DCACHE.v:351" ["TmP_42[7:0]"] ["0bxxxxxxxx"] ["TmP_241[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:355" ["TmP_242[7]"] ["0b0"] ["0b1"] ["BE_SET[13]"],
        _mux 1 "DCACHE.v:351" ["TmP_41[7]"] ["0b0"] ["TmP_242[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:355" ["TmP_243[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[111:104]"] ["BE_SET[13]"],
        _mux 8 "DCACHE.v:351" ["TmP_40[7:0]"] ["0bxxxxxxxx"] ["TmP_243[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:355" ["TmP_244[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[13]"],
        _mux 8 "DCACHE.v:351" ["TmP_39[7:0]"] ["0bxxxxxxxx"] ["TmP_244[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:356" ["TmP_245[7]"] ["0b0"] ["0b1"] ["BE_SET[12]"],
        _mux 1 "DCACHE.v:351" ["TmP_38[7]"] ["0b0"] ["TmP_245[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:356" ["TmP_246[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[103:96]"] ["BE_SET[12]"],
        _mux 8 "DCACHE.v:351" ["TmP_37[7:0]"] ["0bxxxxxxxx"] ["TmP_246[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:356" ["TmP_247[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[12]"],
        _mux 8 "DCACHE.v:351" ["TmP_36[7:0]"] ["0bxxxxxxxx"] ["TmP_247[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:357" ["TmP_248[7]"] ["0b0"] ["0b1"] ["BE_SET[11]"],
        _mux 1 "DCACHE.v:351" ["TmP_35[7]"] ["0b0"] ["TmP_248[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:357" ["TmP_249[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[95:88]"] ["BE_SET[11]"],
        _mux 8 "DCACHE.v:351" ["TmP_34[7:0]"] ["0bxxxxxxxx"] ["TmP_249[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:357" ["TmP_250[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[11]"],
        _mux 8 "DCACHE.v:351" ["TmP_33[7:0]"] ["0bxxxxxxxx"] ["TmP_250[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:358" ["TmP_251[7]"] ["0b0"] ["0b1"] ["BE_SET[10]"],
        _mux 1 "DCACHE.v:351" ["TmP_32[7]"] ["0b0"] ["TmP_251[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:358" ["TmP_252[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[87:80]"] ["BE_SET[10]"],
        _mux 8 "DCACHE.v:351" ["TmP_31[7:0]"] ["0bxxxxxxxx"] ["TmP_252[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:358" ["TmP_253[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[10]"],
        _mux 8 "DCACHE.v:351" ["TmP_30[7:0]"] ["0bxxxxxxxx"] ["TmP_253[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:359" ["TmP_254[7]"] ["0b0"] ["0b1"] ["BE_SET[9]"],
        _mux 1 "DCACHE.v:351" ["TmP_29[7]"] ["0b0"] ["TmP_254[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:359" ["TmP_255[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[79:72]"] ["BE_SET[9]"],
        _mux 8 "DCACHE.v:351" ["TmP_28[7:0]"] ["0bxxxxxxxx"] ["TmP_255[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:359" ["TmP_256[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[9]"],
        _mux 8 "DCACHE.v:351" ["TmP_27[7:0]"] ["0bxxxxxxxx"] ["TmP_256[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:360" ["TmP_257[7]"] ["0b0"] ["0b1"] ["BE_SET[8]"],
        _mux 1 "DCACHE.v:351" ["TmP_26[7]"] ["0b0"] ["TmP_257[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:360" ["TmP_258[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[71:64]"] ["BE_SET[8]"],
        _mux 8 "DCACHE.v:351" ["TmP_25[7:0]"] ["0bxxxxxxxx"] ["TmP_258[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:360" ["TmP_259[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[8]"],
        _mux 8 "DCACHE.v:351" ["TmP_24[7:0]"] ["0bxxxxxxxx"] ["TmP_259[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:361" ["TmP_260[7]"] ["0b0"] ["0b1"] ["BE_SET[7]"],
        _mux 1 "DCACHE.v:351" ["TmP_23[7]"] ["0b0"] ["TmP_260[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:361" ["TmP_261[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[63:56]"] ["BE_SET[7]"],
        _mux 8 "DCACHE.v:351" ["TmP_22[7:0]"] ["0bxxxxxxxx"] ["TmP_261[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:361" ["TmP_262[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[7]"],
        _mux 8 "DCACHE.v:351" ["TmP_21[7:0]"] ["0bxxxxxxxx"] ["TmP_262[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:362" ["TmP_263[7]"] ["0b0"] ["0b1"] ["BE_SET[6]"],
        _mux 1 "DCACHE.v:351" ["TmP_20[7]"] ["0b0"] ["TmP_263[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:362" ["TmP_264[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[55:48]"] ["BE_SET[6]"],
        _mux 8 "DCACHE.v:351" ["TmP_19[7:0]"] ["0bxxxxxxxx"] ["TmP_264[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:362" ["TmP_265[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[6]"],
        _mux 8 "DCACHE.v:351" ["TmP_18[7:0]"] ["0bxxxxxxxx"] ["TmP_265[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:363" ["TmP_266[7]"] ["0b0"] ["0b1"] ["BE_SET[5]"],
        _mux 1 "DCACHE.v:351" ["TmP_17[7]"] ["0b0"] ["TmP_266[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:363" ["TmP_267[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[47:40]"] ["BE_SET[5]"],
        _mux 8 "DCACHE.v:351" ["TmP_16[7:0]"] ["0bxxxxxxxx"] ["TmP_267[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:363" ["TmP_268[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[5]"],
        _mux 8 "DCACHE.v:351" ["TmP_15[7:0]"] ["0bxxxxxxxx"] ["TmP_268[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:364" ["TmP_269[7]"] ["0b0"] ["0b1"] ["BE_SET[4]"],
        _mux 1 "DCACHE.v:351" ["TmP_14[7]"] ["0b0"] ["TmP_269[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:364" ["TmP_270[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[39:32]"] ["BE_SET[4]"],
        _mux 8 "DCACHE.v:351" ["TmP_13[7:0]"] ["0bxxxxxxxx"] ["TmP_270[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:364" ["TmP_271[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[4]"],
        _mux 8 "DCACHE.v:351" ["TmP_12[7:0]"] ["0bxxxxxxxx"] ["TmP_271[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:365" ["TmP_272[7]"] ["0b0"] ["0b1"] ["BE_SET[3]"],
        _mux 1 "DCACHE.v:351" ["TmP_11[7]"] ["0b0"] ["TmP_272[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:365" ["TmP_273[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[31:24]"] ["BE_SET[3]"],
        _mux 8 "DCACHE.v:351" ["TmP_10[7:0]"] ["0bxxxxxxxx"] ["TmP_273[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:365" ["TmP_274[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[3]"],
        _mux 8 "DCACHE.v:351" ["TmP_9[7:0]"] ["0bxxxxxxxx"] ["TmP_274[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:366" ["TmP_275[7]"] ["0b0"] ["0b1"] ["BE_SET[2]"],
        _mux 1 "DCACHE.v:351" ["TmP_8[7]"] ["0b0"] ["TmP_275[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:366" ["TmP_276[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[23:16]"] ["BE_SET[2]"],
        _mux 8 "DCACHE.v:351" ["TmP_7[7:0]"] ["0bxxxxxxxx"] ["TmP_276[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:366" ["TmP_277[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[2]"],
        _mux 8 "DCACHE.v:351" ["TmP_6[7:0]"] ["0bxxxxxxxx"] ["TmP_277[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:367" ["TmP_278[7]"] ["0b0"] ["0b1"] ["BE_SET[1]"],
        _mux 1 "DCACHE.v:351" ["TmP_5[7]"] ["0b0"] ["TmP_278[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:367" ["TmP_279[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[15:8]"] ["BE_SET[1]"],
        _mux 8 "DCACHE.v:351" ["TmP_4[7:0]"] ["0bxxxxxxxx"] ["TmP_279[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:367" ["TmP_280[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[1]"],
        _mux 8 "DCACHE.v:351" ["TmP_3[7:0]"] ["0bxxxxxxxx"] ["TmP_280[7:0]"] ["WRSET0"],
        _mux 1 "DCACHE.v:368" ["TmP_281[7]"] ["0b0"] ["0b1"] ["BE_SET[0]"],
        _mux 1 "DCACHE.v:351" ["TmP_2[7]"] ["0b0"] ["TmP_281[7]"] ["WRSET0"],
        _mux 8 "DCACHE.v:368" ["TmP_282[7:0]"] ["0bxxxxxxxx"] ["DAT_SET[7:0]"] ["BE_SET[0]"],
        _mux 8 "DCACHE.v:351" ["TmP_1[7:0]"] ["0bxxxxxxxx"] ["TmP_282[7:0]"] ["WRSET0"],
        _mux 8 "DCACHE.v:368" ["TmP_283[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["BE_SET[0]"],
        _mux 8 "DCACHE.v:351" ["TmP_0[7:0]"] ["0bxxxxxxxx"] ["TmP_283[7:0]"] ["WRSET0"],
        _pmux 32 4 "DCACHE.v:347|DCACHE.v:343" ["SET_DAT0[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["RDDATA0[31:0]", "RDDATA0[63:32]", "RDDATA0[95:64]", "RDDATA0[127:96]"] ["TmP_287", "TmP_286", "TmP_285", "TmP_284"],
        _eq 2 "DCACHE.v:347|DCACHE.v:343" ["TmP_284"] ["VADR_R[3:2]"] ["0b11"] ,
        _eq 2 "DCACHE.v:346|DCACHE.v:343" ["TmP_285"] ["VADR_R[3:2]"] ["0b10"] ,
        _eq 2 "DCACHE.v:345|DCACHE.v:343" ["TmP_286"] ["VADR_R[3:2]"] ["0b01"] ,
        _logic_not 2 "DCACHE.v:344|DCACHE.v:343" ["TmP_287"] ["VADR_R[3:2]"],
        _mux 1 "DCACHE.v:305" ["TmP_107[16]"] ["0b0"] ["0b1"] ["WRCRAM1"],
        _mux 17 "DCACHE.v:305" ["TmP_106[16:0]"] ["0bxxxxxxxxxxxxxxxxx"] ["TAGDAT[16:0]"] ["WRCRAM1"],
        _mux 8 "DCACHE.v:305" ["TmP_105[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["WRCRAM1"],
        _mux 1 "DCACHE.v:299" ["TmP_104[16]"] ["0b0"] ["0b1"] ["WRCRAM0"],
        _mux 17 "DCACHE.v:299" ["TmP_103[16:0]"] ["0bxxxxxxxxxxxxxxxxx"] ["TAGDAT[16:0]"] ["WRCRAM0"],
        _mux 8 "DCACHE.v:299" ["TmP_102[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["WRCRAM0"],
        _mux 32 "DCACHE.v:283" ["TmP_109[31:0]"] ["CAPDAT[31:0]"] ["CAP_Q[31:0]"] ["MDONE"],
        _mux 32 "DCACHE.v:272" ["TmP_110[31:0]"] ["DFFE_IOR[31:0]"] ["IO_Q[31:0]"] ["IO_RD"],
        _mux 29 "DCACHE.v:270" ["TmP_112[28:0]"] ["ADR_MX[28:0]"] ["DRAM_A[28:0]"] ["TmP_235"],
        _mux 32 "DCACHE.v:263" ["TmP_116[31:0]"] ["IO_DI[31:0]"] ["WRDATA[31:0]"] ["IO_ACC"],
        _mux 4 "DCACHE.v:263" ["TmP_115[3:0]"] ["IO_BE[3:0]"] ["ENBYTE[3:0]"] ["IO_ACC"],
        _mux 32 "DCACHE.v:263" ["TmP_114[31:0]"] ["IO_A[31:0]"] ["RADR[19:0]", "VADR_R[11:3]", "XADDR2", "VADR_R[1:0]"] ["IO_ACC"],
        _mux 32 "DCACHE.v:229" ["ALT_DAT[31:0]"] ["CAPDAT[31:0]"] ["DFFE_IOR[31:0]"] ["AUX_ALT"],
        _mux 20 "DCACHE.v:231" ["RADR[19:0]"] ["VADR_R[31:12]"] ["MMU_Q[19:0]"] ["VIRT_A"],
        _mux 29 "DCACHE.v:233" ["ADR_MX[28:0]"] ["RADR[16:0]", "VADR_R[11:2]", "USE_CA", "CA_SET"] ["PTE_ADR[28:0]"] ["PTE_MUX"],
        _mux 25 "DCACHE.v:235" ["KOLLI_A[24:0]"] ["DRAM_A[28:4]"] ["DMA_AA[24:0]"] ["DMA_MUX"],
        _mux 32 "DCACHE.v:237" ["SET_DAT[31:0]"] ["SET_DAT0[31:0]"] ["SET_DAT1[31:0]"] ["CA_SET"],
        _mux 25 "DCACHE.v:243" ["ADDR[24:0]"] ["RADR[16:0]", "VADR_R[11:4]"] ["KOLLI_A[24:8]", "KOLLI_AR[7:0]"] ["KDET"],
        _mux 8 "DCACHE.v:245" ["TAGA[7:0]"] ["VADR[11:4]"] ["KOLLI_A[7:0]"] ["KOMUX"],
        _mux 32 "DCACHE.v:251" ["LAST_DAT[31:0]"] ["SET_DAT[31:0]"] ["ALT_DAT[31:0]"] ["LAST_MUX"],
        _mux 4 "DCACHE.v:276" ["TmP_113[35:32]"] ["ENBYTE[3:0]"] ["PTE_DAT[19:16]"] ["PD_MUX"],
        _mux 16 "DCACHE.v:277" ["TmP_113[15:0]"] ["WRDATA[15:0]"] ["PTE_DAT[15:0]"] ["PD_MUX"],
        _xor 1 "DCACHE.v:258" ["XADDR2"] ["VADR_R[2]"] ["CTRL_QW[1]"] ,
        NEU_VALID [("instance", "VALID_RAM"), ("src", "DCACHE.v:287")] [
                ("BCLK",["BCLK"]),
                ("RADR[4:0]",["TAGA[7:3]"]),
                ("VALIN[23:0]",["DAT_CV[23:0]"]),
                ("VALOUT[23:0]",["CVALID[23:0]"]),
                ("WADR[4:0]",["WADR_CV[4:0]"]),
                ("WREN",["WE_CV"])],
        WR_ALIGNER [("instance", "WR_ALI"), ("src", "DCACHE.v:586")] [
                ("DP_Q[63:0]",["DP_Q[63:0]"]),
                ("ENBYTE[3:0]",["ENBYTE[3:0]"]),
                ("PACKET[3:0]",["PACKET[3:0]"]),
                ("SIZE[1:0]",["SIZE[1:0]"]),
                ("WRDATA[31:0]",["WRDATA[31:0]"])],
        _buf 2 "" ["ACC_STAT[5:4]"] ["CA_HIT", "IO_ACC"],
        _buf 31 "" ["TmP_101[30:0]"] ["TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]", "TmP_101[31]"],
        _buf 16 "" ["TmP_104[15:0]"] ["TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]", "TmP_104[16]"],
        _buf 16 "" ["TmP_107[15:0]"] ["TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]", "TmP_107[16]"],
        _buf 7 "" ["TmP_11[6:0]"] ["TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]", "TmP_11[7]"],
        _buf 16 "" ["TmP_113[31:16]"] ["WRDATA[31:16]"],
        _buf 7 "" ["TmP_14[6:0]"] ["TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]", "TmP_14[7]"],
        _buf 7 "" ["TmP_17[6:0]"] ["TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]", "TmP_17[7]"],
        _buf 7 "" ["TmP_2[6:0]"] ["TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]"],
        _buf 7 "" ["TmP_20[6:0]"] ["TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]", "TmP_20[7]"],
        _buf 7 "" ["TmP_23[6:0]"] ["TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]", "TmP_23[7]"],
        _buf 7 "" ["TmP_236[6:0]"] ["TmP_236[7]", "TmP_236[7]", "TmP_236[7]", "TmP_236[7]", "TmP_236[7]", "TmP_236[7]", "TmP_236[7]"],
        _buf 7 "" ["TmP_239[6:0]"] ["TmP_239[7]", "TmP_239[7]", "TmP_239[7]", "TmP_239[7]", "TmP_239[7]", "TmP_239[7]", "TmP_239[7]"],
        _buf 7 "" ["TmP_242[6:0]"] ["TmP_242[7]", "TmP_242[7]", "TmP_242[7]", "TmP_242[7]", "TmP_242[7]", "TmP_242[7]", "TmP_242[7]"],
        _buf 7 "" ["TmP_245[6:0]"] ["TmP_245[7]", "TmP_245[7]", "TmP_245[7]", "TmP_245[7]", "TmP_245[7]", "TmP_245[7]", "TmP_245[7]"],
        _buf 7 "" ["TmP_248[6:0]"] ["TmP_248[7]", "TmP_248[7]", "TmP_248[7]", "TmP_248[7]", "TmP_248[7]", "TmP_248[7]", "TmP_248[7]"],
        _buf 7 "" ["TmP_251[6:0]"] ["TmP_251[7]", "TmP_251[7]", "TmP_251[7]", "TmP_251[7]", "TmP_251[7]", "TmP_251[7]", "TmP_251[7]"],
        _buf 7 "" ["TmP_254[6:0]"] ["TmP_254[7]", "TmP_254[7]", "TmP_254[7]", "TmP_254[7]", "TmP_254[7]", "TmP_254[7]", "TmP_254[7]"],
        _buf 7 "" ["TmP_257[6:0]"] ["TmP_257[7]", "TmP_257[7]", "TmP_257[7]", "TmP_257[7]", "TmP_257[7]", "TmP_257[7]", "TmP_257[7]"],
        _buf 7 "" ["TmP_26[6:0]"] ["TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]", "TmP_26[7]"],
        _buf 7 "" ["TmP_260[6:0]"] ["TmP_260[7]", "TmP_260[7]", "TmP_260[7]", "TmP_260[7]", "TmP_260[7]", "TmP_260[7]", "TmP_260[7]"],
        _buf 7 "" ["TmP_263[6:0]"] ["TmP_263[7]", "TmP_263[7]", "TmP_263[7]", "TmP_263[7]", "TmP_263[7]", "TmP_263[7]", "TmP_263[7]"],
        _buf 7 "" ["TmP_266[6:0]"] ["TmP_266[7]", "TmP_266[7]", "TmP_266[7]", "TmP_266[7]", "TmP_266[7]", "TmP_266[7]", "TmP_266[7]"],
        _buf 7 "" ["TmP_269[6:0]"] ["TmP_269[7]", "TmP_269[7]", "TmP_269[7]", "TmP_269[7]", "TmP_269[7]", "TmP_269[7]", "TmP_269[7]"],
        _buf 7 "" ["TmP_272[6:0]"] ["TmP_272[7]", "TmP_272[7]", "TmP_272[7]", "TmP_272[7]", "TmP_272[7]", "TmP_272[7]", "TmP_272[7]"],
        _buf 7 "" ["TmP_275[6:0]"] ["TmP_275[7]", "TmP_275[7]", "TmP_275[7]", "TmP_275[7]", "TmP_275[7]", "TmP_275[7]", "TmP_275[7]"],
        _buf 7 "" ["TmP_278[6:0]"] ["TmP_278[7]", "TmP_278[7]", "TmP_278[7]", "TmP_278[7]", "TmP_278[7]", "TmP_278[7]", "TmP_278[7]"],
        _buf 7 "" ["TmP_281[6:0]"] ["TmP_281[7]", "TmP_281[7]", "TmP_281[7]", "TmP_281[7]", "TmP_281[7]", "TmP_281[7]", "TmP_281[7]"],
        _buf 7 "" ["TmP_29[6:0]"] ["TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]"],
        _buf 7 "" ["TmP_32[6:0]"] ["TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]", "TmP_32[7]"],
        _buf 7 "" ["TmP_35[6:0]"] ["TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]", "TmP_35[7]"],
        _buf 7 "" ["TmP_38[6:0]"] ["TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]", "TmP_38[7]"],
        _buf 7 "" ["TmP_41[6:0]"] ["TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]", "TmP_41[7]"],
        _buf 7 "" ["TmP_44[6:0]"] ["TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]", "TmP_44[7]"],
        _buf 7 "" ["TmP_47[6:0]"] ["TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]", "TmP_47[7]"],
        _buf 7 "" ["TmP_5[6:0]"] ["TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]"],
        _buf 7 "" ["TmP_50[6:0]"] ["TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]", "TmP_50[7]"],
        _buf 7 "" ["TmP_53[6:0]"] ["TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]", "TmP_53[7]"],
        _buf 7 "" ["TmP_56[6:0]"] ["TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]", "TmP_56[7]"],
        _buf 7 "" ["TmP_59[6:0]"] ["TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]", "TmP_59[7]"],
        _buf 7 "" ["TmP_62[6:0]"] ["TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]", "TmP_62[7]"],
        _buf 7 "" ["TmP_65[6:0]"] ["TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]", "TmP_65[7]"],
        _buf 7 "" ["TmP_68[6:0]"] ["TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]", "TmP_68[7]"],
        _buf 7 "" ["TmP_71[6:0]"] ["TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]", "TmP_71[7]"],
        _buf 7 "" ["TmP_74[6:0]"] ["TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]", "TmP_74[7]"],
        _buf 7 "" ["TmP_77[6:0]"] ["TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]", "TmP_77[7]"],
        _buf 7 "" ["TmP_8[6:0]"] ["TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]", "TmP_8[7]"],
        _buf 7 "" ["TmP_80[6:0]"] ["TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]", "TmP_80[7]"],
        _buf 7 "" ["TmP_83[6:0]"] ["TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]", "TmP_83[7]"],
        _buf 7 "" ["TmP_86[6:0]"] ["TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]", "TmP_86[7]"],
        _buf 7 "" ["TmP_89[6:0]"] ["TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]", "TmP_89[7]"],
        _buf 7 "" ["TmP_92[6:0]"] ["TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]", "TmP_92[7]"],
        _buf 7 "" ["TmP_95[6:0]"] ["TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]", "TmP_95[7]"],
        _buf 35 "" ["TmP_98[34:0]"] ["TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]", "TmP_98[35]"]
    ] in
    PINST "draw_hier DCACHE" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DCACHE_SM {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "IO_SPACE",
                 "MDONE",
                 "IO_READY",
                 "MMU_HIT",
                 "CA_HIT",
                 "READ",
                 "WRITE",
                 "ZTEST",
                 "RMW",
                 "CAPDAT[31:0]",
                 "VADR_R[19:0]",
                 "IC_VA[19:0]",
                 "USE_CA",
                 "PTB_WR",
                 "PTB_SEL",
                 "SEL_PTB1",
                 "CPU_OUT[16:0]",
                 "USER",
                 "PROT_ERROR",
                 "WB_ACC",
                 "ENWR",
                 "ADR_EQU",
                 "IC_PREQ",
                 "DMA_CHK",
                 "ICTODC[3:0]",
                 "RWVAL[1:0]",
                 "VIRTUELL",
                 "QWATWO" ] in
    let outs = [ "DRAM_ACC",
                 "DRAM_WR",
                 "IO_ACC",
                 "IO_RD",
                 "IO_WR",
                 "PTE_MUX",
                 "PD_MUX",
                 "PKEEP",
                 "PTE_ADR[28:0]",
                 "PTE_DAT[19:0]",
                 "HIT_ALL",
                 "ACC_OK",
                 "ABORT",
                 "PROTECT",
                 "IACC_STAT[2:0]",
                 "ABO_LEVEL1",
                 "WR_MRAM",
                 "CUPDATE",
                 "AUX_DAT",
                 "NEW_PTB",
                 "PTB_ONE",
                 "MMU_DIN[23:0]",
                 "IC_SIGS[1:0]",
                 "KOMUX",
                 "KDET",
                 "DMA_MUX",
                 "HLDA",
                 "RWVFLAG",
                 "PTE_STAT[1:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10[2:0]",
                 "TmP_100",
                 "TmP_101",
                 "TmP_102",
                 "TmP_103",
                 "TmP_104",
                 "TmP_105",
                 "TmP_106",
                 "TmP_107",
                 "TmP_108",
                 "TmP_109",
                 "TmP_11[16:0]",
                 "TmP_110",
                 "TmP_111",
                 "TmP_112",
                 "TmP_113",
                 "TmP_114",
                 "TmP_115",
                 "TmP_116",
                 "TmP_117",
                 "TmP_118",
                 "TmP_119",
                 "TmP_12[16:0]",
                 "TmP_120",
                 "TmP_121",
                 "TmP_122",
                 "TmP_123",
                 "TmP_124",
                 "TmP_125",
                 "TmP_126",
                 "TmP_127",
                 "TmP_128",
                 "TmP_129",
                 "TmP_13",
                 "TmP_130",
                 "TmP_131",
                 "TmP_132",
                 "TmP_133",
                 "TmP_134",
                 "TmP_135",
                 "TmP_136",
                 "TmP_137",
                 "TmP_138",
                 "TmP_139",
                 "TmP_14",
                 "TmP_140",
                 "TmP_141",
                 "TmP_142",
                 "TmP_143",
                 "TmP_144",
                 "TmP_145",
                 "TmP_146",
                 "TmP_147",
                 "TmP_148",
                 "TmP_149",
                 "TmP_15",
                 "TmP_150",
                 "TmP_151",
                 "TmP_152",
                 "TmP_153",
                 "TmP_154",
                 "TmP_155",
                 "TmP_156",
                 "TmP_157",
                 "TmP_158",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7[2:0]",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75",
                 "TmP_76",
                 "TmP_77",
                 "TmP_78",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82",
                 "TmP_83",
                 "TmP_84",
                 "TmP_85",
                 "TmP_86",
                 "TmP_87",
                 "TmP_88",
                 "TmP_89",
                 "TmP_9[1:0]",
                 "TmP_90",
                 "TmP_91",
                 "TmP_92",
                 "TmP_93",
                 "TmP_94",
                 "TmP_95",
                 "TmP_96",
                 "TmP_97",
                 "TmP_98",
                 "TmP_99",
                 "acc_level[1:0]",
                 "card_flag",
                 "dma",
                 "dma_go",
                 "dma_kdet",
                 "dma_run",
                 "do_ca_rd",
                 "do_ic_p",
                 "do_zt",
                 "dram_go",
                 "icp_acc",
                 "io_busy",
                 "ko_state[2:0]",
                 "kostart",
                 "level1",
                 "level2",
                 "mem_done",
                 "mmu_hit_i",
                 "modi",
                 "new_state[6:0]",
                 "pl_dat[1:0]",
                 "prot_i",
                 "prot_level1[1:0]",
                 "pstate[2:0]",
                 "ptb0[16:0]",
                 "ptb1[16:0]",
                 "ptb10[16:0]",
                 "pte_acc",
                 "pte_dat_8",
                 "pte_go",
                 "pte_puls",
                 "pte_run_wr",
                 "pte_sel",
                 "pte_wr_sig",
                 "rd_done",
                 "rd_ende",
                 "rd_level2",
                 "rd_rdy",
                 "refer",
                 "run_dc",
                 "rwv_bit",
                 "user_ptw",
                 "valid",
                 "valid_a",
                 "virtual_adr[19:0]",
                 "wr_dram",
                 "wr_icmram",
                 "wr_ptw",
                 "wr_req",
                 "write_ok",
                 "zt_ok",
                 "zugriff" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "CACHE_LOGIK.v:625" ["TmP_16"] ["ZTEST"] ["VIRTUELL"] ,
        _and 1 "CACHE_LOGIK.v:626" ["mmu_hit_i"] ["MMU_HIT"] ["TmP_85"] ,
        _and 1 "CACHE_LOGIK.v:629" ["TmP_17"] ["ENWR"] ["ICTODC[0]"] ,
        _and 1 "CACHE_LOGIK.v:629" ["TmP_18"] ["DRAM_WR"] ["ADR_EQU"] ,
        _and 1 "CACHE_LOGIK.v:629" ["wr_req"] ["WB_ACC"] ["TmP_106"] ,
        _and 1 "CACHE_LOGIK.v:679" ["do_zt"] ["ZTEST"] ["TmP_86"] ,
        _and 1 "CACHE_LOGIK.v:684" ["RWVFLAG"] ["VIRTUELL"] ["rwv_bit"] ,
        _and 1 "CACHE_LOGIK.v:686" ["TmP_20"] ["RWVAL[0]"] ["TmP_90"] ,
        _and 1 "CACHE_LOGIK.v:687" ["TmP_22"] ["TmP_21"] ["pstate[1]"] ,
        _and 1 "CACHE_LOGIK.v:687" ["zt_ok"] ["mem_done"] ["TmP_157"] ,
        _and 1 "CACHE_LOGIK.v:692" ["TmP_23"] ["TmP_92"] ["WRITE"] ,
        _and 1 "CACHE_LOGIK.v:692" ["TmP_24"] ["TmP_23"] ["write_ok"] ,
        _and 1 "CACHE_LOGIK.v:692" ["modi"] ["TmP_24"] ["TmP_86"] ,
        _and 1 "CACHE_LOGIK.v:694" ["TmP_25"] ["do_zt"] ["RWVAL[1]"] ,
        _and 1 "CACHE_LOGIK.v:694" ["TmP_26"] ["TmP_19"] ["CAPDAT[0]"] ,
        _and 1 "CACHE_LOGIK.v:694" ["TmP_27"] ["TmP_26"] ["level1"] ,
        _and 1 "CACHE_LOGIK.v:695" ["TmP_21"] ["CAPDAT[0]"] ["TmP_91"] ,
        _and 1 "CACHE_LOGIK.v:697" ["TmP_8"] ["MDONE"] ["pstate[2]"] ,
        _and 1 "CACHE_LOGIK.v:725" ["TmP_19"] ["CAPDAT[2]"] ["TmP_107"] ,
        _and 1 "CACHE_LOGIK.v:725" ["TmP_29"] ["TmP_19"] ["TmP_93"] ,
        _and 1 "CACHE_LOGIK.v:725" ["TmP_30"] ["TmP_29"] ["level1"] ,
        _and 1 "CACHE_LOGIK.v:728" ["TmP_31"] ["mem_done"] ["valid_a"] ,
        _and 1 "CACHE_LOGIK.v:728" ["ABORT"] ["TmP_31"] ["TmP_86"] ,
        _and 1 "CACHE_LOGIK.v:729" ["TmP_33"] ["TmP_32"] ["TmP_86"] ,
        _and 1 "CACHE_LOGIK.v:729" ["TmP_28"] ["ZTEST"] ["RWVAL[1]"] ,
        _and 1 "CACHE_LOGIK.v:729" ["PROTECT"] ["TmP_110"] ["TmP_94"] ,
        _and 1 "CACHE_LOGIK.v:731" ["TmP_34"] ["mem_done"] ["TmP_93"] ,
        _and 1 "CACHE_LOGIK.v:731" ["IACC_STAT[0]"] ["TmP_34"] ["icp_acc"] ,
        _and 1 "CACHE_LOGIK.v:733" ["TmP_32"] ["mem_done"] ["prot_i"] ,
        _and 1 "CACHE_LOGIK.v:733" ["IACC_STAT[2]"] ["TmP_32"] ["icp_acc"] ,
        _and 1 "CACHE_LOGIK.v:737" ["TmP_36"] ["TmP_35"] ["refer"] ,
        _and 1 "CACHE_LOGIK.v:737" ["TmP_37"] ["TmP_36"] ["valid"] ,
        _and 1 "CACHE_LOGIK.v:739" ["TmP_40"] ["TmP_39"] ["TmP_86"] ,
        _and 1 "CACHE_LOGIK.v:739" ["WR_MRAM"] ["TmP_40"] ["TmP_85"] ,
        _and 1 "CACHE_LOGIK.v:740" ["wr_icmram"] ["TmP_39"] ["icp_acc"] ,
        _and 1 "CACHE_LOGIK.v:744" ["IC_SIGS[1]"] ["pstate[2]"] ["icp_acc"] ,
        _and 1 "CACHE_LOGIK.v:746" ["TmP_41"] ["pstate[2]"] ["level1"] ,
        _and 1 "CACHE_LOGIK.v:748" ["TmP_42"] ["mem_done"] ["pstate[2]"] ,
        _and 1 "CACHE_LOGIK.v:748" ["pte_puls"] ["TmP_42"] ["level1"] ,
        _and 1 "CACHE_LOGIK.v:749" ["PTE_STAT[0]"] ["pte_puls"] ["TmP_86"] ,
        _and 1 "CACHE_LOGIK.v:749" ["PTE_STAT[1]"] ["pte_puls"] ["icp_acc"] ,
        _and 1 "CACHE_LOGIK.v:751" ["TmP_35"] ["TmP_78"] ["mem_done"] ,
        _and 1 "CACHE_LOGIK.v:751" ["TmP_43"] ["TmP_35"] ["valid"] ,
        _and 1 "CACHE_LOGIK.v:751" ["TmP_44"] ["TmP_43"] ["TmP_95"] ,
        _and 1 "CACHE_LOGIK.v:752" ["TmP_38"] ["TmP_79"] ["mem_done"] ,
        _and 1 "CACHE_LOGIK.v:752" ["TmP_39"] ["TmP_38"] ["valid"] ,
        _and 1 "CACHE_LOGIK.v:752" ["TmP_45"] ["TmP_39"] ["TmP_111"] ,
        _and 1 "CACHE_LOGIK.v:753" ["TmP_46"] ["TmP_113"] ["TmP_96"] ,
        _and 1 "CACHE_LOGIK.v:755" ["pte_wr_sig"] ["ENWR"] ["PD_MUX"] ,
        _and 1 "CACHE_LOGIK.v:759" ["TmP_47"] ["TmP_80"] ["TmP_96"] ,
        _and 1 "CACHE_LOGIK.v:778" ["run_dc"] ["TmP_114"] ["TmP_98"] ,
        _and 1 "CACHE_LOGIK.v:782" ["TmP_48"] ["MMU_HIT"] ["CA_HIT"] ,
        _and 1 "CACHE_LOGIK.v:782" ["TmP_49"] ["TmP_48"] ["run_dc"] ,
        _and 1 "CACHE_LOGIK.v:782" ["HIT_ALL"] ["TmP_49"] ["TmP_99"] ,
        _and 1 "CACHE_LOGIK.v:786" ["TmP_50"] ["new_state[4]"] ["TmP_100"] ,
        _and 1 "CACHE_LOGIK.v:786" ["TmP_51"] ["card_flag"] ["TmP_101"] ,
        _and 1 "CACHE_LOGIK.v:788" ["TmP_52"] ["card_flag"] ["USE_CA"] ,
        _and 1 "CACHE_LOGIK.v:788" ["CUPDATE"] ["TmP_52"] ["MDONE"] ,
        _and 1 "CACHE_LOGIK.v:790" ["TmP_14"] ["card_flag"] ["MDONE"] ,
        _and 1 "CACHE_LOGIK.v:800" ["TmP_53"] ["DRAM_ACC"] ["TmP_101"] ,
        _and 1 "CACHE_LOGIK.v:800" ["TmP_54"] ["TmP_53"] ["BRESET"] ,
        _and 1 "CACHE_LOGIK.v:805" ["TmP_55"] ["IO_RD"] ["TmP_102"] ,
        _and 1 "CACHE_LOGIK.v:805" ["TmP_56"] ["TmP_55"] ["BRESET"] ,
        _and 1 "CACHE_LOGIK.v:806" ["TmP_57"] ["IO_WR"] ["TmP_102"] ,
        _and 1 "CACHE_LOGIK.v:806" ["TmP_58"] ["TmP_57"] ["BRESET"] ,
        _and 1 "CACHE_LOGIK.v:811" ["TmP_13"] ["IO_RD"] ["IO_READY"] ,
        _and 1 "CACHE_LOGIK.v:815" ["TmP_59"] ["dma_run"] ["ICTODC[2]"] ,
        _and 1 "CACHE_LOGIK.v:815" ["TmP_6"] ["TmP_116"] ["BRESET"] ,
        _and 1 "CACHE_LOGIK.v:817" ["TmP_60"] ["ICTODC[1]"] ["dma_run"] ,
        _and 1 "CACHE_LOGIK.v:825" ["TmP_61"] ["new_state[0]"] ["WRITE"] ,
        _and 1 "CACHE_LOGIK.v:825" ["TmP_62"] ["READ"] ["MMU_HIT"] ,
        _and 1 "CACHE_LOGIK.v:825" ["TmP_63"] ["TmP_62"] ["rd_ende"] ,
        _and 1 "CACHE_LOGIK.v:825" ["TmP_64"] ["TmP_63"] ["run_dc"] ,
        _and 1 "CACHE_LOGIK.v:848" ["TmP_65"] ["pstate[1]"] ["WRITE"] ,
        _and 1 "CACHE_LOGIK.v:848" ["TmP_66"] ["TmP_65"] ["write_ok"] ,
        _and 1 "CACHE_LOGIK.v:848" ["TmP_67"] ["TmP_66"] ["TmP_86"] ,
        _and 1 "CACHE_LOGIK.v:878" ["TmP_68"] ["ZTEST"] ["TmP_104"] ,
        _and 1 "CACHE_LOGIK.v:878" ["wr_ptw"] ["TmP_86"] ["TmP_121"] ,
        _and 1 "CACHE_LOGIK.v:884" ["TmP_69"] ["user_ptw"] ["wr_ptw"] ,
        _logic_reduce_or 3 "" ["TmP_70"] ["TmP_135", "TmP_133", "TmP_131"],
        _logic_reduce_or 3 "" ["TmP_71"] ["TmP_129", "TmP_128", "TmP_127"],
        _logic_reduce_or 3 "" ["TmP_72"] ["TmP_141", "TmP_140", "TmP_139"],
        _logic_reduce_or 3 "" ["TmP_73"] ["TmP_146", "TmP_143", "TmP_142"],
        _logic_reduce_or 2 "" ["TmP_74"] ["TmP_145", "TmP_144"],
        _logic_reduce_or 2 "" ["TmP_75"] ["TmP_148", "TmP_147"],
        _logic_reduce_or 2 "" ["TmP_76"] ["TmP_151", "TmP_150"],
        _eq 3 "CACHE_LOGIK.v:753" ["TmP_77"] ["pstate[2:0]"] ["0b101"] ,
        _eq 3 "CACHE_LOGIK.v:759" ["TmP_79"] ["pstate[2:0]"] ["0b110"] ,
        _eq 3 "CACHE_LOGIK.v:759" ["TmP_80"] ["pstate[2:0]"] ["0b111"] ,
        _eq 3 "CACHE_LOGIK.v:856" ["TmP_78"] ["pstate[2:0]"] ["0b100"] ,
        _land 1 "CACHE_LOGIK.v:829" ["TmP_81"] ["PTB_WR"] ["TmP_84"],
        _land 1 "CACHE_LOGIK.v:830" ["TmP_82"] ["PTB_WR"] ["PTB_SEL"],
        _land 1 "CACHE_LOGIK.v:856" ["TmP_83"] ["mem_done"] ["TmP_78"],
        _logic_not 1 "CACHE_LOGIK.v:829" ["TmP_84"] ["PTB_SEL"],
        _not 1 "CACHE_LOGIK.v:682" ["TmP_88"] ["TmP_19"],
        _not 1 "CACHE_LOGIK.v:686" ["TmP_89"] ["CAPDAT[2]"],
        _not 1 "CACHE_LOGIK.v:686" ["TmP_90"] ["CAPDAT[1]"],
        _not 1 "CACHE_LOGIK.v:692" ["TmP_92"] ["CAPDAT[8]"],
        _not 1 "CACHE_LOGIK.v:695" ["TmP_91"] ["prot_i"],
        _not 1 "CACHE_LOGIK.v:725" ["TmP_87"] ["RWVAL[0]"],
        _not 1 "CACHE_LOGIK.v:729" ["TmP_94"] ["TmP_28"],
        _not 1 "CACHE_LOGIK.v:731" ["TmP_93"] ["CAPDAT[0]"],
        _not 1 "CACHE_LOGIK.v:739" ["TmP_85"] ["ZTEST"],
        _not 1 "CACHE_LOGIK.v:748" ["level1"] ["pstate[1]"],
        _not 1 "CACHE_LOGIK.v:752" ["TmP_95"] ["refer"],
        _not 1 "CACHE_LOGIK.v:759" ["TmP_96"] ["pte_run_wr"],
        _not 1 "CACHE_LOGIK.v:778" ["TmP_97"] ["ko_state[2]"],
        _not 1 "CACHE_LOGIK.v:778" ["TmP_98"] ["dma_run"],
        _not 1 "CACHE_LOGIK.v:782" ["TmP_99"] ["pstate[2]"],
        _not 1 "CACHE_LOGIK.v:786" ["TmP_100"] ["rd_rdy"],
        _not 1 "CACHE_LOGIK.v:800" ["TmP_101"] ["MDONE"],
        _not 1 "CACHE_LOGIK.v:806" ["TmP_102"] ["IO_READY"],
        _not 1 "CACHE_LOGIK.v:817" ["HLDA"] ["TmP_60"],
        _not 1 "CACHE_LOGIK.v:824" ["TmP_103"] ["VIRTUELL"],
        _not 1 "CACHE_LOGIK.v:878" ["TmP_86"] ["icp_acc"],
        _not 1 "CACHE_LOGIK.v:878" ["TmP_104"] ["RWVAL[1]"],
        _or 1 "CACHE_LOGIK.v:625" ["TmP_105"] ["READ"] ["WRITE"] ,
        _or 1 "CACHE_LOGIK.v:625" ["zugriff"] ["TmP_105"] ["TmP_16"] ,
        _or 1 "CACHE_LOGIK.v:629" ["TmP_106"] ["TmP_17"] ["TmP_18"] ,
        _or 1 "CACHE_LOGIK.v:631" ["rd_ende"] ["CA_HIT"] ["rd_rdy"] ,
        _or 1 "CACHE_LOGIK.v:670" ["dram_go"] ["new_state[1]"] ["rd_level2"] ,
        _or 1 "CACHE_LOGIK.v:686" ["TmP_108"] ["TmP_89"] ["TmP_20"] ,
        _or 1 "CACHE_LOGIK.v:686" ["TmP_109"] ["TmP_108"] ["pstate[1]"] ,
        _or 1 "CACHE_LOGIK.v:693" ["refer"] ["CAPDAT[7]"] ["do_zt"] ,
        _or 1 "CACHE_LOGIK.v:725" ["TmP_107"] ["CAPDAT[1]"] ["TmP_87"] ,
        _or 1 "CACHE_LOGIK.v:729" ["TmP_110"] ["TmP_33"] ["PROT_ERROR"] ,
        _or 1 "CACHE_LOGIK.v:737" ["rd_level2"] ["TmP_77"] ["TmP_37"] ,
        _or 1 "CACHE_LOGIK.v:746" ["PTE_MUX"] ["new_state[3]"] ["TmP_41"] ,
        _or 1 "CACHE_LOGIK.v:752" ["TmP_111"] ["TmP_95"] ["modi"] ,
        _or 1 "CACHE_LOGIK.v:753" ["TmP_112"] ["TmP_44"] ["TmP_45"] ,
        _or 1 "CACHE_LOGIK.v:753" ["TmP_113"] ["TmP_77"] ["TmP_80"] ,
        _or 1 "CACHE_LOGIK.v:753" ["PD_MUX"] ["TmP_112"] ["TmP_46"] ,
        _or 1 "CACHE_LOGIK.v:759" ["PKEEP"] ["TmP_79"] ["TmP_47"] ,
        _or 1 "CACHE_LOGIK.v:775" ["kostart"] ["new_state[3]"] ["rd_level2"] ,
        _or 1 "CACHE_LOGIK.v:778" ["TmP_114"] ["TmP_97"] ["QWATWO"] ,
        _or 1 "CACHE_LOGIK.v:779" ["KOMUX"] ["ko_state[1]"] ["DMA_MUX"] ,
        _or 1 "CACHE_LOGIK.v:780" ["KDET"] ["ko_state[0]"] ["dma_kdet"] ,
        _or 1 "CACHE_LOGIK.v:786" ["TmP_5"] ["TmP_50"] ["TmP_51"] ,
        _or 1 "CACHE_LOGIK.v:797" ["TmP_1"] ["new_state[2]"] ["pte_wr_sig"] ,
        _or 1 "CACHE_LOGIK.v:809" ["TmP_115"] ["IO_RD"] ["IO_WR"] ,
        _or 1 "CACHE_LOGIK.v:809" ["io_busy"] ["TmP_115"] ["rd_done"] ,
        _or 1 "CACHE_LOGIK.v:815" ["TmP_116"] ["new_state[6]"] ["TmP_59"] ,
        _or 1 "CACHE_LOGIK.v:820" ["DMA_MUX"] ["DMA_CHK"] ["dma_kdet"] ,
        _or 1 "CACHE_LOGIK.v:824" ["TmP_117"] ["TmP_103"] ["zt_ok"] ,
        _or 1 "CACHE_LOGIK.v:825" ["TmP_118"] ["TmP_61"] ["rd_done"] ,
        _or 1 "CACHE_LOGIK.v:825" ["TmP_119"] ["new_state[2]"] ["TmP_64"] ,
        _or 1 "CACHE_LOGIK.v:848" ["pte_dat_8"] ["TmP_67"] ["CAPDAT[8]"] ,
        _or 1 "CACHE_LOGIK.v:878" ["TmP_120"] ["WRITE"] ["RMW"] ,
        _or 1 "CACHE_LOGIK.v:878" ["TmP_121"] ["TmP_120"] ["TmP_68"] ,
        _or 1 "CACHE_LOGIK.v:882" ["TmP_122"] ["user_ptw"] ["wr_ptw"] ,
        _dff 2 "CACHE_LOGIK.v:856" ["prot_level1[1:0]"] ["BCLK"] ["TmP_9[1:0]"],
        _dff 1 "CACHE_LOGIK.v:838" ["icp_acc"] ["BCLK"] ["pte_sel"],
        _dff 1 "CACHE_LOGIK.v:833" ["PTB_ONE"] ["BCLK"] ["TmP_4"],
        _dff 1 "CACHE_LOGIK.v:832" ["NEW_PTB"] ["BCLK"] ["PTB_WR"],
        _dff 17 "CACHE_LOGIK.v:830" ["ptb1[16:0]"] ["BCLK"] ["TmP_12[16:0]"],
        _dff 17 "CACHE_LOGIK.v:829" ["ptb0[16:0]"] ["BCLK"] ["TmP_11[16:0]"],
        _dff 1 "CACHE_LOGIK.v:819" ["dma_kdet"] ["BCLK"] ["DMA_CHK"],
        _dff 1 "CACHE_LOGIK.v:815" ["dma_run"] ["BCLK"] ["TmP_6"],
        _dff 1 "CACHE_LOGIK.v:811" ["rd_done"] ["BCLK"] ["TmP_13"],
        _dff 1 "CACHE_LOGIK.v:803" ["IO_WR"] ["BCLK"] ["TmP_3"],
        _dff 1 "CACHE_LOGIK.v:803" ["IO_RD"] ["BCLK"] ["TmP_2"],
        _dff 1 "CACHE_LOGIK.v:798" ["DRAM_ACC"] ["BCLK"] ["TmP_0"],
        _dff 1 "CACHE_LOGIK.v:797" ["DRAM_WR"] ["BCLK"] ["TmP_1"],
        _dff 1 "CACHE_LOGIK.v:790" ["rd_rdy"] ["BCLK"] ["TmP_14"],
        _adff 1 "CACHE_LOGIK.v:784" ["card_flag"] ["BRESET"] ["BCLK"] ["TmP_5"],
        _adff 3 "CACHE_LOGIK.v:763" ["ko_state[2:0]"] ["BRESET"] ["BCLK"] ["TmP_7[2:0]"],
        _dff 1 "CACHE_LOGIK.v:757" ["pte_run_wr"] ["BCLK"] ["pte_wr_sig"],
        _adff 3 "CACHE_LOGIK.v:699" ["pstate[2:0]"] ["BRESET"] ["BCLK"] ["TmP_10[2:0]"],
        _dff 1 "CACHE_LOGIK.v:697" ["mem_done"] ["BCLK"] ["TmP_8"],
        _dff 1 "CACHE_LOGIK.v:682" ["rwv_bit"] ["BCLK"] ["TmP_15"],
        _pmux 1 4 "CACHE_LOGIK.v:885|CACHE_LOGIK.v:881" ["prot_i"] ["0bx"] ["TmP_122", "user_ptw", "TmP_69", "0b0"] ["TmP_126", "TmP_125", "TmP_124", "TmP_123"],
        _eq 2 "CACHE_LOGIK.v:885|CACHE_LOGIK.v:881" ["TmP_123"] ["acc_level[1:0]"] ["0b11"] ,
        _eq 2 "CACHE_LOGIK.v:884|CACHE_LOGIK.v:881" ["TmP_124"] ["acc_level[1:0]"] ["0b10"] ,
        _eq 2 "CACHE_LOGIK.v:883|CACHE_LOGIK.v:881" ["TmP_125"] ["acc_level[1:0]"] ["0b01"] ,
        _logic_not 2 "CACHE_LOGIK.v:882|CACHE_LOGIK.v:881" ["TmP_126"] ["acc_level[1:0]"],
        _mux 1 "CACHE_LOGIK.v:872|CACHE_LOGIK.v:869" ["write_ok"] ["0b0"] ["0b1"] ["TmP_71"],
        _eq 3 "CACHE_LOGIK.v:872|CACHE_LOGIK.v:869" ["TmP_127"] ["USER", "pl_dat[1:0]"] ["0b001"] ,
        _eq 2 "CACHE_LOGIK.v:871|CACHE_LOGIK.v:869" ["TmP_128"] ["USER", "pl_dat[1]"] ["0b01"] ,
        _eq 3 "CACHE_LOGIK.v:870|CACHE_LOGIK.v:869" ["TmP_129"] ["USER", "pl_dat[1:0]"] ["0b111"] ,
        _pmux 2 4 "CACHE_LOGIK.v:865|CACHE_LOGIK.v:859" ["pl_dat[1:0]"] ["0bxx"] ["0b1001", "CAPDAT[2:1]", "0b00"] ["TmP_134", "TmP_132", "TmP_70", "TmP_130"],
        _logic_not 2 "CACHE_LOGIK.v:865|CACHE_LOGIK.v:859" ["TmP_130"] ["prot_level1[1:0]"],
        _eq 3 "CACHE_LOGIK.v:864|CACHE_LOGIK.v:859" ["TmP_131"] ["prot_level1[1:0]", "CAPDAT[2]"] ["0b010"] ,
        _eq 3 "CACHE_LOGIK.v:863|CACHE_LOGIK.v:859" ["TmP_132"] ["prot_level1[1:0]", "CAPDAT[2]"] ["0b011"] ,
        _eq 3 "CACHE_LOGIK.v:862|CACHE_LOGIK.v:859" ["TmP_133"] ["prot_level1[1:0]", "CAPDAT[2]"] ["0b100"] ,
        _eq 3 "CACHE_LOGIK.v:861|CACHE_LOGIK.v:859" ["TmP_134"] ["prot_level1[1:0]", "CAPDAT[2]"] ["0b101"] ,
        _eq 2 "CACHE_LOGIK.v:860|CACHE_LOGIK.v:859" ["TmP_135"] ["prot_level1[1:0]"] ["0b11"] ,
        _mux 2 "CACHE_LOGIK.v:856" ["TmP_9[1:0]"] ["prot_level1[1:0]"] ["CAPDAT[2:1]"] ["TmP_83"],
        _mux 1 "CACHE_LOGIK.v:838" ["pte_sel"] ["icp_acc"] ["new_state[5]"] ["new_state[3]"],
        _mux 1 "CACHE_LOGIK.v:833" ["TmP_4"] ["PTB_ONE"] ["PTB_SEL"] ["PTB_WR"],
        _mux 17 "CACHE_LOGIK.v:830" ["TmP_12[16:0]"] ["ptb1[16:0]"] ["CPU_OUT[16:0]"] ["TmP_82"],
        _mux 17 "CACHE_LOGIK.v:829" ["TmP_11[16:0]"] ["ptb0[16:0]"] ["CPU_OUT[16:0]"] ["TmP_81"],
        _mux 1 "CACHE_LOGIK.v:806" ["TmP_3"] ["TmP_58"] ["WRITE"] ["new_state[0]"],
        _mux 1 "CACHE_LOGIK.v:805" ["TmP_2"] ["TmP_56"] ["READ"] ["new_state[0]"],
        _mux 1 "CACHE_LOGIK.v:798" ["TmP_0"] ["TmP_54"] ["0b1"] ["dram_go"],
        _pmux 3 3 "CACHE_LOGIK.v:770|CACHE_LOGIK.v:766" ["TmP_7[2:0]"] ["0b000"] ["0b110111100"] ["TmP_138", "TmP_137", "TmP_136"],
        _eq 3 "CACHE_LOGIK.v:770|CACHE_LOGIK.v:766" ["TmP_136"] ["ko_state[2:0]"] ["0b111"] ,
        _eq 3 "CACHE_LOGIK.v:769|CACHE_LOGIK.v:766" ["TmP_137"] ["ko_state[2:0]"] ["0b110"] ,
        _eq 4 "CACHE_LOGIK.v:768|CACHE_LOGIK.v:766" ["TmP_138"] ["kostart", "ko_state[2:0]"] ["0b1000"] ,
        _pmux 3 4 "CACHE_LOGIK.v:716|CACHE_LOGIK.v:702" ["TmP_10[2:0]"] ["0b000"] ["0b100101110111"] ["TmP_75", "TmP_74", "TmP_73", "TmP_72"],
        _eq 4 "CACHE_LOGIK.v:716|CACHE_LOGIK.v:702" ["TmP_139"] ["pte_run_wr", "pstate[2:0]"] ["0b0111"] ,
        _eq 7 "CACHE_LOGIK.v:715|CACHE_LOGIK.v:702" ["TmP_140"] ["mem_done", "valid", "refer", "modi", "pstate[2:0]"] ["0b1111110"] ,
        _eq 6 "CACHE_LOGIK.v:713|CACHE_LOGIK.v:702" ["TmP_141"] ["mem_done", "valid", "refer", "pstate[2:0]"] ["0b110110"] ,
        _eq 4 "CACHE_LOGIK.v:711|CACHE_LOGIK.v:702" ["TmP_142"] ["mem_done", "pstate[2:0]"] ["0b0110"] ,
        _eq 4 "CACHE_LOGIK.v:710|CACHE_LOGIK.v:702" ["TmP_143"] ["pte_run_wr", "pstate[2:0]"] ["0b1101"] ,
        _eq 4 "CACHE_LOGIK.v:709|CACHE_LOGIK.v:702" ["TmP_144"] ["pte_run_wr", "pstate[2:0]"] ["0b0101"] ,
        _eq 6 "CACHE_LOGIK.v:708|CACHE_LOGIK.v:702" ["TmP_145"] ["mem_done", "valid", "refer", "pstate[2:0]"] ["0b110100"] ,
        _eq 6 "CACHE_LOGIK.v:707|CACHE_LOGIK.v:702" ["TmP_146"] ["mem_done", "valid", "refer", "pstate[2:0]"] ["0b111100"] ,
        _eq 4 "CACHE_LOGIK.v:705|CACHE_LOGIK.v:702" ["TmP_147"] ["mem_done", "pstate[2:0]"] ["0b0100"] ,
        _eq 4 "CACHE_LOGIK.v:704|CACHE_LOGIK.v:702" ["TmP_148"] ["new_state[3]", "pstate[2:0]"] ["0b1000"] ,
        _mux 1 "CACHE_LOGIK.v:682" ["TmP_15"] ["rwv_bit"] ["TmP_156"] ["mem_done"],
        _pmux 7 6 "CACHE_LOGIK.v:665|CACHE_LOGIK.v:652" ["new_state[6:0]"] ["0b0000000"] ["0b000101000000010010010000010001010101000000"] ["TmP_155", "TmP_154", "TmP_153", "TmP_152", "TmP_76", "TmP_149"],
        _eq 6 "CACHE_LOGIK.v:665|CACHE_LOGIK.v:652" ["TmP_149"] ["zugriff", "io_busy", "pstate[2]", "IC_PREQ", "ICTODC[2]", "dma_run"] ["0b000010"] ,
        _eq 10 "CACHE_LOGIK.v:663|CACHE_LOGIK.v:652" ["TmP_150"] ["zugriff", "PROT_ERROR", "IO_SPACE", "mmu_hit_i", "READ", "wr_req", "rd_ende", "pstate[2]", "IC_PREQ", "dma_run"] ["0b1001101010"] ,
        _eq 4 "CACHE_LOGIK.v:662|CACHE_LOGIK.v:652" ["TmP_151"] ["zugriff", "pstate[2]", "IC_PREQ", "dma_run"] ["0b0010"] ,
        _eq 8 "CACHE_LOGIK.v:660|CACHE_LOGIK.v:652" ["TmP_152"] ["zugriff", "PROT_ERROR", "IO_SPACE", "mmu_hit_i", "READ", "wr_req", "pstate[2]", "dma_run"] ["0b10010100"] ,
        _eq 10 "CACHE_LOGIK.v:658|CACHE_LOGIK.v:652" ["TmP_153"] ["zugriff", "PROT_ERROR", "IO_SPACE", "mmu_hit_i", "READ", "wr_req", "rd_ende", "DRAM_ACC", "pstate[2]", "dma_run"] ["0b1001100000"] ,
        _eq 7 "CACHE_LOGIK.v:656|CACHE_LOGIK.v:652" ["TmP_154"] ["zugriff", "PROT_ERROR", "IO_SPACE", "io_busy", "mmu_hit_i", "pstate[2]", "dma_run"] ["0b1010100"] ,
        _eq 5 "CACHE_LOGIK.v:654|CACHE_LOGIK.v:652" ["TmP_155"] ["zugriff", "PROT_ERROR", "mmu_hit_i", "pstate[2]", "dma_run"] ["0b10000"] ,
        _mux 1 "CACHE_LOGIK.v:682" ["TmP_156"] ["0b1"] ["TmP_88"] ["pstate[1]"],
        _mux 1 "CACHE_LOGIK.v:687" ["TmP_157"] ["TmP_22"] ["TmP_109"] ["RWVAL[1]"],
        _mux 1 "CACHE_LOGIK.v:695" ["valid"] ["TmP_21"] ["TmP_27"] ["TmP_25"],
        _mux 1 "CACHE_LOGIK.v:726" ["valid_a"] ["TmP_93"] ["TmP_30"] ["TmP_28"],
        _mux 1 "CACHE_LOGIK.v:825" ["TmP_158"] ["TmP_119"] ["TmP_118"] ["IO_SPACE"],
        _mux 1 "CACHE_LOGIK.v:825" ["ACC_OK"] ["TmP_158"] ["TmP_117"] ["ZTEST"],
        _mux 17 "CACHE_LOGIK.v:835" ["ptb10[16:0]"] ["ptb0[16:0]"] ["ptb1[16:0]"] ["SEL_PTB1"],
        _mux 20 "CACHE_LOGIK.v:842" ["virtual_adr[19:0]"] ["VADR_R[19:0]"] ["IC_VA[19:0]"] ["pte_sel"],
        _mux 29 "CACHE_LOGIK.v:845" ["PTE_ADR[28:0]"] ["ptb10[16:0]", "virtual_adr[19:10]", "0b00"] ["CAPDAT[28:12]", "virtual_adr[9:0]", "0b00"] ["rd_level2"],
        _mux 2 "CACHE_LOGIK.v:876" ["acc_level[1:0]"] ["CAPDAT[2:1]"] ["pl_dat[1:0]"] ["pstate[1]"],
        _mux 1 "CACHE_LOGIK.v:877" ["user_ptw"] ["USER"] ["ICTODC[3]"] ["icp_acc"],
        _buf 1 "CACHE_LOGIK.v:562" ["ABO_LEVEL1"] ["level1"],
        _buf 1 "CACHE_LOGIK.v:565" ["AUX_DAT"] ["rd_rdy"],
        _buf 1 "" ["IACC_STAT[1]"] ["level1"],
        _buf 1 "" ["IC_SIGS[0]"] ["wr_icmram"],
        _buf 1 "CACHE_LOGIK.v:554" ["IO_ACC"] ["new_state[0]"],
        _buf 24 "CACHE_LOGIK.v:568" ["MMU_DIN[23:0]"] ["pl_dat[1:0]", "pte_dat_8", "CAPDAT[6]", "CAPDAT[31:12]"],
        _buf 20 "CACHE_LOGIK.v:557" ["PTE_DAT[19:0]"] ["0b0011", "CAPDAT[15:9]", "pte_dat_8", "0b1", "CAPDAT[6:0]"],
        _buf 1 "CACHE_LOGIK.v:614" ["dma"] ["ICTODC[2]"],
        _buf 1 "CACHE_LOGIK.v:615" ["dma_go"] ["new_state[6]"],
        _buf 1 "CACHE_LOGIK.v:602" ["do_ca_rd"] ["new_state[4]"],
        _buf 1 "CACHE_LOGIK.v:602" ["do_ic_p"] ["new_state[5]"],
        _buf 1 "CACHE_LOGIK.v:604" ["level2"] ["pstate[1]"],
        _buf 1 "CACHE_LOGIK.v:601" ["pte_acc"] ["pstate[2]"],
        _buf 1 "CACHE_LOGIK.v:602" ["pte_go"] ["new_state[3]"],
        _buf 1 "CACHE_LOGIK.v:607" ["wr_dram"] ["new_state[2]"]
    ] in
    PINST "draw_hier DCACHE_SM" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DCA_CONTROL {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "CUPDATE",
                 "DRAM_ACC",
                 "CA_SET",
                 "HIT_ALL",
                 "VADR_R[4:0]",
                 "UPDATE[23:0]",
                 "INVAL_A",
                 "WRITE",
                 "MDONE",
                 "USE_CA",
                 "INHIBIT",
                 "KILL" ] in
    let outs = [ "WRCRAM0",
                 "WRCRAM1",
                 "WE_CV",
                 "WADR_CV[4:0]",
                 "DAT_CV[23:0]",
                 "INIT_CA_RUN",
                 "WRSET0",
                 "WRSET1" ] in
    let ints = md_extract_vectors [ "TmP_0[4:0]",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[1:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_3[4:0]",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "acount[4:0]",
                 "ca_set_d",
                 "countf",
                 "state[1:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 5 "CACHE_LOGIK.v:283" ["TmP_3[4:0]"] ["acount[4:0]"] ["0b00001"] ,
        _and 1 "CACHE_LOGIK.v:259" ["WRCRAM0"] ["TmP_4"] ["TmP_14"] ,
        _and 1 "CACHE_LOGIK.v:260" ["WRCRAM1"] ["TmP_4"] ["ca_set_d"] ,
        _and 1 "CACHE_LOGIK.v:264" ["TmP_4"] ["CUPDATE"] ["TmP_13"] ,
        _and 1 "CACHE_LOGIK.v:288" ["TmP_5"] ["TmP_15"] ["WRITE"] ,
        _and 1 "CACHE_LOGIK.v:288" ["TmP_6"] ["TmP_5"] ["HIT_ALL"] ,
        _and 1 "CACHE_LOGIK.v:288" ["TmP_8"] ["TmP_7"] ["TmP_14"] ,
        _and 1 "CACHE_LOGIK.v:289" ["TmP_9"] ["CA_SET"] ["WRITE"] ,
        _and 1 "CACHE_LOGIK.v:289" ["TmP_10"] ["TmP_9"] ["HIT_ALL"] ,
        _and 1 "CACHE_LOGIK.v:289" ["TmP_7"] ["MDONE"] ["USE_CA"] ,
        _and 1 "CACHE_LOGIK.v:289" ["TmP_11"] ["TmP_7"] ["ca_set_d"] ,
        _logic_reduce_or 3 "" ["TmP_12"] ["TmP_20", "TmP_19", "TmP_18"],
        _eq 5 "CACHE_LOGIK.v:270" ["countf"] ["acount[4:0]"] ["0b11111"] ,
        _not 1 "CACHE_LOGIK.v:264" ["TmP_13"] ["INHIBIT"],
        _not 1 "CACHE_LOGIK.v:288" ["TmP_15"] ["CA_SET"],
        _not 1 "CACHE_LOGIK.v:288" ["TmP_14"] ["ca_set_d"],
        _or 1 "CACHE_LOGIK.v:264" ["TmP_16"] ["state[1]"] ["HIT_ALL"] ,
        _or 1 "CACHE_LOGIK.v:264" ["TmP_17"] ["TmP_16"] ["TmP_4"] ,
        _or 1 "CACHE_LOGIK.v:264" ["WE_CV"] ["TmP_17"] ["KILL"] ,
        _or 1 "CACHE_LOGIK.v:288" ["WRSET0"] ["TmP_6"] ["TmP_8"] ,
        _or 1 "CACHE_LOGIK.v:289" ["WRSET1"] ["TmP_10"] ["TmP_11"] ,
        _dff 5 "CACHE_LOGIK.v:283" ["acount[4:0]"] ["BCLK"] ["TmP_0[4:0]"],
        _dff 2 "CACHE_LOGIK.v:272" ["state[1:0]"] ["BCLK"] ["TmP_2[1:0]"],
        _dff 1 "CACHE_LOGIK.v:255" ["ca_set_d"] ["BCLK"] ["TmP_1"],
        _mux 5 "CACHE_LOGIK.v:283" ["TmP_0[4:0]"] ["0b00000"] ["TmP_3[4:0]"] ["state[1]"],
        _pmux 2 2 "CACHE_LOGIK.v:278|CACHE_LOGIK.v:273" ["TmP_2[1:0]"] ["0b00"] ["0b0110"] ["TmP_21", "TmP_12"],
        _eq 4 "CACHE_LOGIK.v:278|CACHE_LOGIK.v:273" ["TmP_18"] ["BRESET", "countf", "state[1:0]"] ["0b1010"] ,
        _eq 4 "CACHE_LOGIK.v:277|CACHE_LOGIK.v:273" ["TmP_19"] ["BRESET", "INVAL_A", "state[1:0]"] ["0b1100"] ,
        _eq 3 "CACHE_LOGIK.v:275|CACHE_LOGIK.v:273" ["TmP_20"] ["BRESET", "state[1:0]"] ["0b101"] ,
        _not 1 "CACHE_LOGIK.v:274|CACHE_LOGIK.v:273" ["TmP_21"] ["BRESET"],
        _mux 1 "CACHE_LOGIK.v:255" ["TmP_1"] ["ca_set_d"] ["CA_SET"] ["DRAM_ACC"],
        _mux 5 "CACHE_LOGIK.v:265" ["WADR_CV[4:0]"] ["VADR_R[4:0]"] ["acount[4:0]"] ["state[1]"],
        _mux 24 "CACHE_LOGIK.v:266" ["DAT_CV[23:0]"] ["UPDATE[23:0]"] ["0b000000000000000000000000"] ["state[1]"],
        _buf 1 "CACHE_LOGIK.v:246" ["INIT_CA_RUN"] ["state[1]"]
    ] in
    PINST "draw_hier DCA_CONTROL" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DEBUG_AE {attrs::(string#string) list} conns =
    let inps = [ "DBG_IN[38:0]",
                 "READ",
                 "WRITE",
                 "USER",
                 "VIRTUELL",
                 "ACC_OK",
                 "VADR_R[29:0]",
                 "MMU_Q[19:0]",
                 "ENBYTE[3:0]" ] in
    let outs = [ "DBG_HIT" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5[3:0]",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "byte_en",
                 "crd",
                 "cwr",
                 "make",
                 "page_adr",
                 "real_adr",
                 "sd",
                 "ud",
                 "virt_adr",
                 "vnp" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "CACHE_LOGIK.v:151" ["TmP_0"] ["DBG_IN[37]"] ["USER"] ,
        _and 1 "CACHE_LOGIK.v:151" ["TmP_1"] ["DBG_IN[38]"] ["TmP_10"] ,
        _and 1 "CACHE_LOGIK.v:153" ["TmP_2"] ["TmP_11"] ["TmP_9"] ,
        _and 1 "CACHE_LOGIK.v:153" ["TmP_3"] ["DBG_IN[35]"] ["WRITE"] ,
        _and 1 "CACHE_LOGIK.v:153" ["TmP_4"] ["DBG_IN[36]"] ["READ"] ,
        _and 1 "CACHE_LOGIK.v:153" ["make"] ["TmP_2"] ["TmP_12"] ,
        _and 4 "CACHE_LOGIK.v:159" ["TmP_5[3:0]"] ["ENBYTE[3:0]"] ["DBG_IN[33:30]"] ,
        _and 1 "CACHE_LOGIK.v:163" ["TmP_6"] ["ACC_OK"] ["make"] ,
        _and 1 "CACHE_LOGIK.v:163" ["TmP_7"] ["TmP_6"] ["TmP_13"] ,
        _and 1 "CACHE_LOGIK.v:164" ["TmP_8"] ["TmP_7"] ["page_adr"] ,
        _and 1 "CACHE_LOGIK.v:164" ["DBG_HIT"] ["TmP_8"] ["byte_en"] ,
        _eq 1 "CACHE_LOGIK.v:152" ["TmP_9"] ["VIRTUELL"] ["DBG_IN[34]"] ,
        _eq 20 "CACHE_LOGIK.v:155" ["virt_adr"] ["MMU_Q[19:0]"] ["DBG_IN[29:10]"] ,
        _eq 20 "CACHE_LOGIK.v:156" ["real_adr"] ["VADR_R[29:10]"] ["DBG_IN[29:10]"] ,
        _eq 10 "CACHE_LOGIK.v:157" ["page_adr"] ["VADR_R[9:0]"] ["DBG_IN[9:0]"] ,
        _not 1 "CACHE_LOGIK.v:151" ["TmP_10"] ["USER"],
        _or 1 "CACHE_LOGIK.v:151" ["TmP_11"] ["TmP_0"] ["TmP_1"] ,
        _or 1 "CACHE_LOGIK.v:153" ["TmP_12"] ["TmP_3"] ["TmP_4"] ,
        _logic_reduce_or 4 "CACHE_LOGIK.v:159" ["byte_en"] ["TmP_5[0]", "TmP_5[1]", "TmP_5[2]", "TmP_5[3]"],
        _mux 1 "CACHE_LOGIK.v:163" ["TmP_13"] ["real_adr"] ["virt_adr"] ["VIRTUELL"],
        _buf 1 "CACHE_LOGIK.v:140" ["crd"] ["DBG_IN[36]"],
        _buf 1 "CACHE_LOGIK.v:140" ["cwr"] ["DBG_IN[35]"],
        _buf 1 "CACHE_LOGIK.v:140" ["sd"] ["DBG_IN[38]"],
        _buf 1 "CACHE_LOGIK.v:140" ["ud"] ["DBG_IN[37]"],
        _buf 1 "CACHE_LOGIK.v:140" ["vnp"] ["DBG_IN[34]"]
    ] in
    PINST "draw_hier DEBUG_AE" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DECODER {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "INT_N",
                 "NMI_N",
                 "ANZ_VAL[2:0]",
                 "OPREG[55:0]",
                 "CFG[8:0]",
                 "PSR[11:0]",
                 "ACC_DONE",
                 "DC_ABORT",
                 "IC_ABORT",
                 "ACB_ZERO",
                 "DONE",
                 "PC_SAVE[31:0]",
                 "STRING[4:0]",
                 "INIT_DONE",
                 "ILL",
                 "UNDEF",
                 "TRAPS[5:0]",
                 "IC_READ",
                 "STOP_CINV" ] in
    let outs = [ "GENSTAT[2:0]",
                 "DISP[31:0]",
                 "IMME_Q[31:0]",
                 "DISP_BR[31:0]",
                 "USED[2:0]",
                 "NEW",
                 "LOAD_PC",
                 "NEXT_PCA",
                 "RDAA[7:0]",
                 "RDAB[7:0]",
                 "OPER[10:0]",
                 "START[1:0]",
                 "LD_OUT[1:0]",
                 "LD_DIN",
                 "LD_IMME",
                 "INFO_AU[6:0]",
                 "ACC_FELD[14:0]",
                 "WREN",
                 "WRADR[5:0]",
                 "WMASKE[1:0]",
                 "WR_REG",
                 "DETOIP[12:0]",
                 "MMU_UPDATE[1:0]",
                 "RESTART",
                 "STOP_IC",
                 "RWVAL[2:0]",
                 "ENA_HK",
                 "ILO",
                 "COP_OP[23:0]",
                 "PHOUT[7:0]" ] in
    let ints = md_extract_vectors [ "PHASE_0",
                 "TmP_0[1:0]",
                 "TmP_1",
                 "TmP_10",
                 "TmP_100",
                 "TmP_101",
                 "TmP_102",
                 "TmP_103",
                 "TmP_104",
                 "TmP_105",
                 "TmP_106",
                 "TmP_107",
                 "TmP_108",
                 "TmP_109",
                 "TmP_11",
                 "TmP_110",
                 "TmP_111",
                 "TmP_112",
                 "TmP_113",
                 "TmP_114",
                 "TmP_115",
                 "TmP_116",
                 "TmP_117",
                 "TmP_118",
                 "TmP_119",
                 "TmP_12",
                 "TmP_120",
                 "TmP_121",
                 "TmP_122",
                 "TmP_123",
                 "TmP_124",
                 "TmP_125",
                 "TmP_126",
                 "TmP_127",
                 "TmP_128",
                 "TmP_129",
                 "TmP_13",
                 "TmP_130",
                 "TmP_131",
                 "TmP_132",
                 "TmP_133",
                 "TmP_134",
                 "TmP_135",
                 "TmP_136",
                 "TmP_137",
                 "TmP_138",
                 "TmP_139",
                 "TmP_14",
                 "TmP_140",
                 "TmP_141",
                 "TmP_142",
                 "TmP_143",
                 "TmP_144",
                 "TmP_145",
                 "TmP_146",
                 "TmP_147",
                 "TmP_148",
                 "TmP_149",
                 "TmP_15",
                 "TmP_150",
                 "TmP_151",
                 "TmP_152",
                 "TmP_153",
                 "TmP_154",
                 "TmP_155",
                 "TmP_156",
                 "TmP_157",
                 "TmP_158",
                 "TmP_159",
                 "TmP_16",
                 "TmP_160",
                 "TmP_161",
                 "TmP_162",
                 "TmP_163",
                 "TmP_164",
                 "TmP_165",
                 "TmP_166",
                 "TmP_167",
                 "TmP_168",
                 "TmP_169",
                 "TmP_17",
                 "TmP_170",
                 "TmP_171",
                 "TmP_172",
                 "TmP_173",
                 "TmP_174",
                 "TmP_175",
                 "TmP_176",
                 "TmP_177",
                 "TmP_178",
                 "TmP_179",
                 "TmP_18",
                 "TmP_180",
                 "TmP_181",
                 "TmP_182",
                 "TmP_183",
                 "TmP_184",
                 "TmP_185",
                 "TmP_186",
                 "TmP_187",
                 "TmP_188",
                 "TmP_189",
                 "TmP_19",
                 "TmP_190",
                 "TmP_191",
                 "TmP_192",
                 "TmP_193",
                 "TmP_194",
                 "TmP_195",
                 "TmP_196",
                 "TmP_197",
                 "TmP_198",
                 "TmP_199",
                 "TmP_2[8:0]",
                 "TmP_20[1:0]",
                 "TmP_200",
                 "TmP_201",
                 "TmP_202",
                 "TmP_203",
                 "TmP_204",
                 "TmP_205",
                 "TmP_206",
                 "TmP_207",
                 "TmP_208",
                 "TmP_209",
                 "TmP_21",
                 "TmP_210",
                 "TmP_211",
                 "TmP_212",
                 "TmP_213",
                 "TmP_214",
                 "TmP_215",
                 "TmP_216",
                 "TmP_217",
                 "TmP_218",
                 "TmP_219",
                 "TmP_22[3:0]",
                 "TmP_220",
                 "TmP_221",
                 "TmP_222",
                 "TmP_223",
                 "TmP_224",
                 "TmP_225",
                 "TmP_226",
                 "TmP_227",
                 "TmP_228",
                 "TmP_229",
                 "TmP_23",
                 "TmP_230",
                 "TmP_231",
                 "TmP_232",
                 "TmP_233",
                 "TmP_234",
                 "TmP_235",
                 "TmP_236",
                 "TmP_237",
                 "TmP_238",
                 "TmP_239",
                 "TmP_24[1:0]",
                 "TmP_240",
                 "TmP_241",
                 "TmP_242",
                 "TmP_243",
                 "TmP_244",
                 "TmP_245",
                 "TmP_246",
                 "TmP_247",
                 "TmP_248",
                 "TmP_249",
                 "TmP_25[3:0]",
                 "TmP_250",
                 "TmP_251",
                 "TmP_252",
                 "TmP_253",
                 "TmP_254",
                 "TmP_255",
                 "TmP_256",
                 "TmP_257",
                 "TmP_258",
                 "TmP_259",
                 "TmP_26",
                 "TmP_260",
                 "TmP_261",
                 "TmP_262",
                 "TmP_263",
                 "TmP_264",
                 "TmP_265",
                 "TmP_266",
                 "TmP_267",
                 "TmP_268",
                 "TmP_269",
                 "TmP_27",
                 "TmP_270",
                 "TmP_271",
                 "TmP_272",
                 "TmP_273",
                 "TmP_274",
                 "TmP_275",
                 "TmP_276",
                 "TmP_277",
                 "TmP_278",
                 "TmP_279",
                 "TmP_28",
                 "TmP_280",
                 "TmP_281",
                 "TmP_282",
                 "TmP_283",
                 "TmP_284",
                 "TmP_285",
                 "TmP_286",
                 "TmP_287",
                 "TmP_288",
                 "TmP_289",
                 "TmP_29",
                 "TmP_290",
                 "TmP_291",
                 "TmP_292",
                 "TmP_293",
                 "TmP_294",
                 "TmP_295",
                 "TmP_296",
                 "TmP_297",
                 "TmP_298",
                 "TmP_299",
                 "TmP_3",
                 "TmP_30",
                 "TmP_300",
                 "TmP_301",
                 "TmP_302",
                 "TmP_303",
                 "TmP_304",
                 "TmP_305",
                 "TmP_306",
                 "TmP_307",
                 "TmP_308",
                 "TmP_309",
                 "TmP_31",
                 "TmP_310",
                 "TmP_311",
                 "TmP_312",
                 "TmP_313",
                 "TmP_314",
                 "TmP_315",
                 "TmP_316",
                 "TmP_317",
                 "TmP_318",
                 "TmP_319",
                 "TmP_32",
                 "TmP_320",
                 "TmP_321",
                 "TmP_322",
                 "TmP_323",
                 "TmP_324",
                 "TmP_325",
                 "TmP_326",
                 "TmP_327",
                 "TmP_328",
                 "TmP_329",
                 "TmP_33",
                 "TmP_330",
                 "TmP_331",
                 "TmP_332",
                 "TmP_333",
                 "TmP_334",
                 "TmP_335",
                 "TmP_336",
                 "TmP_337",
                 "TmP_338",
                 "TmP_339",
                 "TmP_34",
                 "TmP_340",
                 "TmP_341",
                 "TmP_342",
                 "TmP_343",
                 "TmP_344",
                 "TmP_345",
                 "TmP_346",
                 "TmP_347",
                 "TmP_348",
                 "TmP_349",
                 "TmP_35",
                 "TmP_350",
                 "TmP_351",
                 "TmP_352",
                 "TmP_353",
                 "TmP_354",
                 "TmP_355[2:0]",
                 "TmP_356",
                 "TmP_357",
                 "TmP_358",
                 "TmP_359",
                 "TmP_36",
                 "TmP_360",
                 "TmP_361",
                 "TmP_362",
                 "TmP_363",
                 "TmP_364",
                 "TmP_365",
                 "TmP_366",
                 "TmP_367",
                 "TmP_368",
                 "TmP_369",
                 "TmP_37[1:0]",
                 "TmP_370",
                 "TmP_371",
                 "TmP_372",
                 "TmP_373",
                 "TmP_374",
                 "TmP_375",
                 "TmP_376",
                 "TmP_377",
                 "TmP_378",
                 "TmP_379",
                 "TmP_38",
                 "TmP_380",
                 "TmP_381",
                 "TmP_382",
                 "TmP_383",
                 "TmP_384",
                 "TmP_385",
                 "TmP_386",
                 "TmP_387",
                 "TmP_388",
                 "TmP_389",
                 "TmP_39[5:0]",
                 "TmP_390",
                 "TmP_391",
                 "TmP_392",
                 "TmP_393",
                 "TmP_394",
                 "TmP_395",
                 "TmP_396",
                 "TmP_397",
                 "TmP_398",
                 "TmP_399",
                 "TmP_4[23:0]",
                 "TmP_40",
                 "TmP_400",
                 "TmP_401",
                 "TmP_402",
                 "TmP_403",
                 "TmP_404",
                 "TmP_405",
                 "TmP_406",
                 "TmP_407",
                 "TmP_408",
                 "TmP_409",
                 "TmP_41",
                 "TmP_410",
                 "TmP_411",
                 "TmP_412",
                 "TmP_413",
                 "TmP_414",
                 "TmP_415",
                 "TmP_416",
                 "TmP_417",
                 "TmP_418",
                 "TmP_419",
                 "TmP_42",
                 "TmP_420[1:0]",
                 "TmP_421",
                 "TmP_422",
                 "TmP_423",
                 "TmP_424",
                 "TmP_425",
                 "TmP_426",
                 "TmP_427",
                 "TmP_428",
                 "TmP_429",
                 "TmP_43",
                 "TmP_430",
                 "TmP_431",
                 "TmP_432",
                 "TmP_433",
                 "TmP_434",
                 "TmP_435",
                 "TmP_436",
                 "TmP_437",
                 "TmP_438",
                 "TmP_439",
                 "TmP_44",
                 "TmP_440",
                 "TmP_441",
                 "TmP_442",
                 "TmP_443",
                 "TmP_444",
                 "TmP_445",
                 "TmP_446",
                 "TmP_447",
                 "TmP_448",
                 "TmP_449",
                 "TmP_45",
                 "TmP_450",
                 "TmP_451",
                 "TmP_452",
                 "TmP_453",
                 "TmP_454",
                 "TmP_455",
                 "TmP_456",
                 "TmP_457",
                 "TmP_458",
                 "TmP_459",
                 "TmP_46",
                 "TmP_460",
                 "TmP_461",
                 "TmP_462",
                 "TmP_463",
                 "TmP_464",
                 "TmP_465",
                 "TmP_466",
                 "TmP_467",
                 "TmP_468",
                 "TmP_469",
                 "TmP_47",
                 "TmP_470",
                 "TmP_471",
                 "TmP_472",
                 "TmP_473",
                 "TmP_474",
                 "TmP_475",
                 "TmP_476",
                 "TmP_477",
                 "TmP_478",
                 "TmP_479",
                 "TmP_48",
                 "TmP_480",
                 "TmP_481",
                 "TmP_482",
                 "TmP_483",
                 "TmP_484",
                 "TmP_485",
                 "TmP_486",
                 "TmP_487",
                 "TmP_488",
                 "TmP_489",
                 "TmP_49",
                 "TmP_490",
                 "TmP_491",
                 "TmP_492",
                 "TmP_493",
                 "TmP_494",
                 "TmP_495",
                 "TmP_496",
                 "TmP_497",
                 "TmP_498",
                 "TmP_499",
                 "TmP_5",
                 "TmP_50",
                 "TmP_500",
                 "TmP_501",
                 "TmP_502",
                 "TmP_503",
                 "TmP_504",
                 "TmP_505",
                 "TmP_506",
                 "TmP_507",
                 "TmP_508",
                 "TmP_509",
                 "TmP_51",
                 "TmP_510",
                 "TmP_511",
                 "TmP_512",
                 "TmP_513",
                 "TmP_514",
                 "TmP_515",
                 "TmP_516",
                 "TmP_517",
                 "TmP_518",
                 "TmP_519",
                 "TmP_52[10:0]",
                 "TmP_520",
                 "TmP_521",
                 "TmP_522",
                 "TmP_523",
                 "TmP_524",
                 "TmP_525",
                 "TmP_526",
                 "TmP_527",
                 "TmP_528",
                 "TmP_529",
                 "TmP_53[3:0]",
                 "TmP_530",
                 "TmP_531",
                 "TmP_532",
                 "TmP_533",
                 "TmP_534",
                 "TmP_535",
                 "TmP_536",
                 "TmP_537",
                 "TmP_538",
                 "TmP_539",
                 "TmP_54",
                 "TmP_540",
                 "TmP_541",
                 "TmP_542",
                 "TmP_543",
                 "TmP_544",
                 "TmP_545",
                 "TmP_546",
                 "TmP_547",
                 "TmP_548",
                 "TmP_549",
                 "TmP_55[7:0]",
                 "TmP_550",
                 "TmP_551",
                 "TmP_552",
                 "TmP_553",
                 "TmP_554",
                 "TmP_555",
                 "TmP_556",
                 "TmP_557",
                 "TmP_558",
                 "TmP_559",
                 "TmP_56",
                 "TmP_560",
                 "TmP_561",
                 "TmP_562",
                 "TmP_563",
                 "TmP_564",
                 "TmP_565",
                 "TmP_566",
                 "TmP_567",
                 "TmP_568",
                 "TmP_569",
                 "TmP_57[5:0]",
                 "TmP_570",
                 "TmP_571",
                 "TmP_572",
                 "TmP_573",
                 "TmP_574",
                 "TmP_575",
                 "TmP_576",
                 "TmP_577",
                 "TmP_578",
                 "TmP_579",
                 "TmP_58",
                 "TmP_580",
                 "TmP_581",
                 "TmP_582",
                 "TmP_583",
                 "TmP_584",
                 "TmP_585",
                 "TmP_586",
                 "TmP_587",
                 "TmP_588",
                 "TmP_589",
                 "TmP_59[2:0]",
                 "TmP_590",
                 "TmP_591",
                 "TmP_592",
                 "TmP_593",
                 "TmP_594",
                 "TmP_595",
                 "TmP_596",
                 "TmP_597",
                 "TmP_598",
                 "TmP_599",
                 "TmP_6",
                 "TmP_60",
                 "TmP_600",
                 "TmP_601",
                 "TmP_602",
                 "TmP_603",
                 "TmP_604",
                 "TmP_605",
                 "TmP_606",
                 "TmP_607",
                 "TmP_608",
                 "TmP_609",
                 "TmP_61[1:0]",
                 "TmP_610",
                 "TmP_611",
                 "TmP_612",
                 "TmP_613",
                 "TmP_614",
                 "TmP_615",
                 "TmP_616",
                 "TmP_617",
                 "TmP_618",
                 "TmP_619",
                 "TmP_62",
                 "TmP_620",
                 "TmP_621",
                 "TmP_622",
                 "TmP_623",
                 "TmP_624",
                 "TmP_625",
                 "TmP_626",
                 "TmP_627",
                 "TmP_628",
                 "TmP_629",
                 "TmP_63",
                 "TmP_630",
                 "TmP_631",
                 "TmP_632",
                 "TmP_633",
                 "TmP_634",
                 "TmP_635",
                 "TmP_636",
                 "TmP_637",
                 "TmP_638",
                 "TmP_639",
                 "TmP_64",
                 "TmP_640",
                 "TmP_641",
                 "TmP_642",
                 "TmP_643",
                 "TmP_644",
                 "TmP_645",
                 "TmP_646",
                 "TmP_647",
                 "TmP_648",
                 "TmP_649",
                 "TmP_65",
                 "TmP_650",
                 "TmP_651",
                 "TmP_652",
                 "TmP_653",
                 "TmP_654",
                 "TmP_655",
                 "TmP_656",
                 "TmP_657",
                 "TmP_658",
                 "TmP_659",
                 "TmP_66",
                 "TmP_660",
                 "TmP_661",
                 "TmP_662",
                 "TmP_663",
                 "TmP_664",
                 "TmP_665",
                 "TmP_666",
                 "TmP_667",
                 "TmP_668",
                 "TmP_669",
                 "TmP_67",
                 "TmP_670",
                 "TmP_671",
                 "TmP_672",
                 "TmP_673",
                 "TmP_674",
                 "TmP_675",
                 "TmP_676",
                 "TmP_677",
                 "TmP_678",
                 "TmP_679",
                 "TmP_68",
                 "TmP_680",
                 "TmP_681",
                 "TmP_682",
                 "TmP_683",
                 "TmP_684",
                 "TmP_685",
                 "TmP_686",
                 "TmP_687",
                 "TmP_688",
                 "TmP_689",
                 "TmP_69[1:0]",
                 "TmP_690",
                 "TmP_691",
                 "TmP_692",
                 "TmP_693[2:0]",
                 "TmP_694",
                 "TmP_695",
                 "TmP_696",
                 "TmP_697",
                 "TmP_698",
                 "TmP_699",
                 "TmP_7",
                 "TmP_70[1:0]",
                 "TmP_700",
                 "TmP_701",
                 "TmP_702",
                 "TmP_703",
                 "TmP_704",
                 "TmP_705",
                 "TmP_706",
                 "TmP_707",
                 "TmP_708",
                 "TmP_709",
                 "TmP_71",
                 "TmP_710[1:0]",
                 "TmP_711",
                 "TmP_712",
                 "TmP_713",
                 "TmP_714",
                 "TmP_715",
                 "TmP_716",
                 "TmP_717",
                 "TmP_718",
                 "TmP_719",
                 "TmP_72",
                 "TmP_720",
                 "TmP_721",
                 "TmP_722",
                 "TmP_723",
                 "TmP_724",
                 "TmP_725",
                 "TmP_726",
                 "TmP_727[3:0]",
                 "TmP_728[3:0]",
                 "TmP_729[3:0]",
                 "TmP_73[8:0]",
                 "TmP_730",
                 "TmP_731",
                 "TmP_732",
                 "TmP_733",
                 "TmP_734",
                 "TmP_735",
                 "TmP_736[31:0]",
                 "TmP_737[5:0]",
                 "TmP_738[35:0]",
                 "TmP_739[35:0]",
                 "TmP_74[5:0]",
                 "TmP_740[33:0]",
                 "TmP_741[33:0]",
                 "TmP_742[66:0]",
                 "TmP_743[66:0]",
                 "TmP_744[66:0]",
                 "TmP_745[66:0]",
                 "TmP_746[66:0]",
                 "TmP_747[66:0]",
                 "TmP_748[66:0]",
                 "TmP_749[66:0]",
                 "TmP_75",
                 "TmP_750[66:0]",
                 "TmP_751[66:0]",
                 "TmP_752[66:0]",
                 "TmP_753[66:0]",
                 "TmP_754[66:0]",
                 "TmP_755[66:0]",
                 "TmP_756[66:0]",
                 "TmP_757[66:0]",
                 "TmP_758[66:0]",
                 "TmP_759[66:0]",
                 "TmP_76",
                 "TmP_760[66:0]",
                 "TmP_761[66:0]",
                 "TmP_762[66:0]",
                 "TmP_763[66:0]",
                 "TmP_764[10:0]",
                 "TmP_765[66:0]",
                 "TmP_766[66:0]",
                 "TmP_767[66:0]",
                 "TmP_768[66:0]",
                 "TmP_769[66:0]",
                 "TmP_77[1:0]",
                 "TmP_770[66:0]",
                 "TmP_771[66:0]",
                 "TmP_772[66:0]",
                 "TmP_773[66:0]",
                 "TmP_774[66:0]",
                 "TmP_775[66:0]",
                 "TmP_776[66:0]",
                 "TmP_777[66:0]",
                 "TmP_778",
                 "TmP_779",
                 "TmP_78[2:0]",
                 "TmP_780",
                 "TmP_781[3:0]",
                 "TmP_782[3:0]",
                 "TmP_783[3:0]",
                 "TmP_784[31:0]",
                 "TmP_785[31:0]",
                 "TmP_786[5:0]",
                 "TmP_787[47:0]",
                 "TmP_788[7:0]",
                 "TmP_789[1:0]",
                 "TmP_79",
                 "TmP_790[1:0]",
                 "TmP_791[47:0]",
                 "TmP_792[1:0]",
                 "TmP_793",
                 "TmP_794[1:0]",
                 "TmP_795",
                 "TmP_8",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82",
                 "TmP_83",
                 "TmP_84",
                 "TmP_85",
                 "TmP_86",
                 "TmP_87",
                 "TmP_88",
                 "TmP_89",
                 "TmP_9[3:0]",
                 "TmP_90",
                 "TmP_91",
                 "TmP_92",
                 "TmP_93",
                 "TmP_94",
                 "TmP_95",
                 "TmP_96",
                 "TmP_97",
                 "TmP_98",
                 "TmP_99",
                 "a_ivar",
                 "abbruch",
                 "abbruch2",
                 "abo_int",
                 "abort",
                 "acb_flag",
                 "acb_op",
                 "acb_reg",
                 "acc1",
                 "acc2",
                 "addr_cmp",
                 "adrd1[18:0]",
                 "adrd2[18:0]",
                 "adwr2[18:0]",
                 "ai_next[30:0]",
                 "atyd[2:0]",
                 "atys[2:0]",
                 "auop_d[3:0]",
                 "auop_s[3:0]",
                 "bit_reg",
                 "bpt_flag",
                 "branch",
                 "carry_psr",
                 "cc_feld[3:0]",
                 "chk_rmw",
                 "cinv_flag",
                 "clr_sflag",
                 "cmps_flag",
                 "dbg_en",
                 "dbg_flag",
                 "dbg_s",
                 "dbg_trap",
                 "dc_ilo",
                 "dc_user",
                 "de_flag",
                 "dest_flag",
                 "dest_r[5:0]",
                 "dest_rl[5:0]",
                 "di_stat[3:0]",
                 "dia_flag",
                 "dia_op",
                 "diacb[3:0]",
                 "dim_feld[3:0]",
                 "disp_ok",
                 "disp_sel[3:0]",
                 "disp_val[31:0]",
                 "do_long",
                 "do_xor",
                 "dowait[7:0]",
                 "dvz_trap",
                 "dw_info",
                 "endea[7:0]",
                 "ex_br_op[1:0]",
                 "exc_vector[3:0]",
                 "exception",
                 "exin_cmd",
                 "exr11[18:0]",
                 "exr12[18:0]",
                 "exr22[18:0]",
                 "extract",
                 "exw22[18:0]",
                 "flag",
                 "flag_flag",
                 "format1",
                 "fpu_trap",
                 "gen_src1[35:0]",
                 "gen_src2[33:0]",
                 "goacb[7:0]",
                 "hdl_a[2:0]",
                 "hdl_b[1:0]",
                 "hdl_c[2:0]",
                 "hdl_d[1:0]",
                 "hdl_e[2:0]",
                 "hdl_f[1:0]",
                 "hdl_g[1:0]",
                 "hdl_h[1:0]",
                 "hdo_a[3:0]",
                 "hdo_c[3:0]",
                 "hdo_d[7:0]",
                 "hdo_e[3:0]",
                 "hdr_a[5:0]",
                 "hdr_b[5:0]",
                 "hdr_c[5:0]",
                 "hdr_d[5:0]",
                 "hdr_e[5:0]",
                 "hdr_f[5:0]",
                 "hdr_g[5:0]",
                 "hdr_m[5:0]",
                 "hdx_a",
                 "hzl_a[1:0]",
                 "hzl_b[2:0]",
                 "hzr_a[5:0]",
                 "hzr_b[5:0]",
                 "hzr_c[5:0]",
                 "hzr_s[5:0]",
                 "ia_save",
                 "iabo_fall",
                 "iabort",
                 "idx",
                 "idx_1[3:0]",
                 "idx_2[3:0]",
                 "idx_bytes[15:0]",
                 "idx_feld[15:0]",
                 "idx_n[1:0]",
                 "idx_reg[15:0]",
                 "imme_i[31:0]",
                 "index_cmd",
                 "init_rlist",
                 "inss_op",
                 "int_flag",
                 "interrupt",
                 "irrw1[6:0]",
                 "irrw2[6:0]",
                 "ivec_flag",
                 "jsr_flag",
                 "jump",
                 "kill_opt",
                 "kurz_st",
                 "larger",
                 "ld_disp",
                 "ldoreg[1:0]",
                 "ldpc_phase",
                 "lmrreg[5:0]",
                 "long",
                 "long_reg",
                 "m_usel",
                 "m_ussu",
                 "misc_vectors[3:0]",
                 "mmu_sel",
                 "mpoi_1",
                 "mpoi_2",
                 "mt_flag",
                 "n_idx[1:0]",
                 "negativ",
                 "new_addr[18:0]",
                 "new_fp",
                 "new_nx[7:0]",
                 "new_op[66:0]",
                 "new_ph[7:0]",
                 "new_regs[13:0]",
                 "new_spsel",
                 "next",
                 "nmi_flag",
                 "nmi_reg[1:0]",
                 "no_init",
                 "no_modul[6:0]",
                 "no_t2p",
                 "no_trap",
                 "nxrd1[3:0]",
                 "nxrw2[3:0]",
                 "old_su",
                 "op1_feld[52:0]",
                 "op2_feld[47:0]",
                 "op3_feld[47:0]",
                 "op_12byte",
                 "op_1byte",
                 "op_2byte",
                 "op_3byte",
                 "op_feld[47:0]",
                 "op_feld_reg[47:0]",
                 "op_ilo",
                 "op_ok",
                 "op_psr[10:0]",
                 "op_scp[10:0]",
                 "op_setcfg",
                 "op_sho[10:0]",
                 "op_str[10:0]",
                 "opc_bits[47:0]",
                 "oper_i[10:0]",
                 "opera[10:0]",
                 "opt_imme",
                 "opti_byte[7:0]",
                 "otype[1:0]",
                 "ovf2_op",
                 "ovf_flag",
                 "ovf_op",
                 "ovf_pipe[3:0]",
                 "pc_match",
                 "ph_match",
                 "ph_str[7:0]",
                 "phase_ein[7:0]",
                 "phase_exc",
                 "phase_idx",
                 "phase_reg[7:0]",
                 "phrd1[7:0]",
                 "phrd2[7:0]",
                 "phwr2[7:0]",
                 "pop_1[12:0]",
                 "pop_fp[18:0]",
                 "ppfp[7:0]",
                 "psr_code[2:0]",
                 "quei1[6:0]",
                 "quet1[6:0]",
                 "qw_flag",
                 "qword",
                 "re_wr[18:0]",
                 "reg_nr[2:0]",
                 "rega1[6:0]",
                 "rega2[6:0]",
                 "resto[5:0]",
                 "reti_flag",
                 "rett_exc",
                 "rmw",
                 "rpointer[2:0]",
                 "rrepa[7:0]",
                 "rstr0[6:0]",
                 "rstr1[6:0]",
                 "rstr2[6:0]",
                 "rw_bit",
                 "rwval_flag",
                 "s_mod[1:0]",
                 "s_user",
                 "save_pc[18:0]",
                 "save_reg",
                 "saver[6:0]",
                 "sdest_flag",
                 "set_dest",
                 "set_src",
                 "setcfg",
                 "setcfg_lsb",
                 "short_def",
                 "short_op",
                 "short_op_reg",
                 "skps_flag",
                 "spu_block",
                 "spupd",
                 "spupd_i",
                 "src1_addr[4:0]",
                 "src1_le[1:0]",
                 "src1_tos[1:0]",
                 "src2_addr[4:0]",
                 "src2_flag",
                 "src2_le[1:0]",
                 "src_1[6:0]",
                 "src_1l[6:0]",
                 "src_2[6:0]",
                 "src_2l[6:0]",
                 "ssrc_flag",
                 "st_dest[18:0]",
                 "st_len[18:0]",
                 "st_src[18:0]",
                 "st_src2[18:0]",
                 "st_trde[18:0]",
                 "st_trs2[18:0]",
                 "stack[6:0]",
                 "stack_sel[1:0]",
                 "start_i[1:0]",
                 "state_0[66:0]",
                 "state_group_50[66:0]",
                 "state_group_60[66:0]",
                 "stop",
                 "stop_d",
                 "store_pc",
                 "string_ende",
                 "svc_flag",
                 "t2p",
                 "tos_oper[33:0]",
                 "trac_flag",
                 "ttstak[6:0]",
                 "type_nmi",
                 "upd_info",
                 "usp_1[6:0]",
                 "usp_2[6:0]",
                 "valid[2:0]",
                 "valid_size",
                 "wait_reg[8:0]",
                 "waitop[8:0]",
                 "wlor",
                 "wmaske_i[1:0]",
                 "wradr_i[5:0]",
                 "wren_i",
                 "wrval_flag",
                 "wstr0[5:0]",
                 "wstr1[5:0]",
                 "wstr2[5:0]",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _eq 4 "DECODER.v:451" ["TmP_228"] ["exc_vector[3:0]"] ["0b0010"] ,
        _eq 5 "DECODER.v:463" ["TmP_230"] ["OPREG[6:2]"] ["0b00011"] ,
        _logic_not 2 "DECODER.v:464" ["TmP_231"] ["OPREG[3:2]"],
        _logic_not 2 "DECODER.v:465" ["TmP_233"] ["OPREG[11:10]"],
        _eq 8 "DECODER.v:466" ["TmP_234"] ["OPREG[7:0]"] ["0b11101110"] ,
        _eq 4 "DECODER.v:469" ["TmP_236"] ["OPREG[13:10]"] ["0b0001"] ,
        _eq 1 "DECODER.v:470" ["TmP_237"] ["OPREG[11]"] ["OPREG[10]"] ,
        _eq 4 "DECODER.v:476" ["TmP_239"] ["exc_vector[3:0]"] ["0b1110"] ,
        _eq 8 "DECODER.v:490" ["TmP_241"] ["phase_reg[7:0]"] ["0b11000000"] ,
        _eq 8 "DECODER.v:490" ["TmP_242"] ["phase_reg[7:0]"] ["0b11000111"] ,
        _eq 8 "DECODER.v:490" ["TmP_243"] ["phase_reg[7:0]"] ["0b11001000"] ,
        _eq 8 "DECODER.v:490" ["TmP_240"] ["phase_reg[7:0]"] ["0b10000001"] ,
        _eq 8 "DECODER.v:491" ["TmP_244"] ["phase_reg[7:0]"] ["0b11010111"] ,
        _eq 8 "DECODER.v:491" ["TmP_245"] ["phase_reg[7:0]"] ["0b11011111"] ,
        _eq 8 "DECODER.v:492" ["TmP_246"] ["phase_reg[7:0]"] ["0b11000001"] ,
        _eq 8 "DECODER.v:492" ["TmP_247"] ["phase_reg[7:0]"] ["0b11001001"] ,
        _eq 8 "DECODER.v:493" ["TmP_248"] ["phase_reg[7:0]"] ["0b11000100"] ,
        _eq 8 "DECODER.v:493" ["TmP_249"] ["phase_reg[7:0]"] ["0b11001100"] ,
        _eq 4 "DECODER.v:563" ["TmP_251"] ["OPREG[3:0]"] ["0b0010"] ,
        _eq 8 "DECODER.v:568" ["TmP_253"] ["phase_reg[7:0]"] ["0b00110111"] ,
        _eq 8 "DECODER.v:568" ["TmP_254"] ["phase_reg[7:0]"] ["0b01101011"] ,
        _eq 8 "DECODER.v:571" ["TmP_255"] ["phase_reg[7:0]"] ["0b00111110"] ,
        _eq 8 "DECODER.v:572" ["TmP_256"] ["phase_reg[7:0]"] ["0b01000011"] ,
        _eq 8 "DECODER.v:573" ["TmP_257"] ["phase_reg[7:0]"] ["0b01001001"] ,
        _eq 8 "DECODER.v:574" ["TmP_258"] ["phase_reg[7:0]"] ["0b01001110"] ,
        _eq 8 "DECODER.v:575" ["TmP_259"] ["phase_reg[7:0]"] ["0b01100110"] ,
        _eq 8 "DECODER.v:576" ["TmP_260"] ["phase_reg[7:0]"] ["0b01111011"] ,
        _eq 8 "DECODER.v:578" ["TmP_252"] ["phase_reg[7:0]"] ["0b00000001"] ,
        _eq 8 "DECODER.v:579" ["TmP_261"] ["phase_reg[7:0]"] ["0b00101011"] ,
        _eq 8 "DECODER.v:590" ["TmP_262"] ["phase_reg[7:0]"] ["0b01001011"] ,
        _eq 8 "DECODER.v:591" ["TmP_54"] ["phase_reg[7:0]"] ["0b10000000"] ,
        _eq 8 "DECODER.v:620" ["TmP_263"] ["phase_reg[7:0]"] ["0b00101110"] ,
        _eq 2 "DECODER.v:646" ["TmP_264"] ["ACC_FELD[13:12]"] ["0b11"] ,
        _eq 3 "DECODER.v:651" ["ld_disp"] ["dim_feld[3:1]"] ["0b111"] ,
        _eq 1 "DECODER.v:717" ["TmP_265"] ["old_su"] ["PSR[9]"] ,
        _eq 2 "DECODER.v:741" ["TmP_266"] ["OPREG[1:0]"] ["0b11"] ,
        _eq 5 "DECODER.v:745" ["TmP_267"] ["OPREG[15:11]"] ["0b10111"] ,
        _eq 14 "DECODER.v:756" ["TmP_268"] ["OPREG[13:0]"] ["0b00101100001110"] ,
        _logic_not 2 "DECODER.v:776" ["TmP_269"] ["OPREG[10:9]"],
        _eq 2 "DECODER.v:792" ["TmP_271"] ["OPREG[3:2]"] ["0b11"] ,
        _eq 3 "DECODER.v:795" ["TmP_270"] ["OPREG[6:4]"] ["0b011"] ,
        _eq 5 "DECODER.v:798" ["TmP_235"] ["OPREG[6:2]"] ["0b10011"] ,
        _eq 9 "DECODER.v:827" ["TmP_272"] ["OPREG[10:2]"] ["0b101011111"] ,
        _eq 9 "DECODER.v:834" ["TmP_273"] ["OPREG[10:2]"] ["0b110011111"] ,
        _logic_not 2 "DECODER.v:836" ["TmP_274"] ["OPREG[7:6]"],
        _logic_not 2 "DECODER.v:836" ["TmP_275"] ["TmP_790[1:0]"],
        _eq 7 "DECODER.v:837" ["TmP_276"] ["OPREG[6:0]"] ["0b0101110"] ,
        _eq 4 "DECODER.v:839" ["TmP_277"] ["OPREG[13:10]"] ["0b0010"] ,
        _eq 2 "DECODER.v:866" ["TmP_278"] ["OPREG[9:8]"] ["0b11"] ,
        _logic_not 2 "DECODER.v:930" ["TmP_279"] ["OPREG[18:17]"],
        _eq 3 "DECODER.v:946" ["TmP_280"] ["OPREG[2:0]"] ["0b110"] ,
        _logic_not 2 "DECODER.v:988" ["TmP_281"] ["OPREG[1:0]"],
        _eq 5 "DECODER.v:988" ["TmP_282"] ["OPREG[15:11]"] ["0b10100"] ,
        _eq 4 "DECODER.v:990" ["TmP_283"] ["OPREG[5:2]"] ["0b0001"] ,
        _eq 4 "DECODER.v:990" ["TmP_284"] ["OPREG[5:2]"] ["0b0101"] ,
        _eq 5 "DECODER.v:991" ["TmP_285"] ["OPREG[6:2]"] ["0b11111"] ,
        _eq 2 "DECODER.v:991" ["TmP_286"] ["OPREG[8:7]"] ["0b10"] ,
        _eq 5 "DECODER.v:993" ["TmP_287"] ["OPREG[23:19]"] ["0b10100"] ,
        _eq 8 "DECODER.v:994" ["TmP_232"] ["OPREG[7:0]"] ["0b01001110"] ,
        _eq 8 "DECODER.v:995" ["TmP_238"] ["OPREG[7:0]"] ["0b11001110"] ,
        _eq 2 "DECODER.v:995" ["TmP_288"] ["OPREG[13:12]"] ["0b01"] ,
        _logic_not 2 "DECODER.v:995" ["hdl_g[0]"] ["OPREG[9:8]"],
        _eq 2 "DECODER.v:997" ["TmP_289"] ["OPREG[1:0]"] ["0b10"] ,
        _land 1 "DECODER.v:565" ["TmP_290"] ["interrupt"] ["string_ende"],
        _logic_not 1 "DECODER.v:459" ["TmP_291"] ["PSR[4]"],
        _lor 1 "DECODER.v:412" ["TmP_292"] ["PHASE_0"] ["string_ende"],
        _lor 1 "DECODER.v:459" ["TmP_294"] ["ovf_flag"] ["TmP_291"],
        _lor 1 "DECODER.v:563" ["TmP_293"] ["PHASE_0"] ["abbruch"],
        _lor 1 "DECODER.v:565" ["TmP_295"] ["flag_flag"] ["TmP_290"],
        _lor 1 "DECODER.v:592" ["TmP_297"] ["TmP_296"] ["rett_exc"],
        _lor 1 "DECODER.v:594" ["TmP_296"] ["PHASE_0"] ["phase_exc"],
        _lor 1 "DECODER.v:631" ["TmP_298"] ["ACC_DONE"] ["init_rlist"],
        _ne 3 "DECODER.v:1011" ["TmP_299"] ["lmrreg[3:1]"] ["0b110"] ,
        _logic_reduce_bool 3 "DECODER.v:1054" ["TmP_300"] ["OPREG[17:15]"],
        _logic_reduce_bool 4 "DECODER.v:1191" ["TmP_301"] ["phase_reg[7:4]"],
        _ne 2 "DECODER.v:649" ["TmP_303"] ["dim_feld[2:1]"] ["0b11"] ,
        _ne 2 "DECODER.v:739" ["TmP_302"] ["OPREG[1:0]"] ["0b10"] ,
        _ne 2 "DECODER.v:872" ["hdl_h[0]"] ["OPREG[9:8]"] ["0b01"] ,
        _logic_reduce_bool 2 "DECODER.v:872" ["hdl_g[1]"] ["OPREG[9:8]"],
        _ne 4 "DECODER.v:946" ["TmP_304"] ["op3_feld[7:4]"] ["0b1010"] ,
        _logic_reduce_bool 2 "DECODER.v:970" ["TmP_305"] ["op_feld[22:21]"],
        _logic_reduce_bool 2 "DECODER.v:971" ["TmP_306"] ["op_feld[17:16]"],
        _logic_reduce_bool 2 "DECODER.v:974" ["idx"] ["idx_n[1:0]"],
        _ne 3 "DECODER.v:990" ["TmP_307"] ["OPREG[10:8]"] ["0b111"] ,
        _ne 2 "DECODER.v:991" ["TmP_308"] ["OPREG[10:9]"] ["0b11"] ,
        _ne 3 "DECODER.v:993" ["TmP_309"] ["OPREG[18:16]"] ["0b111"] ,
        _not 1 "DECODER.v:1020" ["ENA_HK"] ["TmP_81"],
        _not 1 "DECODER.v:1025" ["TmP_310"] ["OPREG[13]"],
        _not 1 "DECODER.v:1034" ["TmP_311"] ["phase_reg[7]"],
        _not 1 "DECODER.v:1040" ["TmP_312"] ["op_feld_reg[3]"],
        _not 1 "DECODER.v:1061" ["TmP_315"] ["PHASE_0"],
        _not 1 "DECODER.v:1064" ["TmP_314"] ["OPREG[7]"],
        _not 1 "DECODER.v:1099" ["TmP_316"] ["op_feld[47]"],
        _not 1 "DECODER.v:1553" ["TmP_318"] ["CFG[0]"],
        _not 1 "DECODER.v:1582" ["TmP_317"] ["op_feld[40]"],
        _not 1 "DECODER.v:1633" ["TmP_313"] ["kurz_st"],
        _not 1 "DECODER.v:1715" ["TmP_319"] ["stack[5]"],
        _not 1 "DECODER.v:1725" ["TmP_320"] ["new_op[7]"],
        _not 1 "DECODER.v:1729" ["TmP_321"] ["wren_i"],
        _not 1 "DECODER.v:1729" ["TmP_322"] ["ldoreg[1]"],
        _not 1 "DECODER.v:1729" ["TmP_323"] ["spu_block"],
        _not 1 "DECODER.v:1746" ["TmP_324"] ["abort"],
        _not 1 "DECODER.v:1758" ["TmP_325"] ["IC_READ"],
        _not 1 "DECODER.v:337" ["TmP_326"] ["dim_feld[0]"],
        _not 1 "DECODER.v:337" ["TmP_327"] ["dim_feld[3]"],
        _not 1 "DECODER.v:339" ["TmP_328"] ["DONE"],
        _not 1 "DECODER.v:339" ["TmP_329"] ["TmP_103"],
        _not 1 "DECODER.v:357" ["TmP_330"] ["op_1byte"],
        _not 1 "DECODER.v:371" ["TmP_334"] ["no_t2p"],
        _not 1 "DECODER.v:384" ["TmP_335"] ["GENSTAT[1]"],
        _not 1 "DECODER.v:386" ["TmP_336"] ["INT_N"],
        _not 1 "DECODER.v:388" ["TmP_337"] ["stop_d"],
        _not 1 "DECODER.v:398" ["TmP_333"] ["op_ok"],
        _not 1 "DECODER.v:400" ["TmP_339"] ["ia_save"],
        _not 1 "DECODER.v:404" ["TmP_340"] ["iabort"],
        _not 1 "DECODER.v:442" ["op_psr[2]"] ["psr_code[1]"],
        _not 1 "DECODER.v:454" ["TmP_331"] ["ovf_flag"],
        _not 1 "DECODER.v:454" ["TmP_332"] ["dbg_flag"],
        _not 1 "DECODER.v:476" ["TmP_343"] ["TmP_125"],
        _not 1 "DECODER.v:480" ["TmP_344"] ["exception"],
        _not 1 "DECODER.v:491" ["TmP_345"] ["TmP_793"],
        _not 1 "DECODER.v:501" ["TmP_346"] ["clr_sflag"],
        _not 1 "DECODER.v:503" ["rrepa[0]"] ["sdest_flag"],
        _not 1 "DECODER.v:569" ["TmP_347"] ["ACB_ZERO"],
        _not 1 "DECODER.v:590" ["TmP_348"] ["reti_flag"],
        _not 1 "DECODER.v:596" ["TmP_349"] ["PSR[9]"],
        _not 1 "DECODER.v:603" ["TmP_351"] ["PSR[0]"],
        _not 1 "DECODER.v:609" ["TmP_354"] ["PSR[5]"],
        _not 1 "DECODER.v:610" ["TmP_352"] ["PSR[2]"],
        _not 1 "DECODER.v:612" ["TmP_353"] ["PSR[7]"],
        _not 1 "DECODER.v:612" ["TmP_350"] ["PSR[6]"],
        _not 3 "DECODER.v:631" ["TmP_355[2:0]"] ["reg_nr[2:0]"],
        _not 1 "DECODER.v:637" ["TmP_338"] ["di_stat[0]"],
        _not 1 "DECODER.v:643" ["TmP_356"] ["ACC_DONE"],
        _not 1 "DECODER.v:646" ["TmP_357"] ["qw_flag"],
        _not 1 "DECODER.v:704" ["TmP_341"] ["TRAPS[0]"],
        _not 1 "DECODER.v:704" ["TmP_358"] ["TRAPS[1]"],
        _not 1 "DECODER.v:789" ["TmP_359"] ["op2_feld[7]"],
        _not 1 "DECODER.v:792" ["TmP_360"] ["OPREG[5]"],
        _not 1 "DECODER.v:837" ["TmP_342"] ["OPREG[10]"],
        _not 1 "DECODER.v:868" ["hdl_d[0]"] ["hdx_a"],
        _not 1 "DECODER.v:870" ["TmP_361"] ["TmP_795"],
        _not 1 "DECODER.v:880" ["hdr_g[0]"] ["OPREG[14]"],
        _not 1 "DECODER.v:953" ["TmP_362"] ["stop"],
        _not 1 "DECODER.v:972" ["TmP_363"] ["acc2"],
        _not 1 "DECODER.v:990" ["TmP_364"] ["OPREG[2]"],
        _not 1 "DECODER.v:994" ["TmP_365"] ["OPREG[11]"],
        _or 1 "DECODER.v:1006" ["STOP_IC"] ["TmP_192"] ["TmP_193"] ,
        _or 1 "DECODER.v:1040" ["TmP_366"] ["TmP_87"] ["TmP_200"] ,
        _or 1 "DECODER.v:1061" ["TmP_36"] ["TmP_203"] ["TmP_89"] ,
        _or 1 "DECODER.v:1064" ["TmP_367"] ["OPREG[17]"] ["OPREG[15]"] ,
        _or 1 "DECODER.v:1075" ["phase_idx"] ["TmP_205"] ["TmP_206"] ,
        _or 1 "DECODER.v:1097" ["mpoi_1"] ["TmP_207"] ["TmP_208"] ,
        _or 1 "DECODER.v:1117" ["TmP_368"] ["exr12[11]"] ["op_feld[47]"] ,
        _or 1 "DECODER.v:1142" ["mpoi_2"] ["TmP_211"] ["TmP_212"] ,
        _or 1 "DECODER.v:1166" ["TmP_369"] ["exr22[11]"] ["rmw"] ,
        _or 1 "DECODER.v:1166" ["TmP_370"] ["TmP_369"] ["op_feld[44]"] ,
        _or 1 "DECODER.v:1422" ["TmP_371"] ["ex_br_op[1]"] ["jsr_flag"] ,
        _or 1 "DECODER.v:1525" ["TmP_372"] ["INIT_DONE"] ["no_init"] ,
        _or 1 "DECODER.v:1553" ["TmP_373"] ["type_nmi"] ["TmP_318"] ,
        _or 1 "DECODER.v:1560" ["TmP_374"] ["ssrc_flag"] ["sdest_flag"] ,
        _or 1 "DECODER.v:1592" ["TmP_375"] ["IC_READ"] ["STOP_CINV"] ,
        _or 1 "DECODER.v:1714" ["TmP_376"] ["spupd"] ["format1"] ,
        _or 1 "DECODER.v:1714" ["TmP_377"] ["TmP_376"] ["wradr_i[5]"] ,
        _or 1 "DECODER.v:1714" ["TmP_378"] ["TmP_377"] ["wmaske_i[1]"] ,
        _or 1 "DECODER.v:1714" ["TmP_379"] ["TmP_378"] ["index_cmd"] ,
        _or 1 "DECODER.v:1714" ["WMASKE[1]"] ["TmP_379"] ["TmP_214"] ,
        _or 1 "DECODER.v:1716" ["TmP_380"] ["spupd"] ["wren_i"] ,
        _or 1 "DECODER.v:1720" ["TmP_381"] ["new_op[64]"] ["new_op[63]"] ,
        _or 1 "DECODER.v:1720" ["TmP_382"] ["TmP_381"] ["new_op[62]"] ,
        _or 1 "DECODER.v:1741" ["MMU_UPDATE[1]"] ["TmP_215"] ["TmP_216"] ,
        _or 1 "DECODER.v:1745" ["TmP_383"] ["PSR[8]"] ["TmP_99"] ,
        _or 1 "DECODER.v:1745" ["TmP_384"] ["TmP_383"] ["RWVAL[1]"] ,
        _or 1 "DECODER.v:1749" ["TmP_385"] ["TmP_219"] ["TmP_218"] ,
        _or 1 "DECODER.v:1757" ["TmP_386"] ["TmP_221"] ["TmP_222"] ,
        _or 1 "DECODER.v:1757" ["chk_rmw"] ["TmP_386"] ["TmP_101"] ,
        _or 1 "DECODER.v:337" ["TmP_387"] ["TmP_326"] ["ACC_DONE"] ,
        _or 1 "DECODER.v:337" ["TmP_388"] ["TmP_327"] ["di_stat[0]"] ,
        _or 1 "DECODER.v:341" ["next"] ["TmP_779"] ["abbruch"] ,
        _or 1 "DECODER.v:357" ["TmP_389"] ["op_1byte"] ["op_3byte"] ,
        _or 1 "DECODER.v:384" ["TmP_47"] ["TmP_223"] ["TmP_106"] ,
        _or 1 "DECODER.v:389" ["TmP_390"] ["int_flag"] ["nmi_flag"] ,
        _or 1 "DECODER.v:389" ["TmP_391"] ["TmP_315"] ["stop_d"] ,
        _or 1 "DECODER.v:404" ["TmP_43"] ["DC_ABORT"] ["TmP_109"] ,
        _or 1 "DECODER.v:407" ["abort"] ["DC_ABORT"] ["iabort"] ,
        _or 1 "DECODER.v:418" ["ovf_flag"] ["TmP_110"] ["TmP_111"] ,
        _or 1 "DECODER.v:419" ["dbg_flag"] ["dbg_trap"] ["TmP_112"] ,
        _or 1 "DECODER.v:422" ["abbruch"] ["abbruch2"] ["dbg_flag"] ,
        _or 1 "DECODER.v:423" ["TmP_392"] ["abort"] ["TRAPS[0]"] ,
        _or 1 "DECODER.v:423" ["TmP_393"] ["TmP_392"] ["TRAPS[1]"] ,
        _or 1 "DECODER.v:423" ["abbruch2"] ["TmP_393"] ["ovf_flag"] ,
        _or 1 "DECODER.v:426" ["TmP_394"] ["interrupt"] ["svc_flag"] ,
        _or 1 "DECODER.v:426" ["TmP_395"] ["TmP_394"] ["bpt_flag"] ,
        _or 1 "DECODER.v:426" ["TmP_396"] ["TmP_395"] ["ILL"] ,
        _or 1 "DECODER.v:426" ["TmP_397"] ["TmP_396"] ["UNDEF"] ,
        _or 1 "DECODER.v:426" ["TmP_398"] ["TmP_397"] ["trac_flag"] ,
        _or 1 "DECODER.v:426" ["exception"] ["TmP_398"] ["abbruch"] ,
        _or 1 "DECODER.v:429" ["TmP_399"] ["svc_flag"] ["ILL"] ,
        _or 1 "DECODER.v:429" ["TmP_400"] ["bpt_flag"] ["UNDEF"] ,
        _or 1 "DECODER.v:434" ["TmP_401"] ["TRAPS[0]"] ["ovf_flag"] ,
        _or 1 "DECODER.v:434" ["TmP_402"] ["TRAPS[1]"] ["ovf_flag"] ,
        _or 1 "DECODER.v:443" ["TmP_403"] ["abort"] ["ILL"] ,
        _or 1 "DECODER.v:443" ["TmP_404"] ["TmP_403"] ["UNDEF"] ,
        _or 1 "DECODER.v:443" ["psr_code[1]"] ["TmP_404"] ["trac_flag"] ,
        _or 1 "DECODER.v:444" ["op_psr[0]"] ["TmP_113"] ["abort"] ,
        _or 1 "DECODER.v:450" ["abo_int"] ["TmP_228"] ["TmP_229"] ,
        _or 1 "DECODER.v:464" ["TmP_405"] ["TmP_230"] ["TmP_231"] ,
        _or 1 "DECODER.v:466" ["TmP_406"] ["TmP_117"] ["TmP_119"] ,
        _or 1 "DECODER.v:466" ["ovf_op"] ["TmP_406"] ["TmP_120"] ,
        _or 1 "DECODER.v:470" ["TmP_407"] ["TmP_121"] ["TmP_122"] ,
        _or 1 "DECODER.v:470" ["ovf2_op"] ["TmP_407"] ["TmP_124"] ,
        _or 1 "DECODER.v:476" ["TmP_13"] ["dbg_trap"] ["TmP_126"] ,
        _or 1 "DECODER.v:478" ["TmP_12"] ["op_ok"] ["TmP_315"] ,
        _or 1 "DECODER.v:482" ["TmP_408"] ["pc_match"] ["TmP_129"] ,
        _or 1 "DECODER.v:484" ["TmP_7"] ["TRAPS[4]"] ["TmP_130"] ,
        _or 1 "DECODER.v:490" ["TmP_409"] ["TmP_241"] ["TmP_242"] ,
        _or 1 "DECODER.v:490" ["TmP_410"] ["TmP_409"] ["TmP_243"] ,
        _or 1 "DECODER.v:491" ["TmP_411"] ["TmP_410"] ["TmP_240"] ,
        _or 1 "DECODER.v:491" ["TmP_412"] ["TmP_244"] ["TmP_245"] ,
        _or 1 "DECODER.v:491" ["clr_sflag"] ["TmP_411"] ["TmP_131"] ,
        _or 1 "DECODER.v:492" ["set_src"] ["TmP_246"] ["TmP_247"] ,
        _or 1 "DECODER.v:493" ["set_dest"] ["TmP_248"] ["TmP_249"] ,
        _or 1 "DECODER.v:497" ["TmP_68"] ["TmP_132"] ["TmP_133"] ,
        _or 1 "DECODER.v:501" ["TmP_63"] ["TmP_134"] ["TmP_135"] ,
        _or 1 "DECODER.v:563" ["TmP_413"] ["TmP_136"] ["exception"] ,
        _or 1 "DECODER.v:568" ["TmP_414"] ["TmP_252"] ["TmP_253"] ,
        _or 1 "DECODER.v:568" ["store_pc"] ["TmP_414"] ["TmP_254"] ,
        _or 1 "DECODER.v:569" ["TmP_415"] ["TmP_137"] ["TmP_138"] ,
        _or 1 "DECODER.v:569" ["jump"] ["TmP_415"] ["ex_br_op[1]"] ,
        _or 1 "DECODER.v:573" ["TmP_416"] ["TmP_255"] ["TmP_256"] ,
        _or 1 "DECODER.v:574" ["TmP_417"] ["TmP_416"] ["TmP_139"] ,
        _or 1 "DECODER.v:575" ["TmP_418"] ["TmP_417"] ["TmP_258"] ,
        _or 1 "DECODER.v:576" ["TmP_419"] ["TmP_418"] ["TmP_259"] ,
        _or 1 "DECODER.v:576" ["TmP_38"] ["TmP_419"] ["TmP_260"] ,
        _or 1 "DECODER.v:578" ["NEW"] ["TmP_141"] ["LOAD_PC"] ,
        _or 1 "DECODER.v:580" ["LOAD_PC"] ["TmP_142"] ["ldpc_phase"] ,
        _or 2 "DECODER.v:596" ["TmP_420[1:0]"] ["s_mod[1:0]"] ["PSR[9]", "TmP_349"] ,
        _or 1 "DECODER.v:611" ["TmP_421"] ["PSR[2]"] ["PSR[6]"] ,
        _or 1 "DECODER.v:613" ["TmP_422"] ["PSR[7]"] ["PSR[6]"] ,
        _or 1 "DECODER.v:620" ["TmP_31"] ["PHASE_0"] ["TmP_263"] ,
        _or 1 "DECODER.v:648" ["TmP_423"] ["TmP_148"] ["short_op"] ,
        _or 1 "DECODER.v:648" ["LD_IMME"] ["TmP_423"] ["store_pc"] ,
        _or 1 "DECODER.v:650" ["TmP_424"] ["TmP_150"] ["TmP_146"] ,
        _or 1 "DECODER.v:650" ["TmP_425"] ["TmP_424"] ["qw_flag"] ,
        _or 1 "DECODER.v:650" ["TmP_426"] ["TmP_425"] ["short_op"] ,
        _or 1 "DECODER.v:650" ["LD_DIN"] ["TmP_426"] ["store_pc"] ,
        _or 1 "DECODER.v:704" ["TmP_46"] ["spupd"] ["TmP_153"] ,
        _or 1 "DECODER.v:789" ["TmP_427"] ["valid_size"] ["setcfg"] ,
        _or 1 "DECODER.v:792" ["TmP_428"] ["TmP_360"] ["TmP_270"] ,
        _or 1 "DECODER.v:792" ["TmP_429"] ["TmP_155"] ["opt_imme"] ,
        _or 1 "DECODER.v:953" ["TmP_431"] ["TmP_430"] ["op_2byte"] ,
        _or 1 "DECODER.v:953" ["TmP_432"] ["TmP_431"] ["op_3byte"] ,
        _or 1 "DECODER.v:953" ["TmP_433"] ["TmP_432"] ["exception"] ,
        _or 1 "DECODER.v:970" ["acc1"] ["TmP_305"] ["op_feld[46]"] ,
        _or 1 "DECODER.v:971" ["acc2"] ["TmP_306"] ["op_feld[43]"] ,
        _or 1 "DECODER.v:978" ["TmP_430"] ["op_1byte"] ["op_12byte"] ,
        _or 1 "DECODER.v:990" ["TmP_434"] ["TmP_364"] ["TmP_283"] ,
        _or 1 "DECODER.v:990" ["TmP_435"] ["TmP_434"] ["TmP_284"] ,
        _or 1 "DECODER.v:991" ["TmP_436"] ["TmP_164"] ["TmP_166"] ,
        _or 1 "DECODER.v:995" ["TmP_437"] ["TmP_171"] ["TmP_173"] ,
        _or 1 "DECODER.v:995" ["opt_imme"] ["TmP_167"] ["TmP_174"] ,
        _dff 1 "DECODER.v:1749" ["ILO"] ["BCLK"] ["TmP_5"],
        _dff 1 "DECODER.v:1748" ["dc_ilo"] ["BCLK"] ["TmP_15"],
        _dff 1 "DECODER.v:1744" ["dc_user"] ["BCLK"] ["TmP_16"],
        _dff 1 "DECODER.v:1739" ["spu_block"] ["BCLK"] ["TmP_66"],
        _dff 1 "DECODER.v:1736" ["WR_REG"] ["BCLK"] ["TmP_6"],
        _dff 1 "DECODER.v:1725" ["wren_i"] ["BCLK"] ["TmP_75"],
        _dff 2 "DECODER.v:1724" ["ldoreg[1:0]"] ["BCLK"] ["TmP_37[1:0]"],
        _dff 2 "DECODER.v:1723" ["start_i[1:0]"] ["BCLK"] ["TmP_70[1:0]"],
        _dff 1 "DECODER.v:1721" ["ACC_FELD[9]"] ["BCLK"] ["TmP_3"],
        _dff 1 "DECODER.v:1720" ["ACC_FELD[14]"] ["BCLK"] ["TmP_1"],
        _dff 1 "DECODER.v:1711" ["index_cmd"] ["BCLK"] ["TmP_30"],
        _dff 2 "DECODER.v:1709" ["wmaske_i[1:0]"] ["BCLK"] ["op_feld[24:23]"],
        _dff 9 "DECODER.v:1700" ["ACC_FELD[8:0]"] ["BCLK"] ["TmP_2[8:0]"],
        _dff 2 "DECODER.v:1700" ["ACC_FELD[13:12]"] ["BCLK"] ["TmP_77[1:0]"],
        _dff 6 "DECODER.v:1700" ["wradr_i[5:0]"] ["BCLK"] ["TmP_74[5:0]"],
        _dff 4 "DECODER.v:1700" ["disp_sel[3:0]"] ["BCLK"] ["TmP_22[3:0]"],
        _adff 11 "DECODER.v:1696" ["oper_i[10:0]"] ["BRESET"] ["BCLK"] ["TmP_52[10:0]"],
        _adff 1 "DECODER.v:1692" ["spupd_i"] ["BRESET"] ["BCLK"] ["TmP_67"],
        _adff 2 "DECODER.v:1688" ["ACC_FELD[11:10]"] ["BRESET"] ["BCLK"] ["TmP_0[1:0]"],
        _dff 16 "DECODER.v:1078" ["idx_reg[15:0]"] ["BCLK"] ["idx_feld[15:0]"],
        _dff 1 "DECODER.v:1064" ["mt_flag"] ["BCLK"] ["TmP_44"],
        _dff 1 "DECODER.v:1063" ["skps_flag"] ["BCLK"] ["TmP_65"],
        _dff 1 "DECODER.v:1062" ["cmps_flag"] ["BCLK"] ["TmP_11"],
        _dff 1 "DECODER.v:1061" ["kurz_st"] ["BCLK"] ["TmP_36"],
        _dff 1 "DECODER.v:1054" ["kill_opt"] ["BCLK"] ["TmP_35"],
        _dff 1 "DECODER.v:1036" ["wrval_flag"] ["BCLK"] ["TmP_76"],
        _dff 1 "DECODER.v:1032" ["rwval_flag"] ["BCLK"] ["TmP_60"],
        _dff 1 "DECODER.v:1028" ["m_usel"] ["BCLK"] ["TmP_41"],
        _dff 1 "DECODER.v:1024" ["m_ussu"] ["BCLK"] ["TmP_42"],
        _dff 1 "DECODER.v:1016" ["cinv_flag"] ["BCLK"] ["TmP_10"],
        _dff 1 "DECODER.v:1013" ["a_ivar"] ["BCLK"] ["STOP_IC"],
        _dff 1 "DECODER.v:1011" ["no_init"] ["BCLK"] ["TmP_48"],
        _dff 6 "DECODER.v:1009" ["lmrreg[5:0]"] ["BCLK"] ["TmP_39[5:0]"],
        _dff 24 "DECODER.v:1001" ["COP_OP[23:0]"] ["BCLK"] ["TmP_4[23:0]"],
        _dff 48 "DECODER.v:955" ["op_feld_reg[47:0]"] ["BCLK"] ["op_feld[47:0]"],
        _dff 1 "DECODER.v:839" ["inss_op"] ["BCLK"] ["TmP_32"],
        _dff 1 "DECODER.v:838" ["extract"] ["BCLK"] ["TmP_27"],
        _dff 1 "DECODER.v:837" ["exin_cmd"] ["BCLK"] ["TmP_26"],
        _dff 1 "DECODER.v:835" ["bit_reg"] ["BCLK"] ["TmP_8"],
        _dff 1 "DECODER.v:834" ["jsr_flag"] ["BCLK"] ["TmP_34"],
        _dff 1 "DECODER.v:832" ["setcfg_lsb"] ["BCLK"] ["TmP_64"],
        _dff 1 "DECODER.v:831" ["op_setcfg"] ["BCLK"] ["TmP_51"],
        _dff 1 "DECODER.v:826" ["dw_info"] ["BCLK"] ["TmP_23"],
        _dff 9 "DECODER.v:818" ["wait_reg[8:0]"] ["BCLK"] ["TmP_73[8:0]"],
        _dff 1 "DECODER.v:799" ["acb_reg"] ["BCLK"] ["acb_flag"],
        _dff 1 "DECODER.v:793" ["short_op_reg"] ["BCLK"] ["short_def"],
        _dff 1 "DECODER.v:716" ["old_su"] ["BCLK"] ["TmP_50"],
        _adff 2 "DECODER.v:710" ["stack_sel[1:0]"] ["BRESET"] ["BCLK"] ["TmP_69[1:0]"],
        _dff 1 "DECODER.v:706" ["upd_info"] ["BCLK"] ["TmP_72"],
        _adff 1 "DECODER.v:702" ["new_spsel"] ["BRESET"] ["BCLK"] ["TmP_46"],
        _dff 1 "DECODER.v:646" ["qw_flag"] ["BCLK"] ["TmP_56"],
        _adff 1 "DECODER.v:641" ["dim_feld[0]"] ["BRESET"] ["BCLK"] ["TmP_19"],
        _dff 2 "DECODER.v:639" ["dim_feld[2:1]"] ["BCLK"] ["TmP_20[1:0]"],
        _adff 1 "DECODER.v:635" ["dim_feld[3]"] ["BRESET"] ["BCLK"] ["TmP_21"],
        _dff 6 "DECODER.v:631" ["resto[5:0]"] ["BCLK"] ["TmP_57[5:0]"],
        _dff 3 "DECODER.v:622" ["rpointer[2:0]"] ["BCLK"] ["TmP_59[2:0]"],
        _dff 1 "DECODER.v:620" ["init_rlist"] ["BCLK"] ["TmP_31"],
        _dff 2 "DECODER.v:593" ["s_mod[1:0]"] ["BCLK"] ["TmP_61[1:0]"],
        _dff 1 "DECODER.v:592" ["s_user"] ["BCLK"] ["TmP_62"],
        _dff 1 "DECODER.v:591" ["phase_exc"] ["BCLK"] ["TmP_54"],
        _dff 1 "DECODER.v:571" ["ldpc_phase"] ["BCLK"] ["TmP_38"],
        _dff 1 "DECODER.v:562" ["format1"] ["BCLK"] ["TmP_28"],
        _dff 1 "DECODER.v:560" ["dia_flag"] ["BCLK"] ["TmP_17"],
        _dff 4 "DECODER.v:550" ["cc_feld[3:0]"] ["BCLK"] ["TmP_9[3:0]"],
        _dff 2 "DECODER.v:550" ["ex_br_op[1:0]"] ["BCLK"] ["TmP_24[1:0]"],
        _dff 1 "DECODER.v:550" ["new_fp"] ["BCLK"] ["TmP_45"],
        _dff 1 "DECODER.v:550" ["reti_flag"] ["BCLK"] ["TmP_58"],
        _dff 1 "DECODER.v:550" ["dia_op"] ["BCLK"] ["TmP_18"],
        _adff 1 "DECODER.v:499" ["sdest_flag"] ["BRESET"] ["BCLK"] ["TmP_63"],
        _adff 1 "DECODER.v:495" ["ssrc_flag"] ["BRESET"] ["BCLK"] ["TmP_68"],
        _dff 1 "DECODER.v:484" ["addr_cmp"] ["BCLK"] ["TmP_7"],
        _dff 1 "DECODER.v:482" ["dbg_trap"] ["BCLK"] ["TmP_14"],
        _dff 1 "DECODER.v:478" ["dbg_en"] ["BCLK"] ["TmP_12"],
        _adff 1 "DECODER.v:474" ["dbg_s"] ["BRESET"] ["BCLK"] ["TmP_13"],
        _dff 4 "DECODER.v:458" ["ovf_pipe[3:0]"] ["BCLK"] ["TmP_53[3:0]"],
        _dff 4 "DECODER.v:431" ["exc_vector[3:0]"] ["BCLK"] ["TmP_25[3:0]"],
        _dff 1 "DECODER.v:412" ["type_nmi"] ["BCLK"] ["TmP_71"],
        _dff 1 "DECODER.v:404" ["mmu_sel"] ["BCLK"] ["TmP_43"],
        _dff 1 "DECODER.v:401" ["ia_save"] ["BCLK"] ["iabo_fall"],
        _dff 1 "DECODER.v:400" ["iabort"] ["BCLK"] ["TmP_29"],
        _adff 1 "DECODER.v:391" ["stop_d"] ["BRESET"] ["BCLK"] ["stop"],
        _dff 1 "DECODER.v:386" ["int_flag"] ["BCLK"] ["TmP_33"],
        _adff 1 "DECODER.v:382" ["nmi_flag"] ["BRESET"] ["BCLK"] ["TmP_47"],
        _dff 2 "DECODER.v:380" ["nmi_reg[1:0]"] ["BCLK"] ["nmi_reg[0]", "NMI_N"],
        _dff 1 "DECODER.v:370" ["no_t2p"] ["BCLK"] ["TmP_49"],
        _adff 8 "DECODER.v:348" ["phase_reg[7:0]"] ["BRESET"] ["BCLK"] ["TmP_55[7:0]"],
        _adff 1 "DECODER.v:343" ["long_reg"] ["BRESET"] ["BCLK"] ["TmP_40"],
        _mux 1 "DECODER.v:1745" ["TmP_16"] ["TmP_100"] ["TmP_384"] ["ACC_FELD[14]"],
        _mux 1 "DECODER.v:1736" ["TmP_6"] ["WR_REG"] ["TmP_98"] ["next"],
        _mux 4 "DECODER.v:1701" ["TmP_22[3:0]"] ["disp_sel[3:0]"] ["new_op[55:52]"] ["next"],
        _mux 6 "DECODER.v:1701" ["TmP_74[5:0]"] ["wradr_i[5:0]"] ["new_op[24:19]"] ["next"],
        _mux 2 "DECODER.v:1701" ["TmP_77[1:0]"] ["ACC_FELD[13:12]"] ["new_op[66:65]"] ["next"],
        _mux 9 "DECODER.v:1701" ["TmP_2[8:0]"] ["ACC_FELD[8:0]"] ["new_op[61:57]", "new_op[51:48]"] ["next"],
        _mux 11 "DECODER.v:1698" ["TmP_52[10:0]"] ["oper_i[10:0]"] ["new_op[18:8]"] ["next"],
        _mux 1 "DECODER.v:1694" ["TmP_67"] ["spupd_i"] ["new_op[56]"] ["next"],
        _mux 2 "DECODER.v:1690" ["TmP_0[1:0]"] ["ACC_FELD[11:10]"] ["new_op[64:63]"] ["next"],
        _pmux 67 142 "DECODER.v:1675|DECODER.v:1235" ["new_op[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["TmP_742[66:0]", "0b1000000000000000000", "goacb[7:0]", "0b1xxxxxx0", "op_feld[32:27]", "op_feld[39]", "op_feld[32:27]", "op_feld[10:0]", "0b00100000", "adrd2[18:17]", "gen_src2[31:15]", "0b0001", "gen_src2[14:11]", "0b1xxxxxx", "gen_src2[10:4]", "0b1111101011010001010000", "gen_src2[3:0]", "adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]", "0b0010", "gen_src2[14:11]", "0b1xxxxxx", "gen_src2[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0010", "gen_src2[3:0]", "0b1000000000000000000", "waitop[7:0]", "0b0", "op_feld[38:33]", "0b0", "op_feld[32:27]", "op_feld[39]", "op_feld[32:27]", "op_feld[10:0]", "0b001000001000000000000000000000010000", "op_feld[38:33]", "0bxxxxxxx1", "op_feld[32:27]", "op_feld[10:0]", "0b000000001000000000000000000000111110", "op_feld[38:33]", "0b0", "op_feld[32:27]", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b110000001000000000000000000000110100", "op_feld[38:33]", "0b0", "op_feld[32:27]", "0b0", "op_feld[32:27]", "op_feld[10:0]", "0b01000000", "adrd1[18:17]", "gen_src1[35:11]", "0bxxxxxxx", "gen_src1[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0000", "gen_src1[3:0]", "adrd2[18:17]", "gen_src2[31:15]", "0b0001", "gen_src2[14:11]", "0bxxxxxxx", "gen_src2[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0000", "gen_src2[3:0]", "adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]", "0b0010", "gen_src2[14:11]", "0b0", "op_feld[38:33]", "gen_src2[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0010", "gen_src2[3:0]", "0b1000000000000000000000111000", "op_feld[38:33]", "0b0", "op_feld[38:34]", "0b00xxxxxx", "op_feld[10:0]", "0b001100001000000000000000000000111110", "op_feld[38:33]", "0bxxxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b110000001000000000000000000000111110", "op_feld[38:33]", "0b0", "op_feld[38:34]", "0b0", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b11000000", "adrd1[18:17]", "gen_src1[35:11]", "0b0000", "idx_feld[2:0]", "gen_src1[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0000", "gen_src1[3:0]", "0b1000000000000000000000111110", "op_feld[38:33]", "0bxxxxxxx0xxxxxx", "op_feld[10:0]", "0b110000001000000000000000000000111110", "op_feld[38:33]", "0b0", "op_feld[38:34]", "0b00xxxxxx", "op_feld[10:0]", "0b11000000101011000001000000000000110xxxxxxx1xxxxxx0xxxxxx", "op_feld[10:0]", "0b00001111", "op_feld[26:25]", "auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b000000000000001110000", "idx_feld[2:0]", "0b1xxxxxx0xxxxxx", "op_feld[10:0]", "0b0000111", "op_feld[45]", "0b1000000000000000000", "endea[7:0]", "0b1xxxxxx0", "op_feld[32:27]", "op_feld[39]", "op_feld[32:27]", "op_feld[10:0]", "0b0010", "diacb[3:0]", "0b1000000000000000000000010001xxxxxxxxxxxxx1", "op_feld[32:27]", "op_feld[10:0]", "0b000000001000000000000000000000111111xxxxxx0", "op_feld[32:27]", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b110000001000000000000000000000110001xxxxxxxxxxxxx111110001101000101010000001000000000000000000000110011xxxxxx0", "op_feld[32:27]", "0b0", "op_feld[32:27]", "op_feld[10:0]", "0b01000000", "TmP_743[66:0]", "0b1000000000000000000000010101xxxxxxxxxxxxx11111010110100010100000000", "TmP_744[66:0]", "0b1000000000000000000000010011xxxxxxxxxxxxx0xxxxxx", "op_feld[10:0]", "0b001000001000000000000000000000111111xxxxxxxxxxxxx0xxxxxx", "op_feld[10:0]", "0b110000001000000000000000000", "endea[7:0]", "quei1[6:0]", "0bxxxxxxx1", "op_feld[32:28]", "0b0011010001010000", "diacb[3:0]", "0b100000000000000000000010000xxxxxxx1xxxxxx0xxxxxx0110100010100010000", "TmP_745[66:0]", "0b1000000000000000000000011001xxxxxxxxxxxxx1", "op_feld[32:27]", "op_feld[10:0]", "0b000011001000000000000000000000110011xxxxxx0", "op_feld[32:27]", "0b0", "op_feld[32:27]", "op_feld[10:0]", "0b010011001000000000000000000000010101xxxxxxxxxxxxx111110101101000101000011001000000000000000000000010011xxxxxxxxxxxxx0xxxxxx", "op_feld[10:0]", "0b001011001000000000000000000000110001xxxxxxxxxxxxx111110001101000101010011001000000000000000000", "endea[7:0]", "0b1xxxxxxxxxxxxx1", "op_feld[32:28]", "0b0011010001010000", "diacb[3:0]", "adrd2[18:17]", "gen_src2[31:15]", "0b0001", "gen_src2[14:11]", "0b0000", "idx_feld[10:8]", "gen_src2[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0000", "gen_src2[3:0]", "adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]", "0b0010", "gen_src2[14:11]", "0b0000", "idx_feld[10:8]", "gen_src2[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0000", "gen_src2[3:0]", "0b101011000001000000000010110xxxxxxx1xxxxxx0xxxxxx", "op_feld[10:0]", "0b00001111", "op_feld[24:23]", "op_feld[42]", "0b01", "op_feld[42]", "0b0", "exr22[11]", "op_feld[14:13]", "0b000000000000101110000", "idx_feld[10:8]", "0b1xxxxxx0xxxxxx", "op_feld[10:0]", "0b0000111", "op_feld[42]", "op_feld[24:23]", "0b0101000000000001100100111", "quet1[6:0]", "0b1xxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b001000011000000000000000000", "endea[7:0]", "quet1[6:0]", "0b1xxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b0010", "diacb[3:0]", "0b100000000000000000000011111", "quet1[6:0]", "0b1xxxxxx", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b11000000100000000000000000000011000", "quet1[6:0]", "0b1xxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b010000001000000000000000000000111110", "op_feld[38:34]", "0b01xxxxxx", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b1000000010000000000000000000001111101111001xxxxxx", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b100000001000000000000000000000111111xxxxxx0", "op_feld[32:28]", "0b0", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b100000001000000000000000000000111110", "op_feld[38:34]", "0b00", "op_feld[32:28]", "0b0", "wlor", "op_feld[32:27]", "op_feld[10:0]", "0b10000000100000000000000000000011000", "quet1[6:0]", "0b1xxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b01001100", "adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]", "0b0010", "gen_src2[14:11]", "0bxxxxxxx", "gen_src2[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0000", "gen_src2[3:0]", "0b100000000000000000000000000xxxxxxxxxxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b00100000100000000000000000000000000xxxxxxxxxxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b00000000", "adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]", "0b0010", "gen_src2[14:11]", "0b0000", "idx_feld[10:8]", "gen_src2[10:4]", "0b0", "op_feld[32:27]", "op_feld[10:0]", "0b0010", "gen_src2[3:0]", "op_feld[24:23]", "0b0101000000000001100100111xxxxxxxxxxxxxx0", "op_feld[32:27]", "op_feld[10:0]", "0b00100001101011000001000000000100110xxxxxxx1xxxxxx0xxxxxx", "op_feld[10:0]", "0b00001111", "op_feld[24:23]", "0b0", "op_feld[42]", "0b1", "op_feld[42]", "0b0", "exr22[11]", "op_feld[14:13]", "0b000000000001001110000", "idx_feld[10:8]", "0b1xxxxxx0xxxxxx", "op_feld[10:0]", "0b000011111000000000000000000", "endea[7:0]", "0bxxxxxxxxxxxxxx0xxxxxx", "op_feld[10:0]", "0b0000", "diacb[3:0]", "0b100000000000000000000000001xxxxxxxxxxxxxx0xxxxxx", "op_feld[10:0]", "0b00001110", "op1_feld[52:34]", "op1_feld[15:8]", "op1_feld[33:20]", "0b0xxxxxx01101000101", "op1_feld[7:0]", "TmP_746[66:0]", "0b1000100000000000011001010111xxxxxxxxxxxxx0xxxxxx01101000101000011101000000000100000000001011001xxxxxxxxxxxxx0xxxxxx0110100010100000000100010000000100001100101110xxxxxxxxxxxxxx11111000110100100100001110100000000010000000000110001xxxxxxxxxxxxxx0xxxxxx0110100010100000000", "TmP_747[66:0]", "TmP_748[66:0]", "TmP_749[66:0]", "TmP_750[66:0]", "0b1000000000000000000000000001xxxxxxxxxxxxx101100001101000101000000001000000000000000000001101101xxxxxxxxxxxxx11111010110100010100000000101010000001000000000110111xxxxxxx01111010xxxxxx01101000101000011101000000000000000000001110001xxxxxx0111101111110001101000101000000011000000000000000000001110011xxxxxxxxxxxxx1111101011010001010000000010011100001101000000011101000111110", "stack[5]", "0b110", "s_user", "0b10xxxxxx01110000111001000011001100000010100011001110110111100xxxxxxx0xxxxxx0110100010100100000100000000010000000000111100xxxxxxxxxxxxxx0xxxxxx011010001010000000110101100000001001000011110101111010111101111110001101100100000000011010100000010110011001111101xxxxxx0111100111110001101000000000000001000000000000000000001111110111100xxxxxxx0xxxxxx01101000101000000011000000000000000000001011111xxxxxxxxxxxxx101101001101000101000000001000000000000000000000000000111101xxxxxxx101111101101000101000000001010100010000001011010000011xxxxxxxxxxxxx11111010110100010100000000100010000000000001101000010xxxxxxxxxxxxxx0xxxxxx01101000101000011111000000000000000000010000111xxxxxxxxxxxxx10111110110100010100000000101001000010000010001000100011110100111110xxxxxx01101000101000000011000000000000000000000000001xxxxxxxxxxxxx10110100110100010100000000101011001010000100001000110xxxxxxx0", "stack[5]", "0b110", "s_user", "0b10xxxxxx01101000101000000011010100010000001011010001111xxxxxxxxxxxxx11111010110100010100000000100000000010000000001001000xxxxxxxxxxxxxx0xxxxxx01101000101000000011000000000000000000010010011xxxxxxxxxxxxx", "no_modul[6:0]", "0b0111000100000000000", "TmP_752[66:0]", "TmP_754[66:0]", "0b1000000000100000000010010100111101xxxxxxx0xxxxxx0110100010100000000100000000000000000001001101xxxxxxxxxxxxxx0xxxxxx0110100010100000000100000000000000000000000000xxxxxxxxxxxxxx0xxxxxx0110100010100000000", "TmP_755[66:0]", "0b10011100001101000000111101000111110", "stack[5]", "0b110", "s_user", "0b10xxxxxx01110000111001000011001100000010100011011110110111100xxxxxxx0xxxxxx01101000101001000001000000000100000000010010100111101xxxxxxx0xxxxxx01101000101000000011000100", "dia_flag", "0b0000000", "dia_flag", "0b00110000000xxxxxxxxxxxxxx0xxxxxx00010001", "op_psr[2]", "psr_code[1]", "op_psr[0]", "0b00000000", "TmP_756[66:0]", "TmP_757[66:0]", "0b1000000000000000000100000111xxxxxxxxxxxxx11111010000111011000000000", "TmP_758[66:0]", "0b100010000100000000010000101xxxxxxxxxxxxxx10010110110100100100000000", "TmP_759[66:0]", "0b1000000000000000000100001110111110xxxxxxx100001001101000101000000001010010000001xx0000100000010111101001111010000010110100010100000001", "TmP_760[66:0]", "TmP_761[66:0]", "state_0[66:0]", "0b1000000000000000000010100000", "op_feld[38:33]", "0b0", "op_feld[38:34]", "0b00xxxxxx", "op_feld[10:0]", "0b00", "TmP_317", "0b11", "n_idx[1:0]", "0b0", "state_group_50[66:0]", "state_group_60[66:0]", "0b100000000000000000000000000xxxxxxxxxxxxxx1", "op_feld[32:27]", "0b0110100100100000000", "adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]", "0b0010", "gen_src2[14:11]", "0b0000", "idx_feld[10:8]", "gen_src2[10:4]", "0b0xxxxxx011010010010010", "gen_src2[3:0]", "TmP_762[66:0]", "0b1000000100000000010010011110111101xxxxxxx0xxxxxx0110100010100000000", "TmP_763[66:0]", "STRING[1:0]", "0b0000000000000000011000010xxxxxxxxxxxxxx1", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b010110100100100000001", "TmP_765[66:0]", "STRING[1:0]", "0b01100", "st_dest[11]", "STRING[1:0]", "0b000001011110001000", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b101xxxxxx", "TmP_313", "0b1111100110100010100010000100000000000000000011000101xxxxxxxxxxxxxx1", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b1001101001001000000011000000000000000000110001110", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00xxxxxxx1", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00", "op_feld_reg[10:8]", "0b010100", "op_feld_reg[1]", "0b100000000", "TmP_766[66:0]", "STRING[1:0]", "0b0000000000000000011001010xxxxxxxxxxxxxx1", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b010110100100100000001", "TmP_768[66:0]", "STRING[1:0]", "0b10100", "st_dest[11]", "STRING[1:0]", "0b000001011110011000", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b10xxxxxxx", "TmP_313", "0b1111100110100010100000000100000000000000000011001101xxxxxxxxxxxxxx1", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b10011010010010000000110000000000000000001100111001111111xxxxxx0xxxxxx", "op_feld_reg[10:8]", "0b0100000100100000", "TmP_770[66:0]", "0b1000000000000000000000000000111110xxxxxxx10000100110100010100000000", "TmP_771[66:0]", "0b1000000000000000000110101011xxxxxxxxxxxxx11111110110100010100100000", "TmP_772[66:0]", "TmP_773[66:0]", "TmP_774[66:0]", "0b1000000000000000000110111011xxxxxxxxxxxxx11111110110100010100100000", "TmP_776[66:0]", "TmP_777[66:0]"] ["TmP_585", "TmP_584", "TmP_583", "TmP_582", "TmP_581", "TmP_580", "TmP_579", "TmP_578", "TmP_577", "TmP_576", "TmP_575", "TmP_574", "TmP_573", "TmP_572", "TmP_569", "TmP_566", "TmP_565", "TmP_564", "TmP_563", "TmP_562", "TmP_561", "TmP_560", "TmP_559", "TmP_558", "TmP_557", "TmP_556", "TmP_555", "TmP_554", "TmP_553", "TmP_552", "TmP_551", "TmP_550", "TmP_549", "TmP_548", "TmP_547", "TmP_546", "TmP_545", "TmP_544", "TmP_190", "TmP_189", "TmP_541", "TmP_540", "TmP_539", "TmP_538", "TmP_537", "TmP_536", "TmP_535", "TmP_534", "TmP_533", "TmP_532", "TmP_531", "TmP_530", "TmP_529", "TmP_528", "TmP_527", "TmP_526", "TmP_525", "TmP_524", "TmP_523", "TmP_522", "TmP_521", "TmP_520", "TmP_519", "TmP_518", "TmP_516", "TmP_515", "TmP_514", "TmP_513", "TmP_512", "TmP_511", "TmP_510", "TmP_509", "TmP_508", "TmP_507", "TmP_506", "TmP_505", "TmP_504", "TmP_503", "TmP_502", "TmP_501", "TmP_500", "TmP_499", "TmP_498", "TmP_497", "TmP_496", "TmP_495", "TmP_494", "TmP_493", "TmP_492", "TmP_491", "TmP_490", "TmP_489", "TmP_488", "TmP_486", "TmP_485", "TmP_484", "TmP_188", "TmP_482", "TmP_481", "TmP_480", "TmP_479", "TmP_478", "TmP_477", "TmP_476", "TmP_475", "TmP_474", "TmP_473", "TmP_472", "TmP_471", "TmP_470", "TmP_469", "TmP_468", "TmP_467", "TmP_466", "TmP_465", "TmP_464", "TmP_463", "TmP_462", "TmP_461", "TmP_460", "TmP_459", "TmP_458", "TmP_457", "TmP_456", "TmP_455", "TmP_454", "TmP_453", "TmP_452", "TmP_451", "TmP_450", "TmP_449", "TmP_448", "TmP_447", "TmP_446", "TmP_445", "TmP_444", "TmP_443", "TmP_442", "TmP_441", "TmP_440", "TmP_439", "TmP_438"],
        _eq 8 "DECODER.v:1675|DECODER.v:1235" ["TmP_438"] ["phase_ein[7:0]"] ["0b11011111"] ,
        _eq 8 "DECODER.v:1669|DECODER.v:1235" ["TmP_439"] ["phase_ein[7:0]"] ["0b11011101"] ,
        _eq 8 "DECODER.v:1667|DECODER.v:1235" ["TmP_440"] ["phase_ein[7:0]"] ["0b11011100"] ,
        _eq 8 "DECODER.v:1663|DECODER.v:1235" ["TmP_441"] ["phase_ein[7:0]"] ["0b11011011"] ,
        _eq 8 "DECODER.v:1658|DECODER.v:1235" ["TmP_442"] ["phase_ein[7:0]"] ["0b11010111"] ,
        _eq 8 "DECODER.v:1654|DECODER.v:1235" ["TmP_443"] ["phase_ein[7:0]"] ["0b11010101"] ,
        _eq 8 "DECODER.v:1652|DECODER.v:1235" ["TmP_444"] ["phase_ein[7:0]"] ["0b11010100"] ,
        _eq 8 "DECODER.v:1648|DECODER.v:1235" ["TmP_445"] ["phase_ein[7:0]"] ["0b11010011"] ,
        _eq 8 "DECODER.v:1645|DECODER.v:1235" ["TmP_446"] ["phase_ein[7:0]"] ["0b11001000"] ,
        _eq 8 "DECODER.v:1639|DECODER.v:1235" ["TmP_447"] ["phase_ein[7:0]"] ["0b11001110"] ,
        _eq 8 "DECODER.v:1637|DECODER.v:1235" ["TmP_448"] ["phase_ein[7:0]"] ["0b11001101"] ,
        _eq 8 "DECODER.v:1635|DECODER.v:1235" ["TmP_449"] ["phase_ein[7:0]"] ["0b11001100"] ,
        _eq 8 "DECODER.v:1633|DECODER.v:1235" ["TmP_450"] ["phase_ein[7:0]"] ["0b11001011"] ,
        _eq 8 "DECODER.v:1626|DECODER.v:1235" ["TmP_451"] ["phase_ein[7:0]"] ["0b11001010"] ,
        _eq 8 "DECODER.v:1624|DECODER.v:1235" ["TmP_452"] ["phase_ein[7:0]"] ["0b11001001"] ,
        _eq 8 "DECODER.v:1617|DECODER.v:1235" ["TmP_453"] ["phase_ein[7:0]"] ["0b11000111"] ,
        _eq 8 "DECODER.v:1615|DECODER.v:1235" ["TmP_454"] ["phase_ein[7:0]"] ["0b11000101"] ,
        _eq 8 "DECODER.v:1613|DECODER.v:1235" ["TmP_455"] ["phase_ein[7:0]"] ["0b11000100"] ,
        _eq 8 "DECODER.v:1611|DECODER.v:1235" ["TmP_456"] ["phase_ein[7:0]"] ["0b11000011"] ,
        _eq 8 "DECODER.v:1606|DECODER.v:1235" ["TmP_457"] ["phase_ein[7:0]"] ["0b11000010"] ,
        _eq 8 "DECODER.v:1604|DECODER.v:1235" ["TmP_458"] ["phase_ein[7:0]"] ["0b11000001"] ,
        _eq 8 "DECODER.v:1600|DECODER.v:1235" ["TmP_459"] ["phase_ein[7:0]"] ["0b11000000"] ,
        _eq 8 "DECODER.v:1595|DECODER.v:1235" ["TmP_460"] ["phase_ein[7:0]"] ["0b01110101"] ,
        _eq 8 "DECODER.v:1592|DECODER.v:1235" ["TmP_461"] ["phase_ein[7:0]"] ["0b01110100"] ,
        _eq 9 "DECODER.v:1589|DECODER.v:1235" ["TmP_462"] ["phase_ein[7:0]", "acc2"] ["0b011100111"] ,
        _eq 9 "DECODER.v:1588|DECODER.v:1235" ["TmP_463"] ["phase_ein[7:0]", "acc2"] ["0b011100110"] ,
        _eq 4 "DECODER.v:1585|DECODER.v:1235" ["TmP_464"] ["phase_ein[7:4]"] ["0b0110"] ,
        _eq 4 "DECODER.v:1584|DECODER.v:1235" ["TmP_465"] ["phase_ein[7:4]"] ["0b0101"] ,
        _eq 11 "DECODER.v:1582|DECODER.v:1235" ["TmP_466"] ["phase_ein[7:0]", "otype[1:0]", "idx"] ["0b00000000101"] ,
        _eq 11 "DECODER.v:1580|DECODER.v:1235" ["TmP_467"] ["phase_ein[7:0]", "otype[1:0]", "idx"] ["0b00000000100"] ,
        _eq 8 "DECODER.v:1574|DECODER.v:1235" ["TmP_468"] ["phase_ein[7:0]"] ["0b10001001"] ,
        _eq 8 "DECODER.v:1569|DECODER.v:1235" ["TmP_469"] ["phase_ein[7:0]"] ["0b10001000"] ,
        _eq 8 "DECODER.v:1566|DECODER.v:1235" ["TmP_470"] ["phase_ein[7:0]"] ["0b10000111"] ,
        _eq 8 "DECODER.v:1564|DECODER.v:1235" ["TmP_471"] ["phase_ein[7:0]"] ["0b10000110"] ,
        _eq 8 "DECODER.v:1560|DECODER.v:1235" ["TmP_472"] ["phase_ein[7:0]"] ["0b10000101"] ,
        _eq 8 "DECODER.v:1558|DECODER.v:1235" ["TmP_473"] ["phase_ein[7:0]"] ["0b10000100"] ,
        _eq 8 "DECODER.v:1553|DECODER.v:1235" ["TmP_474"] ["phase_ein[7:0]"] ["0b10000011"] ,
        _eq 8 "DECODER.v:1551|DECODER.v:1235" ["TmP_475"] ["phase_ein[7:0]"] ["0b10000010"] ,
        _eq 8 "DECODER.v:1547|DECODER.v:1235" ["TmP_476"] ["phase_ein[7:0]"] ["0b10000001"] ,
        _eq 8 "DECODER.v:1543|DECODER.v:1235" ["TmP_477"] ["phase_ein[7:0]"] ["0b10000000"] ,
        _eq 10 "DECODER.v:1541|DECODER.v:1235" ["TmP_478"] ["phase_ein[7:0]", "otype[1:0]"] ["0b0000000011"] ,
        _eq 8 "DECODER.v:1536|DECODER.v:1235" ["TmP_479"] ["phase_ein[7:0]"] ["0b01111011"] ,
        _eq 8 "DECODER.v:1534|DECODER.v:1235" ["TmP_480"] ["phase_ein[7:0]"] ["0b01111010"] ,
        _eq 8 "DECODER.v:1532|DECODER.v:1235" ["TmP_481"] ["phase_ein[7:0]"] ["0b01111001"] ,
        _eq 8 "DECODER.v:1525|DECODER.v:1235" ["TmP_482"] ["phase_ein[7:0]"] ["0b01001111"] ,
        _eq 8 "DECODER.v:1523|DECODER.v:1235" ["TmP_483"] ["phase_ein[7:0]"] ["0b01001101"] ,
        _eq 8 "DECODER.v:1521|DECODER.v:1235" ["TmP_484"] ["phase_ein[7:0]"] ["0b01001100"] ,
        _eq 8 "DECODER.v:1516|DECODER.v:1235" ["TmP_485"] ["phase_ein[7:0]"] ["0b01001110"] ,
        _eq 8 "DECODER.v:1510|DECODER.v:1235" ["TmP_486"] ["phase_ein[7:0]"] ["0b01001011"] ,
        _eq 8 "DECODER.v:1508|DECODER.v:1235" ["TmP_487"] ["phase_ein[7:0]"] ["0b01001010"] ,
        _eq 8 "DECODER.v:1502|DECODER.v:1235" ["TmP_488"] ["phase_ein[7:0]"] ["0b01001001"] ,
        _eq 8 "DECODER.v:1500|DECODER.v:1235" ["TmP_489"] ["phase_ein[7:0]"] ["0b01001000"] ,
        _eq 8 "DECODER.v:1498|DECODER.v:1235" ["TmP_490"] ["phase_ein[7:0]"] ["0b01000111"] ,
        _eq 8 "DECODER.v:1496|DECODER.v:1235" ["TmP_491"] ["phase_ein[7:0]"] ["0b01000110"] ,
        _eq 8 "DECODER.v:1494|DECODER.v:1235" ["TmP_492"] ["phase_ein[7:0]"] ["0b01000101"] ,
        _eq 8 "DECODER.v:1491|DECODER.v:1235" ["TmP_493"] ["phase_ein[7:0]"] ["0b01000100"] ,
        _eq 8 "DECODER.v:1489|DECODER.v:1235" ["TmP_494"] ["phase_ein[7:0]"] ["0b01000011"] ,
        _eq 8 "DECODER.v:1487|DECODER.v:1235" ["TmP_495"] ["phase_ein[7:0]"] ["0b01000010"] ,
        _eq 8 "DECODER.v:1485|DECODER.v:1235" ["TmP_496"] ["phase_ein[7:0]"] ["0b01000001"] ,
        _eq 8 "DECODER.v:1483|DECODER.v:1235" ["TmP_497"] ["phase_ein[7:0]"] ["0b01000000"] ,
        _eq 8 "DECODER.v:1480|DECODER.v:1235" ["TmP_498"] ["phase_ein[7:0]"] ["0b00101111"] ,
        _eq 8 "DECODER.v:1478|DECODER.v:1235" ["TmP_499"] ["phase_ein[7:0]"] ["0b00111111"] ,
        _eq 8 "DECODER.v:1476|DECODER.v:1235" ["TmP_500"] ["phase_ein[7:0]"] ["0b00111110"] ,
        _eq 8 "DECODER.v:1474|DECODER.v:1235" ["TmP_501"] ["phase_ein[7:0]"] ["0b00111101"] ,
        _eq 8 "DECODER.v:1472|DECODER.v:1235" ["TmP_502"] ["phase_ein[7:0]"] ["0b00111100"] ,
        _eq 8 "DECODER.v:1470|DECODER.v:1235" ["TmP_503"] ["phase_ein[7:0]"] ["0b00111011"] ,
        _eq 8 "DECODER.v:1468|DECODER.v:1235" ["TmP_504"] ["phase_ein[7:0]"] ["0b00111010"] ,
        _eq 8 "DECODER.v:1466|DECODER.v:1235" ["TmP_505"] ["phase_ein[7:0]"] ["0b00111001"] ,
        _eq 8 "DECODER.v:1464|DECODER.v:1235" ["TmP_506"] ["phase_ein[7:0]"] ["0b00111000"] ,
        _eq 8 "DECODER.v:1462|DECODER.v:1235" ["TmP_507"] ["phase_ein[7:0]"] ["0b00110111"] ,
        _eq 8 "DECODER.v:1460|DECODER.v:1235" ["TmP_508"] ["phase_ein[7:0]"] ["0b00110110"] ,
        _eq 8 "DECODER.v:1458|DECODER.v:1235" ["TmP_509"] ["phase_ein[7:0]"] ["0b00110101"] ,
        _eq 8 "DECODER.v:1455|DECODER.v:1235" ["TmP_510"] ["phase_ein[7:0]"] ["0b00110100"] ,
        _eq 8 "DECODER.v:1451|DECODER.v:1235" ["TmP_511"] ["phase_ein[7:0]"] ["0b00110011"] ,
        _eq 8 "DECODER.v:1447|DECODER.v:1235" ["TmP_512"] ["phase_ein[7:0]"] ["0b00110010"] ,
        _eq 8 "DECODER.v:1442|DECODER.v:1235" ["TmP_513"] ["phase_ein[7:0]"] ["0b00110001"] ,
        _eq 8 "DECODER.v:1438|DECODER.v:1235" ["TmP_514"] ["phase_ein[7:0]"] ["0b00110000"] ,
        _eq 8 "DECODER.v:1436|DECODER.v:1235" ["TmP_515"] ["phase_ein[7:0]"] ["0b00101110"] ,
        _eq 8 "DECODER.v:1434|DECODER.v:1235" ["TmP_516"] ["phase_ein[7:0]"] ["0b00101101"] ,
        _eq 8 "DECODER.v:1431|DECODER.v:1235" ["TmP_517"] ["phase_ein[7:0]"] ["0b00101100"] ,
        _eq 8 "DECODER.v:1429|DECODER.v:1235" ["TmP_518"] ["phase_ein[7:0]"] ["0b00101011"] ,
        _eq 8 "DECODER.v:1427|DECODER.v:1235" ["TmP_519"] ["phase_ein[7:0]"] ["0b00101010"] ,
        _eq 8 "DECODER.v:1422|DECODER.v:1235" ["TmP_520"] ["phase_ein[7:0]"] ["0b00000001"] ,
        _eq 10 "DECODER.v:1419|DECODER.v:1235" ["TmP_521"] ["phase_ein[7:0]", "otype[1:0]"] ["0b0000000001"] ,
        _eq 8 "DECODER.v:1415|DECODER.v:1235" ["TmP_522"] ["phase_ein[7:0]"] ["0b00101000"] ,
        _eq 8 "DECODER.v:1411|DECODER.v:1235" ["TmP_523"] ["phase_ein[7:0]"] ["0b00100111"] ,
        _eq 8 "DECODER.v:1408|DECODER.v:1235" ["TmP_524"] ["phase_ein[7:0]"] ["0b00100110"] ,
        _eq 8 "DECODER.v:1405|DECODER.v:1235" ["TmP_525"] ["phase_ein[7:0]"] ["0b00100101"] ,
        _eq 11 "DECODER.v:1399|DECODER.v:1235" ["TmP_526"] ["phase_ein[7:0]", "acc2", "op_feld[40:39]"] ["0b00011111111"] ,
        _eq 11 "DECODER.v:1397|DECODER.v:1235" ["TmP_527"] ["phase_ein[7:0]", "acc2", "op_feld[40:39]"] ["0b00011111101"] ,
        _eq 10 "DECODER.v:1395|DECODER.v:1235" ["TmP_528"] ["phase_ein[7:0]", "acc2", "op_feld[39]"] ["0b0001111101"] ,
        _eq 9 "DECODER.v:1393|DECODER.v:1235" ["TmP_529"] ["phase_ein[7:0]", "op_feld[39]"] ["0b000111110"] ,
        _eq 8 "DECODER.v:1388|DECODER.v:1235" ["TmP_530"] ["phase_ein[7:0]"] ["0b00011100"] ,
        _eq 8 "DECODER.v:1383|DECODER.v:1235" ["TmP_531"] ["phase_ein[7:0]"] ["0b00011011"] ,
        _eq 8 "DECODER.v:1379|DECODER.v:1235" ["TmP_532"] ["phase_ein[7:0]"] ["0b00011010"] ,
        _eq 8 "DECODER.v:1376|DECODER.v:1235" ["TmP_533"] ["phase_ein[7:0]"] ["0b00011001"] ,
        _eq 9 "DECODER.v:1373|DECODER.v:1235" ["TmP_534"] ["phase_ein[7:0]", "acc1"] ["0b000110001"] ,
        _eq 9 "DECODER.v:1371|DECODER.v:1235" ["TmP_535"] ["phase_ein[7:0]", "acc1"] ["0b000110000"] ,
        _eq 10 "DECODER.v:1368|DECODER.v:1235" ["TmP_536"] ["phase_ein[7:0]", "op_feld[41]", "qword"] ["0b0001011111"] ,
        _eq 10 "DECODER.v:1366|DECODER.v:1235" ["TmP_537"] ["phase_ein[7:0]", "op_feld[41]", "qword"] ["0b0001011110"] ,
        _eq 10 "DECODER.v:1364|DECODER.v:1235" ["TmP_538"] ["phase_ein[7:0]", "op_feld[41]", "op_feld[39]"] ["0b0001011100"] ,
        _eq 10 "DECODER.v:1362|DECODER.v:1235" ["TmP_539"] ["phase_ein[7:0]", "op_feld[41]", "op_feld[39]"] ["0b0001011101"] ,
        _eq 8 "DECODER.v:1358|DECODER.v:1235" ["TmP_540"] ["phase_ein[7:0]"] ["0b00010110"] ,
        _eq 8 "DECODER.v:1355|DECODER.v:1235" ["TmP_541"] ["phase_ein[7:0]"] ["0b00010101"] ,
        _eq 8 "DECODER.v:1349|DECODER.v:1235" ["TmP_542"] ["phase_ein[7:0]"] ["0b00010000"] ,
        _eq 8 "DECODER.v:1347|DECODER.v:1235" ["TmP_543"] ["phase_ein[7:0]"] ["0b00001111"] ,
        _eq 8 "DECODER.v:1344|DECODER.v:1235" ["TmP_544"] ["phase_ein[7:0]"] ["0b00001100"] ,
        _eq 10 "DECODER.v:1341|DECODER.v:1235" ["TmP_545"] ["phase_ein[7:0]", "op_feld[41:40]"] ["0b0000101110"] ,
        _eq 11 "DECODER.v:1339|DECODER.v:1235" ["TmP_546"] ["phase_ein[7:0]", "op_feld[41]", "acc2", "op_feld[40]"] ["0b00001011010"] ,
        _eq 10 "DECODER.v:1337|DECODER.v:1235" ["TmP_547"] ["phase_ein[7:0]", "acc2", "op_feld[40]"] ["0b0000101111"] ,
        _eq 11 "DECODER.v:1335|DECODER.v:1235" ["TmP_548"] ["phase_ein[7:0]", "op_feld[41]", "acc2", "op_feld[40]"] ["0b00001011101"] ,
        _eq 10 "DECODER.v:1333|DECODER.v:1235" ["TmP_549"] ["phase_ein[7:0]", "op_feld[41]", "acc2"] ["0b0000101100"] ,
        _eq 8 "DECODER.v:1327|DECODER.v:1235" ["TmP_550"] ["phase_ein[7:0]"] ["0b00001010"] ,
        _eq 8 "DECODER.v:1324|DECODER.v:1235" ["TmP_551"] ["phase_ein[7:0]"] ["0b00001001"] ,
        _eq 8 "DECODER.v:1322|DECODER.v:1235" ["TmP_552"] ["phase_ein[7:0]"] ["0b00001000"] ,
        _eq 13 "DECODER.v:1318|DECODER.v:1235" ["TmP_553"] ["phase_ein[7:0]", "op_feld[41]", "qword", "acc2", "op_feld[40:39]"] ["0b0000011110101"] ,
        _eq 13 "DECODER.v:1316|DECODER.v:1235" ["TmP_554"] ["phase_ein[7:0]", "op_feld[41]", "qword", "acc2", "op_feld[40:39]"] ["0b0000011101101"] ,
        _eq 13 "DECODER.v:1312|DECODER.v:1235" ["TmP_555"] ["phase_ein[7:0]", "op_feld[41]", "qword", "acc2", "op_feld[40:39]"] ["0b0000011100101"] ,
        _eq 11 "DECODER.v:1310|DECODER.v:1235" ["TmP_556"] ["phase_ein[7:0]", "qword", "acc2", "op_feld[40]"] ["0b00000111111"] ,
        _eq 11 "DECODER.v:1306|DECODER.v:1235" ["TmP_557"] ["phase_ein[7:0]", "qword", "acc2", "op_feld[40]"] ["0b00000111011"] ,
        _eq 12 "DECODER.v:1304|DECODER.v:1235" ["TmP_558"] ["phase_ein[7:0]", "op_feld[41]", "qword", "acc2", "op_feld[40]"] ["0b000001111101"] ,
        _eq 11 "DECODER.v:1302|DECODER.v:1235" ["TmP_559"] ["phase_ein[7:0]", "op_feld[41]", "qword", "op_feld[40]"] ["0b00000111110"] ,
        _eq 11 "DECODER.v:1300|DECODER.v:1235" ["TmP_560"] ["phase_ein[7:0]", "op_feld[41]", "qword", "acc2"] ["0b00000111100"] ,
        _eq 11 "DECODER.v:1298|DECODER.v:1235" ["TmP_561"] ["phase_ein[7:0]", "op_feld[41]", "qword", "acc2"] ["0b00000111010"] ,
        _eq 11 "DECODER.v:1296|DECODER.v:1235" ["TmP_562"] ["phase_ein[7:0]", "op_feld[41]", "qword", "acc2"] ["0b00000111000"] ,
        _eq 8 "DECODER.v:1291|DECODER.v:1235" ["TmP_563"] ["phase_ein[7:0]"] ["0b00000110"] ,
        _eq 8 "DECODER.v:1288|DECODER.v:1235" ["TmP_564"] ["phase_ein[7:0]"] ["0b00000101"] ,
        _eq 15 "DECODER.v:1281|DECODER.v:1235" ["TmP_565"] ["phase_ein[7:0]", "short_def", "op_feld[41]", "qword", "acc1", "acc2", "op_feld[40:39]"] ["0b000000100110101"] ,
        _eq 15 "DECODER.v:1279|DECODER.v:1235" ["TmP_566"] ["phase_ein[7:0]", "short_def", "op_feld[41]", "qword", "acc1", "acc2", "op_feld[40:39]"] ["0b000000100100101"] ,
        _eq 14 "DECODER.v:1277|DECODER.v:1235" ["TmP_567"] ["phase_ein[7:0]", "short_def", "op_feld[41]", "acc1", "acc2", "op_feld[40:39]"] ["0b00000010000101"] ,
        _eq 12 "DECODER.v:1275|DECODER.v:1235" ["TmP_568"] ["phase_ein[7:0]", "short_def", "acc1", "acc2", "op_feld[40]"] ["0b000000100011"] ,
        _eq 10 "DECODER.v:1273|DECODER.v:1235" ["TmP_569"] ["phase_ein[7:0]", "short_def", "acc1"] ["0b0000001001"] ,
        _eq 12 "DECODER.v:1271|DECODER.v:1235" ["TmP_570"] ["phase_ein[7:0]", "short_def", "acc2", "op_feld[40:39]"] ["0b000000101101"] ,
        _eq 11 "DECODER.v:1269|DECODER.v:1235" ["TmP_571"] ["phase_ein[7:0]", "short_def", "acc2", "op_feld[40]"] ["0b00000010111"] ,
        _eq 17 "DECODER.v:1265|DECODER.v:1235" ["TmP_572"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "op_feld[40:39]"] ["0b00000000000011001"] ,
        _eq 18 "DECODER.v:1263|DECODER.v:1235" ["TmP_573"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "acc2", "op_feld[40:39]"] ["0b000000000000100101"] ,
        _eq 18 "DECODER.v:1260|DECODER.v:1235" ["TmP_574"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "acc2", "op_feld[40:39]"] ["0b000000000000010101"] ,
        _eq 18 "DECODER.v:1258|DECODER.v:1235" ["TmP_575"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "acc2", "op_feld[40:39]"] ["0b000000000000000101"] ,
        _eq 15 "DECODER.v:1256|DECODER.v:1235" ["TmP_576"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "acc1", "acc2", "op_feld[40]"] ["0b000000000000011"] ,
        _eq 13 "DECODER.v:1254|DECODER.v:1235" ["TmP_577"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "acc1"] ["0b0000000000001"] ,
        _eq 17 "DECODER.v:1252|DECODER.v:1235" ["TmP_578"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "acc2", "op_feld[40]"] ["0b00000000000011001"] ,
        _eq 16 "DECODER.v:1250|DECODER.v:1235" ["TmP_579"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "acc2"] ["0b0000000000001000"] ,
        _eq 16 "DECODER.v:1248|DECODER.v:1235" ["TmP_580"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "acc2"] ["0b0000000000000100"] ,
        _logic_not 16 "DECODER.v:1246|DECODER.v:1235" ["TmP_581"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "op_feld[41]", "qword", "acc1", "acc2"],
        _eq 14 "DECODER.v:1244|DECODER.v:1235" ["TmP_582"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "acc2", "op_feld[40]"] ["0b00000000000110"] ,
        _eq 14 "DECODER.v:1242|DECODER.v:1235" ["TmP_583"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "acc2", "op_feld[40]"] ["0b00000000000111"] ,
        _eq 13 "DECODER.v:1240|DECODER.v:1235" ["TmP_584"] ["phase_ein[7:0]", "otype[1:0]", "idx", "short_def", "acc2"] ["0b0000000000010"] ,
        _eq 11 "DECODER.v:1236|DECODER.v:1235" ["TmP_585"] ["phase_ein[7:0]", "otype[1:0]", "idx"] ["0b00000000001"] ,
        _pmux 34 10 "DECODER.v:1172|DECODER.v:1153" ["gen_src2[33:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["0b0", "op_feld[42]", "auop_d[3:0]", "0b0", "exr22[11]", "op_feld[14:13]", "0b00000000001110000", "src2_addr[2:0]", "0b000", "op_feld[42]", "0b0", "op_feld[42]", "auop_d[3:0]", "0b0", "exr22[11]", "op_feld[14:13]", "0b00000000001110000", "src2_addr[2:0]", "0b111", "op_feld[42]", "0b10101100000000000000110", "usp_2[6:0]", "0b1111", "TmP_740[33:0]", "0b0", "op_feld[42]", "auop_d[3:0]", "0b0", "exr22[11]", "op_feld[14:13]", "0b0000000100111xxxxxxx111", "op_feld[42]", "0b1010110000000010100010100111110001", "TmP_741[33:0]", "0b0", "op_feld[42]", "auop_d[3:0]", "0b0", "exr22[11]", "op_feld[14:13]", "0b000000000011100110", "src2_addr[1:0]", "0b111", "op_feld[42]", "0b0", "op_feld[42]", "auop_d[3:0]", "0b0", "exr22[11]", "op_feld[14:13]", "0b00000000001110", "stack[5]", "0b110", "s_user", "0b1111", "op_feld[42]", "0b0", "op_feld[42]", "auop_d[3:0]", "0b0", "exr22[11]", "op_feld[14:13]", "0b0000000010111xxxxxxx111", "op_feld[42]"] ["TmP_593", "TmP_592", "TmP_211", "TmP_591", "TmP_590", "TmP_212", "TmP_589", "TmP_588", "TmP_587", "TmP_586"],
        _eq 5 "DECODER.v:1172|DECODER.v:1153" ["TmP_586"] ["src2_addr[4:0]"] ["0b11011"] ,
        _eq 5 "DECODER.v:1171|DECODER.v:1153" ["TmP_587"] ["src2_addr[4:0]"] ["0b11001"] ,
        _eq 4 "DECODER.v:1170|DECODER.v:1153" ["TmP_588"] ["src2_addr[4:2]", "src2_addr[0]"] ["0b1100"] ,
        _eq 5 "DECODER.v:1166|DECODER.v:1153" ["TmP_589"] ["src2_addr[4:0]"] ["0b10111"] ,
        _eq 5 "DECODER.v:1165|DECODER.v:1153" ["TmP_212"] ["src2_addr[4:0]"] ["0b10110"] ,
        _eq 5 "DECODER.v:1164|DECODER.v:1153" ["TmP_590"] ["src2_addr[4:0]"] ["0b10101"] ,
        _eq 5 "DECODER.v:1161|DECODER.v:1153" ["TmP_591"] ["src2_addr[4:0]"] ["0b10100"] ,
        _eq 3 "DECODER.v:1159|DECODER.v:1153" ["TmP_211"] ["src2_addr[4:2]"] ["0b100"] ,
        _eq 2 "DECODER.v:1157|DECODER.v:1153" ["TmP_592"] ["src2_addr[4:3]"] ["0b01"] ,
        _logic_not 2 "DECODER.v:1155|DECODER.v:1153" ["TmP_593"] ["src2_addr[4:3]"],
        _pmux 36 10 "DECODER.v:1123|DECODER.v:1104" ["gen_src1[35:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b000000000000001110000", "src1_addr[2:0]", "0b000", "op_feld[45]", "auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b000000000000001110000", "src1_addr[2:0]", "0b111", "op_feld[45]", "0b1011000000000000000000110", "usp_1[6:0]", "0b1111", "TmP_738[35:0]", "auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b00000001000000111xxxxxxx111", "op_feld[45]", "0b101100000000101000000010100111110001", "TmP_739[35:0]", "auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b0000000000000011100110", "src1_addr[1:0]", "0b111", "op_feld[45]", "auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b000000000000001110", "stack[5]", "0b110", "s_user", "0b1111", "op_feld[45]", "auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b00000000100000111xxxxxxx111", "op_feld[45]"] ["TmP_601", "TmP_600", "TmP_207", "TmP_599", "TmP_598", "TmP_208", "TmP_597", "TmP_596", "TmP_595", "TmP_594"],
        _eq 5 "DECODER.v:1123|DECODER.v:1104" ["TmP_594"] ["src1_addr[4:0]"] ["0b11011"] ,
        _eq 5 "DECODER.v:1122|DECODER.v:1104" ["TmP_595"] ["src1_addr[4:0]"] ["0b11001"] ,
        _eq 4 "DECODER.v:1121|DECODER.v:1104" ["TmP_596"] ["src1_addr[4:2]", "src1_addr[0]"] ["0b1100"] ,
        _eq 5 "DECODER.v:1117|DECODER.v:1104" ["TmP_597"] ["src1_addr[4:0]"] ["0b10111"] ,
        _eq 5 "DECODER.v:1116|DECODER.v:1104" ["TmP_208"] ["src1_addr[4:0]"] ["0b10110"] ,
        _eq 5 "DECODER.v:1115|DECODER.v:1104" ["TmP_598"] ["src1_addr[4:0]"] ["0b10101"] ,
        _eq 5 "DECODER.v:1112|DECODER.v:1104" ["TmP_599"] ["src1_addr[4:0]"] ["0b10100"] ,
        _eq 3 "DECODER.v:1110|DECODER.v:1104" ["TmP_207"] ["src1_addr[4:2]"] ["0b100"] ,
        _eq 2 "DECODER.v:1108|DECODER.v:1104" ["TmP_600"] ["src1_addr[4:3]"] ["0b01"] ,
        _logic_not 2 "DECODER.v:1106|DECODER.v:1104" ["TmP_601"] ["src1_addr[4:3]"],
        _mux 16 "DECODER.v:1078" ["idx_feld[15:0]"] ["idx_reg[15:0]"] ["idx_bytes[15:0]"] ["phase_idx"],
        _mux 1 "DECODER.v:1064" ["TmP_44"] ["mt_flag"] ["TmP_92"] ["PHASE_0"],
        _mux 1 "DECODER.v:1063" ["TmP_65"] ["skps_flag"] ["TmP_91"] ["PHASE_0"],
        _mux 1 "DECODER.v:1062" ["TmP_11"] ["cmps_flag"] ["TmP_90"] ["PHASE_0"],
        _mux 1 "DECODER.v:1054" ["TmP_35"] ["kill_opt"] ["TmP_88"] ["PHASE_0"],
        _mux 1 "DECODER.v:1036" ["TmP_76"] ["wrval_flag"] ["OPREG[10]"] ["PHASE_0"],
        _mux 1 "DECODER.v:1033" ["TmP_60"] ["TmP_86"] ["TmP_85"] ["PHASE_0"],
        _mux 1 "DECODER.v:1028" ["TmP_41"] ["m_usel"] ["OPREG[12]"] ["PHASE_0"],
        _mux 1 "DECODER.v:1025" ["TmP_42"] ["TmP_84"] ["TmP_83"] ["PHASE_0"],
        _mux 1 "DECODER.v:1017" ["TmP_10"] ["TmP_80"] ["TmP_79"] ["PHASE_0"],
        _mux 6 "DECODER.v:1009" ["TmP_39[5:0]"] ["lmrreg[5:0]"] ["TmP_737[5:0]"] ["PHASE_0"],
        _mux 24 "DECODER.v:1001" ["TmP_4[23:0]"] ["COP_OP[23:0]"] ["OPREG[23:0]"] ["PHASE_0"],
        _mux 48 "DECODER.v:955" ["op_feld[47:0]"] ["op_feld_reg[47:0]"] ["opc_bits[47:0]"] ["PHASE_0"],
        _pmux 48 38 "DECODER.v:941|DECODER.v:884" ["op3_feld[47:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1010xxxx"] ["0b001001011000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0111", "OPREG[13:10]", "0b001001011000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "0b00", "hdl_b[1:0]", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0110", "OPREG[13:10]", "0b001001001000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0110", "OPREG[13:10]", "0b001001001000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b01", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0111", "OPREG[13:10]", "0b001001001000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b10", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0111", "OPREG[13:10]", "0b001001011000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b00", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b10000", "OPREG[10]", "OPREG[7:6]", "0b001001101000", "OPREG[21:19]", "hdr_d[5:0]", "hdl_b[1:0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[10:8]", "0b1001", "OPREG[13:10]", "0b001001101", "hdr_e[5:0]", "hdr_f[5:0]", "0b1110", "OPREG[23:14]", "0b00", "OPREG[10:8]", "0b1001", "OPREG[13:10]", "0b001001101", "hdr_e[5:0]", "hdr_f[5:0]", "0b1011", "OPREG[23:14]", "0b00", "OPREG[10:8]", "0b1001", "OPREG[13:10]", "0b001001101", "hdr_c[5:0]", "0b000", "OPREG[16:14]", "0b1", "hdl_d[0]", "hdl_b[1:0]", "OPREG[23:14]", "0b00", "OPREG[10:8]", "0b1001", "OPREG[13:10]", "0b001001101", "hdr_c[5:0]", "0b000", "OPREG[16:14]", "0b1", "hdl_d[0]", "hdl_b[1:0]", "OPREG[23:14]", "0b00", "OPREG[10:8]", "0b11011101001001111", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[8]", "0bxx11011101001001111", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[8]", "0bxx1011", "OPREG[13:10]", "0b001001110", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[8]", "0bxx1011", "OPREG[13:10]", "0b001001001", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[8]", "0bxx1011", "OPREG[13:10]", "0b001001001000", "OPREG[21:19]", "0b0101111010", "OPREG[23:19]", "0b000000001110010010001001001010111000", "OPREG[16:14]", "0b101000000", "OPREG[18:14]", "0b0001110011100001001001001", "OPREG[17:15]", "0b000", "OPREG[21:19]", "0b101000000", "OPREG[23:19]", "0b0001101000101001001000xxxxxxxxxxxxxx10", "OPREG[23:14]", "0b10", "OPREG[10:8]", "0b010100", "OPREG[10]", "0b0001001101", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[8]", "0bxx11011101001001111000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0111", "OPREG[13:10]", "0b001001111000", "OPREG[21:19]", "0b000", "OPREG[16:15]", "hdr_g[0]", "hdl_b[1:0]", "hdl_f[1:0]", "OPREG[23:14]", "0b100", "OPREG[9:8]", "0b0111", "OPREG[13:10]", "0b111111001000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b01000101110110000000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "0bxx10", "OPREG[23:14]", "0b10", "OPREG[10:8]", "0b010100", "OPREG[10]", "0b0001001010", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b10", "OPREG[8]", "0bxx1100", "OPREG[13:10]", "0b001001101", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[8]", "0bxx1011011", "OPREG[10]", "0b001001111", "hdr_c[5:0]", "hdr_d[5:0]", "0b1", "hdl_d[0]", "0b1", "hdl_d[0]", "OPREG[23:14]", "0b00", "OPREG[8]", "0bxx1011011", "OPREG[10]", "0b101000000000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_g[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b10", "OPREG[10:8]", "0b0111", "OPREG[13:10]", "0b111001010000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_g[1]", "hdl_h[0]", "hdl_b[1:0]", "OPREG[23:14]", "0b10", "OPREG[10:8]", "0b10000", "OPREG[10]", "OPREG[7:6]", "TmP_791[47:0]", "0b001001111000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0111000", "OPREG[12]", "0b100000000000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_g[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b10", "OPREG[10:8]", "0b10000", "OPREG[10]", "OPREG[7:6]", "0b001100000000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b10", "OPREG[23:14]", "0b1001110000", "OPREG[10]", "OPREG[7:6]", "0b001100000000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b10", "OPREG[23:14]", "0b100111000", "OPREG[13:10]", "0b110001000000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b10", "OPREG[23:14]", "0b1001110000", "OPREG[10]", "OPREG[7:6]", "0b001001010000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "hdl_b[1:0]", "OPREG[23:14]", "0b1001110000100111000000000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "0b0010", "OPREG[23:19]", "0b000001000001000101001001001000", "OPREG[21:19]", "0b1111011010", "OPREG[23:19]", "0b000000001101000101"] ["TmP_647", "TmP_187", "TmP_644", "TmP_643", "TmP_642", "TmP_641", "TmP_640", "TmP_639", "TmP_638", "TmP_186", "TmP_635", "TmP_633", "TmP_185", "TmP_630", "TmP_184", "TmP_627", "TmP_626", "TmP_624", "TmP_183", "TmP_621", "TmP_620", "TmP_619", "TmP_618", "TmP_617", "TmP_616", "TmP_615", "TmP_614", "TmP_613", "TmP_612", "TmP_191", "TmP_609", "TmP_608", "TmP_607", "TmP_606", "TmP_605", "TmP_604", "TmP_603", "TmP_182"],
        _eq 10 "DECODER.v:941|DECODER.v:884" ["TmP_602"] ["OPREG[13:4]"] ["0b1001110001"] ,
        _eq 7 "DECODER.v:940|DECODER.v:884" ["TmP_603"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0000001"] ,
        _eq 5 "DECODER.v:938|DECODER.v:884" ["TmP_604"] ["OPREG[10]", "OPREG[7:4]"] ["0b10010"] ,
        _eq 5 "DECODER.v:937|DECODER.v:884" ["TmP_605"] ["OPREG[10]", "OPREG[7:4]"] ["0b00110"] ,
        _eq 8 "DECODER.v:936|DECODER.v:884" ["TmP_606"] ["OPREG[13:10]", "OPREG[7:4]"] ["0b00101100"] ,
        _eq 5 "DECODER.v:935|DECODER.v:884" ["TmP_607"] ["OPREG[10]", "OPREG[7:4]"] ["0b01010"] ,
        _eq 5 "DECODER.v:934|DECODER.v:884" ["TmP_608"] ["OPREG[10]", "OPREG[7:4]"] ["0b00010"] ,
        _eq 7 "DECODER.v:933|DECODER.v:884" ["TmP_609"] ["OPREG[13]", "OPREG[11:10]", "OPREG[7:4]"] ["0b1110100"] ,
        _eq 8 "DECODER.v:930|DECODER.v:884" ["TmP_610"] ["OPREG[13:10]", "OPREG[7:4]"] ["0b11100100"] ,
        _eq 6 "DECODER.v:927|DECODER.v:884" ["TmP_611"] ["OPREG[13]", "OPREG[11]", "OPREG[7:4]"] ["0b010100"] ,
        _eq 5 "DECODER.v:926|DECODER.v:884" ["TmP_612"] ["OPREG[10]", "OPREG[7:4]"] ["0b01110"] ,
        _eq 8 "DECODER.v:925|DECODER.v:884" ["TmP_613"] ["OPREG[13:10]", "OPREG[7:4]"] ["0b00111100"] ,
        _eq 9 "DECODER.v:924|DECODER.v:884" ["TmP_614"] ["OPREG[13:9]", "OPREG[7:4]"] ["0b010001111"] ,
        _eq 9 "DECODER.v:923|DECODER.v:884" ["TmP_615"] ["OPREG[13:9]", "OPREG[7:4]"] ["0b010101111"] ,
        _eq 8 "DECODER.v:922|DECODER.v:884" ["TmP_616"] ["OPREG[13:11]", "OPREG[9]", "OPREG[7:4]"] ["0b00101111"] ,
        _eq 7 "DECODER.v:921|DECODER.v:884" ["TmP_617"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0001100"] ,
        _eq 7 "DECODER.v:920|DECODER.v:884" ["TmP_618"] ["OPREG[13]", "OPREG[11:10]", "OPREG[7:4]"] ["0b0111010"] ,
        _eq 7 "DECODER.v:918|DECODER.v:884" ["TmP_619"] ["OPREG[13:12]", "OPREG[10]", "OPREG[7:4]"] ["0b1011100"] ,
        _eq 6 "DECODER.v:917|DECODER.v:884" ["TmP_620"] ["OPREG[13:12]", "OPREG[7:4]"] ["0b111100"] ,
        _eq 8 "DECODER.v:915|DECODER.v:884" ["TmP_621"] ["OPREG[11:9]", "OPREG[7:3]"] ["0b01010110"] ,
        _eq 8 "DECODER.v:913|DECODER.v:884" ["TmP_622"] ["OPREG[13:10]", "OPREG[7:4]"] ["0b00110000"] ,
        _logic_not 7 "DECODER.v:912|DECODER.v:884" ["TmP_623"] ["OPREG[13:11]", "OPREG[7:4]"],
        _eq 10 "DECODER.v:910|DECODER.v:884" ["TmP_624"] ["OPREG[13:4]"] ["0b0011110001"] ,
        _eq 10 "DECODER.v:909|DECODER.v:884" ["TmP_625"] ["OPREG[13:4]"] ["0b0010110001"] ,
        _eq 10 "DECODER.v:907|DECODER.v:884" ["TmP_626"] ["OPREG[13:11]", "OPREG[9:3]"] ["0b1101100111"] ,
        _eq 10 "DECODER.v:906|DECODER.v:884" ["TmP_627"] ["OPREG[13:11]", "OPREG[9:3]"] ["0b0011100111"] ,
        _eq 9 "DECODER.v:905|DECODER.v:884" ["TmP_628"] ["OPREG[12:9]", "OPREG[7:3]"] ["0b101010111"] ,
        _eq 10 "DECODER.v:904|DECODER.v:884" ["TmP_629"] ["OPREG[13:9]", "OPREG[7:3]"] ["0b0001010111"] ,
        _eq 9 "DECODER.v:903|DECODER.v:884" ["TmP_630"] ["OPREG[13:9]", "OPREG[7:4]"] ["0b001001011"] ,
        _eq 10 "DECODER.v:902|DECODER.v:884" ["TmP_631"] ["OPREG[13:9]", "OPREG[7:3]"] ["0b1100010111"] ,
        _eq 10 "DECODER.v:901|DECODER.v:884" ["TmP_632"] ["OPREG[13:9]", "OPREG[7:3]"] ["0b1000010111"] ,
        _eq 8 "DECODER.v:900|DECODER.v:884" ["TmP_633"] ["OPREG[11:9]", "OPREG[7:3]"] ["0b00010110"] ,
        _eq 9 "DECODER.v:899|DECODER.v:884" ["TmP_634"] ["OPREG[13]", "OPREG[11:9]", "OPREG[7:3]"] ["0b000010111"] ,
        _eq 8 "DECODER.v:898|DECODER.v:884" ["TmP_635"] ["OPREG[13:11]", "OPREG[7:3]"] ["0b11100110"] ,
        _eq 8 "DECODER.v:897|DECODER.v:884" ["TmP_636"] ["OPREG[13:11]", "OPREG[7:3]"] ["0b11100111"] ,
        _eq 6 "DECODER.v:896|DECODER.v:884" ["TmP_637"] ["OPREG[13:12]", "OPREG[7:4]"] ["0b100011"] ,
        _eq 7 "DECODER.v:895|DECODER.v:884" ["TmP_638"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0110011"] ,
        _eq 7 "DECODER.v:894|DECODER.v:884" ["TmP_639"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0100011"] ,
        _eq 7 "DECODER.v:893|DECODER.v:884" ["TmP_640"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0000011"] ,
        _eq 8 "DECODER.v:891|DECODER.v:884" ["TmP_641"] ["OPREG[13:10]", "OPREG[7:4]"] ["0b00010110"] ,
        _eq 7 "DECODER.v:890|DECODER.v:884" ["TmP_642"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0111100"] ,
        _eq 7 "DECODER.v:889|DECODER.v:884" ["TmP_643"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0101100"] ,
        _eq 6 "DECODER.v:888|DECODER.v:884" ["TmP_644"] ["OPREG[13]", "OPREG[11]", "OPREG[7:4]"] ["0b100100"] ,
        _eq 8 "DECODER.v:887|DECODER.v:884" ["TmP_645"] ["OPREG[13:10]", "OPREG[7:4]"] ["0b01010100"] ,
        _eq 7 "DECODER.v:886|DECODER.v:884" ["TmP_646"] ["OPREG[13:11]", "OPREG[7:4]"] ["0b0000100"] ,
        _eq 8 "DECODER.v:885|DECODER.v:884" ["TmP_647"] ["OPREG[13:10]", "OPREG[7:4]"] ["0b10001100"] ,
        _mux 1 "DECODER.v:839" ["TmP_32"] ["inss_op"] ["TmP_160"] ["PHASE_0"],
        _mux 1 "DECODER.v:838" ["TmP_27"] ["extract"] ["TmP_314"] ["PHASE_0"],
        _mux 1 "DECODER.v:837" ["TmP_26"] ["exin_cmd"] ["TmP_158"] ["PHASE_0"],
        _mux 1 "DECODER.v:836" ["TmP_8"] ["bit_reg"] ["TmP_275"] ["PHASE_0"],
        _mux 1 "DECODER.v:834" ["TmP_34"] ["jsr_flag"] ["TmP_273"] ["PHASE_0"],
        _mux 1 "DECODER.v:832" ["TmP_64"] ["setcfg_lsb"] ["OPREG[15]"] ["PHASE_0"],
        _mux 1 "DECODER.v:831" ["TmP_51"] ["op_setcfg"] ["setcfg"] ["PHASE_0"],
        _mux 1 "DECODER.v:827" ["TmP_23"] ["TmP_156"] ["TmP_272"] ["PHASE_0"],
        _mux 9 "DECODER.v:818" ["TmP_73[8:0]"] ["wait_reg[8:0]"] ["waitop[8:0]"] ["PHASE_0"],
        _pmux 9 2 "DECODER.v:813|DECODER.v:807" ["waitop[8:0]"] ["0b000000000"] ["0b101001100101110100"] ["TmP_181", "TmP_180"],
        _eq 13 "DECODER.v:813|DECODER.v:807" ["TmP_648"] ["OPREG[14:10]", "OPREG[7:0]"] ["0b0100100011110"] ,
        _eq 13 "DECODER.v:812|DECODER.v:807" ["TmP_649"] ["OPREG[14:10]", "OPREG[7:0]"] ["0b0001000011110"] ,
        _eq 12 "DECODER.v:811|DECODER.v:807" ["TmP_650"] ["OPREG[13:10]", "OPREG[7:0]"] ["0b001000001110"] ,
        _eq 8 "DECODER.v:810|DECODER.v:807" ["TmP_651"] ["OPREG[10]", "OPREG[8:2]"] ["0b01011111"] ,
        _eq 9 "DECODER.v:809|DECODER.v:807" ["TmP_652"] ["OPREG[10:2]"] ["0b110011011"] ,
        _eq 9 "DECODER.v:808|DECODER.v:807" ["TmP_653"] ["OPREG[10:2]"] ["0b110111011"] ,
        _mux 1 "DECODER.v:799" ["acb_flag"] ["acb_reg"] ["acb_op"] ["PHASE_0"],
        _mux 1 "DECODER.v:793" ["short_def"] ["short_op_reg"] ["short_op"] ["PHASE_0"],
        _pmux 48 17 "DECODER.v:785|DECODER.v:759" ["op2_feld[47:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1010xxxx"] ["0b001001011xxxxxx000", "OPREG[13:11]", "hzl_a[1:0]", "hzl_a[1:0]", "0b10100", "OPREG[15:11]", "0b000", "OPREG[1:0]", "0b01000000001001010xxxxxx000", "OPREG[13:11]", "hzl_a[1:0]", "hzl_a[1:0]", "0b10100", "OPREG[15:11]", "0b000", "OPREG[1:0]", "0b01000001001001001", "hzr_c[5:0]", "0b000", "OPREG[13:11]", "hzl_a[1:0]", "hzl_a[1:0]", "0b00000", "OPREG[15:11]", "0b000", "OPREG[1:0]", "0b01000101001001001xxxxxx000", "OPREG[13:11]", "hzl_a[1:0]", "hzl_a[1:0]", "0b10100", "OPREG[15:11]", "0b000", "OPREG[1:0]", "0b01111010001001001xxxxxx000", "OPREG[13:11]", "hzl_a[1:0]", "hzl_a[1:0]", "0b10100", "OPREG[15:11]", "0b000", "OPREG[1:0]", "0b01000101001001001000", "OPREG[13:11]", "hzr_c[5:0]", "hzl_a[1:0]", "0b10", "OPREG[15:11]", "0b00000000", "OPREG[1:0]", "0b01110110001001001000", "OPREG[13:11]", "0b011101", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:11]", "0b00000000", "OPREG[1:0]", "0b0011", "OPREG[10:7]", "0b110001001000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:11]", "0b00000100", "OPREG[1:0]", "0b0011", "OPREG[10:7]", "0b001001001000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:11]", "0b00000100", "OPREG[1:0]", "0b0011", "OPREG[10:7]", "0b001001011000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:6]", "0b000", "OPREG[1:0]", "0b0100", "OPREG[5:2]", "0b001001010000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:6]", "0b000", "OPREG[1:0]", "0b0100", "OPREG[5:2]", "0b001001001000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:6]", "0b000", "OPREG[1:0]", "0b0100", "OPREG[5:2]", "TmP_787[47:0]", "0b001001011000", "OPREG[13:11]", "hzr_s[5]", "0b110", "s_user", "0b1", "hzl_a[1:0]", "0b10", "OPREG[15:11]", "0b00000000", "OPREG[1:0]", "0b01001000110001001000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:6]", "0b000", "OPREG[1:0]", "0b01001001111001001000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "hzl_a[1:0]", "OPREG[15:11]", "0b00000100", "OPREG[1:0]", "0b0011", "OPREG[10:7]", "0b001001001000000111101001010100000000001101110110"] ["TmP_669", "TmP_668", "TmP_667", "TmP_666", "TmP_665", "TmP_664", "TmP_663", "TmP_662", "TmP_661", "TmP_660", "TmP_659", "TmP_658", "TmP_657", "TmP_656", "TmP_655", "TmP_654", "setcfg"],
        _eq 10 "DECODER.v:783|DECODER.v:759" ["TmP_654"] ["setcfg", "OPREG[10:2]"] ["0b0000011111"] ,
        _eq 5 "DECODER.v:782|DECODER.v:759" ["TmP_655"] ["setcfg", "OPREG[5:2]"] ["0b01001"] ,
        _eq 10 "DECODER.v:780|DECODER.v:759" ["TmP_656"] ["setcfg", "OPREG[10:2]"] ["0b0101011111"] ,
        _eq 5 "DECODER.v:776|DECODER.v:759" ["TmP_657"] ["setcfg", "OPREG[5:2]"] ["0b01101"] ,
        _eq 5 "DECODER.v:775|DECODER.v:759" ["TmP_658"] ["setcfg", "OPREG[5:2]"] ["0b00101"] ,
        _eq 5 "DECODER.v:774|DECODER.v:759" ["TmP_659"] ["setcfg", "OPREG[5:2]"] ["0b00001"] ,
        _logic_not 2 "DECODER.v:773|DECODER.v:759" ["TmP_660"] ["setcfg", "OPREG[2]"],
        _eq 10 "DECODER.v:771|DECODER.v:759" ["TmP_661"] ["setcfg", "OPREG[10:2]"] ["0b0111011111"] ,
        _eq 9 "DECODER.v:770|DECODER.v:759" ["TmP_662"] ["setcfg", "OPREG[9:2]"] ["0b010011111"] ,
        _eq 9 "DECODER.v:769|DECODER.v:759" ["TmP_663"] ["setcfg", "OPREG[10]", "OPREG[8:2]"] ["0b001011111"] ,
        _eq 6 "DECODER.v:767|DECODER.v:759" ["TmP_664"] ["setcfg", "OPREG[6:2]"] ["0b011011"] ,
        _eq 6 "DECODER.v:766|DECODER.v:759" ["TmP_665"] ["setcfg", "OPREG[6:2]"] ["0b010111"] ,
        _eq 6 "DECODER.v:765|DECODER.v:759" ["TmP_666"] ["setcfg", "OPREG[6:2]"] ["0b001111"] ,
        _eq 6 "DECODER.v:763|DECODER.v:759" ["TmP_667"] ["setcfg", "OPREG[6:2]"] ["0b001011"] ,
        _eq 6 "DECODER.v:762|DECODER.v:759" ["TmP_668"] ["setcfg", "OPREG[6:2]"] ["0b000111"] ,
        _eq 5 "DECODER.v:761|DECODER.v:759" ["TmP_669"] ["setcfg", "OPREG[5:2]"] ["0b00011"] ,
        _pmux 6 3 "DECODER.v:751|DECODER.v:748" ["hzr_c[5:0]"] ["0b01", "OPREG[10:7]"] ["stack[5]", "0b110", "s_user", "0b1", "stack_sel[1]", "0b11011", "TmP_786[5:0]"] ["TmP_672", "TmP_671", "TmP_670"],
        _eq 4 "DECODER.v:751|DECODER.v:748" ["TmP_670"] ["OPREG[10:7]"] ["0b1100"] ,
        _eq 4 "DECODER.v:750|DECODER.v:748" ["TmP_671"] ["OPREG[10:7]"] ["0b1011"] ,
        _eq 4 "DECODER.v:749|DECODER.v:748" ["TmP_672"] ["OPREG[10:7]"] ["0b1001"] ,
        _mux 1 "DECODER.v:716" ["TmP_50"] ["s_user"] ["old_su"] ["phase_reg[1]"],
        _mux 2 "DECODER.v:713" ["TmP_69[1:0]"] ["stack_sel[1:0]"] ["TmP_794[1:0]"] ["do_xor"],
        _pmux 32 4 "DECODER.v:695|DECODER.v:691" ["imme_i[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["TmP_784[31:0]", "0bxxxxxxxxxxxxxxxx", "OPREG[7:0]", "OPREG[15:0]", "OPREG[15:8]", "OPREG[23:16]", "OPREG[31:24]", "TmP_785[31:0]"] ["TmP_675", "TmP_674", "TmP_673", "short_op"],
        _eq 2 "DECODER.v:694|DECODER.v:691" ["TmP_673"] ["short_op", "dim_feld[2]"] ["0b01"] ,
        _eq 3 "DECODER.v:693|DECODER.v:691" ["TmP_674"] ["short_op", "dim_feld[2:1]"] ["0b001"] ,
        _logic_not 3 "DECODER.v:692|DECODER.v:691" ["TmP_675"] ["short_op", "dim_feld[2:1]"],
        _pmux 32 10 "DECODER.v:687|DECODER.v:677" ["DISP[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["disp_val[31:0]", "TmP_736[31:0]", "disp_val[29:0]", "0b0011111111111111111111111", "type_nmi", "0b000000001111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111001111111111111111111111111111100000000000000000000000000000", "exc_vector[3:0]", "0b000000000000000000000000000000", "disp_sel[1:0]", "0b00"] ["TmP_685", "TmP_684", "TmP_683", "TmP_682", "TmP_681", "TmP_680", "TmP_679", "TmP_678", "TmP_677", "TmP_676"],
        _logic_not 3 "DECODER.v:687|DECODER.v:677" ["TmP_676"] ["ld_disp", "disp_sel[3:2]"],
        _eq 3 "DECODER.v:686|DECODER.v:677" ["TmP_677"] ["ld_disp", "disp_sel[3:2]"] ["0b001"] ,
        _eq 5 "DECODER.v:685|DECODER.v:677" ["TmP_678"] ["ld_disp", "disp_sel[3:0]"] ["0b01011"] ,
        _eq 5 "DECODER.v:684|DECODER.v:677" ["TmP_679"] ["ld_disp", "disp_sel[3:0]"] ["0b01010"] ,
        _eq 5 "DECODER.v:683|DECODER.v:677" ["TmP_680"] ["ld_disp", "disp_sel[3:0]"] ["0b01001"] ,
        _eq 5 "DECODER.v:682|DECODER.v:677" ["TmP_681"] ["ld_disp", "disp_sel[3:0]"] ["0b01000"] ,
        _eq 3 "DECODER.v:681|DECODER.v:677" ["TmP_682"] ["ld_disp", "disp_sel[3:2]"] ["0b011"] ,
        _eq 2 "DECODER.v:680|DECODER.v:677" ["TmP_683"] ["ld_disp", "disp_sel[3]"] ["0b11"] ,
        _eq 3 "DECODER.v:679|DECODER.v:677" ["TmP_684"] ["ld_disp", "disp_sel[3:2]"] ["0b101"] ,
        _eq 3 "DECODER.v:678|DECODER.v:677" ["TmP_685"] ["ld_disp", "disp_sel[3:2]"] ["0b100"] ,
        _pmux 32 3 "DECODER.v:670|DECODER.v:667" ["disp_val[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6]", "OPREG[6:0]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5]", "OPREG[5:0]", "OPREG[15:8]", "OPREG[5]", "OPREG[5]", "OPREG[5:0]", "OPREG[15:8]", "OPREG[23:16]", "OPREG[31:24]"] ["TmP_314", "TmP_250", "TmP_686"],
        _eq 2 "DECODER.v:670|DECODER.v:667" ["TmP_686"] ["OPREG[7:6]"] ["0b11"] ,
        _eq 2 "DECODER.v:669|DECODER.v:667" ["TmP_250"] ["OPREG[7:6]"] ["0b10"] ,
        _pmux 4 3 "DECODER.v:663|DECODER.v:657" ["di_stat[3:0]"] ["0bxxxx"] ["0b001", "valid[0]", "0b010", "valid[1]", "0b100", "ANZ_VAL[2]"] ["TmP_179", "TmP_178", "TmP_177"],
        _eq 4 "DECODER.v:663|DECODER.v:657" ["TmP_687"] ["dim_feld[2:1]", "OPREG[7:6]"] ["0b1111"] ,
        _eq 4 "DECODER.v:662|DECODER.v:657" ["TmP_688"] ["dim_feld[2:1]", "OPREG[7:6]"] ["0b1110"] ,
        _eq 3 "DECODER.v:661|DECODER.v:657" ["TmP_689"] ["dim_feld[2:1]", "OPREG[7]"] ["0b110"] ,
        _eq 2 "DECODER.v:660|DECODER.v:657" ["TmP_690"] ["dim_feld[2:1]"] ["0b10"] ,
        _eq 2 "DECODER.v:659|DECODER.v:657" ["TmP_691"] ["dim_feld[2:1]"] ["0b01"] ,
        _logic_not 2 "DECODER.v:658|DECODER.v:657" ["TmP_692"] ["dim_feld[2:1]"],
        _mux 2 "DECODER.v:639" ["TmP_20[1:0]"] ["dim_feld[2:1]"] ["new_op[2:1]"] ["next"],
        _mux 6 "DECODER.v:631" ["TmP_57[5:0]"] ["resto[5:0]"] ["0b000", "TmP_355[2:0]"] ["TmP_298"],
        _mux 3 "DECODER.v:625" ["TmP_693[2:0]"] ["rpointer[2:0]"] ["reg_nr[2:0]"] ["TmP_298"],
        _mux 3 "DECODER.v:623" ["TmP_59[2:0]"] ["TmP_693[2:0]"] ["0b000"] ["PHASE_0"],
        _pmux 1 16 "DECODER.v:615|DECODER.v:599" ["branch"] ["0bx"] ["PSR[6]", "TmP_350", "PSR[0]", "TmP_351", "PSR[2]", "TmP_352", "PSR[7]", "TmP_353", "PSR[5]", "TmP_354", "TmP_143", "TmP_421", "TmP_144", "TmP_422", "0b10"] ["TmP_709", "TmP_708", "TmP_707", "TmP_706", "TmP_705", "TmP_704", "TmP_703", "TmP_702", "TmP_701", "TmP_700", "TmP_699", "TmP_698", "TmP_697", "TmP_696", "TmP_695", "TmP_694"],
        _eq 4 "DECODER.v:615|DECODER.v:599" ["TmP_694"] ["cc_feld[3:0]"] ["0b1111"] ,
        _eq 4 "DECODER.v:614|DECODER.v:599" ["TmP_695"] ["cc_feld[3:0]"] ["0b1110"] ,
        _eq 4 "DECODER.v:613|DECODER.v:599" ["TmP_696"] ["cc_feld[3:0]"] ["0b1101"] ,
        _eq 4 "DECODER.v:612|DECODER.v:599" ["TmP_697"] ["cc_feld[3:0]"] ["0b1100"] ,
        _eq 4 "DECODER.v:611|DECODER.v:599" ["TmP_698"] ["cc_feld[3:0]"] ["0b1011"] ,
        _eq 4 "DECODER.v:610|DECODER.v:599" ["TmP_699"] ["cc_feld[3:0]"] ["0b1010"] ,
        _eq 4 "DECODER.v:609|DECODER.v:599" ["TmP_700"] ["cc_feld[3:0]"] ["0b1001"] ,
        _eq 4 "DECODER.v:608|DECODER.v:599" ["TmP_701"] ["cc_feld[3:0]"] ["0b1000"] ,
        _eq 4 "DECODER.v:607|DECODER.v:599" ["TmP_702"] ["cc_feld[3:0]"] ["0b0111"] ,
        _eq 4 "DECODER.v:606|DECODER.v:599" ["TmP_703"] ["cc_feld[3:0]"] ["0b0110"] ,
        _eq 4 "DECODER.v:605|DECODER.v:599" ["TmP_704"] ["cc_feld[3:0]"] ["0b0101"] ,
        _eq 4 "DECODER.v:604|DECODER.v:599" ["TmP_705"] ["cc_feld[3:0]"] ["0b0100"] ,
        _eq 4 "DECODER.v:603|DECODER.v:599" ["TmP_706"] ["cc_feld[3:0]"] ["0b0011"] ,
        _eq 4 "DECODER.v:602|DECODER.v:599" ["TmP_707"] ["cc_feld[3:0]"] ["0b0010"] ,
        _eq 4 "DECODER.v:601|DECODER.v:599" ["TmP_708"] ["cc_feld[3:0]"] ["0b0001"] ,
        _logic_not 4 "DECODER.v:600|DECODER.v:599" ["TmP_709"] ["cc_feld[3:0]"],
        _mux 2 "DECODER.v:596" ["TmP_710[1:0]"] ["s_mod[1:0]"] ["TmP_420[1:0]"] ["rett_exc"],
        _mux 2 "DECODER.v:594" ["TmP_61[1:0]"] ["TmP_710[1:0]"] ["PSR[9]", "TmP_349"] ["TmP_296"],
        _mux 1 "DECODER.v:592" ["TmP_62"] ["s_user"] ["PSR[9]"] ["TmP_297"],
        _mux 1 "DECODER.v:565" ["TmP_711"] ["format1"] ["0b1"] ["TmP_295"],
        _mux 1 "DECODER.v:563" ["TmP_28"] ["TmP_711"] ["TmP_413"] ["TmP_293"],
        _mux 1 "DECODER.v:551" ["TmP_18"] ["dia_op"] ["OPREG[6]"] ["PHASE_0"],
        _mux 1 "DECODER.v:551" ["TmP_58"] ["reti_flag"] ["OPREG[4]"] ["PHASE_0"],
        _mux 1 "DECODER.v:551" ["TmP_45"] ["new_fp"] ["TmP_250"] ["PHASE_0"],
        _mux 2 "DECODER.v:551" ["TmP_24[1:0]"] ["ex_br_op[1:0]"] ["op1_feld[17:16]"] ["PHASE_0"],
        _mux 4 "DECODER.v:551" ["TmP_9[3:0]"] ["cc_feld[3:0]"] ["OPREG[7:4]"] ["PHASE_0"],
        _pmux 53 13 "DECODER.v:535|DECODER.v:520" ["op1_feld[52:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000xxxxxxxxxxxxxxxx"] ["0b1000000000000000000xxxxxxxxxxxxxx010100000001000011101000000000000000000xxxxxxxxxxxxxx011000000001000011101010110010100001000xxxxxxx0", "stack[5]", "0b110", "s_user", "0b1010000101010000000011010110000000010100xxxxxxx0011111010000110101000000011010110010100001000xxxxxxx0", "stack[5]", "0b110", "s_user", "0b1010001000000000000011010110010100001000xxxxxxx0", "stack[5]", "0b110", "s_user", "0b1010001000110000000010010010000011000010xxxxxxxxxxxxxx010001000101000000011000000000000000000xxxxxxxxxxxxxx10000011000000000000100111000011010000000110000", "stack[5]", "0b110", "s_user", "0b1100000101101001000011000000000000000000xxxxxxxxxxxxxx100000110010000000001000000000000000000xxxxxxxxxxxxxx010000000000000000001000000000000000000xxxxxxxxxxxxxx010010001000000000001000000000000000000xxxxxxxxxxxxxx01001000100100000000"] ["TmP_726", "TmP_725", "TmP_724", "TmP_723", "TmP_722", "TmP_721", "TmP_720", "TmP_719", "TmP_717", "TmP_176", "TmP_715", "TmP_175", "TmP_712"],
        _eq 8 "DECODER.v:535|DECODER.v:520" ["TmP_712"] ["OPREG[7:0]"] ["0b11010010"] ,
        _eq 8 "DECODER.v:534|DECODER.v:520" ["TmP_713"] ["OPREG[7:0]"] ["0b11000010"] ,
        _eq 8 "DECODER.v:533|DECODER.v:520" ["TmP_714"] ["OPREG[7:0]"] ["0b10110010"] ,
        _eq 8 "DECODER.v:532|DECODER.v:520" ["TmP_715"] ["OPREG[7:0]"] ["0b10100010"] ,
        _eq 8 "DECODER.v:531|DECODER.v:520" ["TmP_716"] ["OPREG[7:0]"] ["0b10010010"] ,
        _eq 8 "DECODER.v:530|DECODER.v:520" ["TmP_717"] ["OPREG[7:0]"] ["0b10000010"] ,
        _eq 8 "DECODER.v:529|DECODER.v:520" ["TmP_718"] ["OPREG[7:0]"] ["0b01110010"] ,
        _eq 8 "DECODER.v:528|DECODER.v:520" ["TmP_719"] ["OPREG[7:0]"] ["0b01100010"] ,
        _eq 8 "DECODER.v:527|DECODER.v:520" ["TmP_720"] ["OPREG[7:0]"] ["0b01010010"] ,
        _eq 8 "DECODER.v:526|DECODER.v:520" ["TmP_721"] ["OPREG[7:0]"] ["0b01000010"] ,
        _eq 8 "DECODER.v:525|DECODER.v:520" ["TmP_722"] ["OPREG[7:0]"] ["0b00110010"] ,
        _eq 8 "DECODER.v:524|DECODER.v:520" ["TmP_723"] ["OPREG[7:0]"] ["0b00100010"] ,
        _eq 8 "DECODER.v:523|DECODER.v:520" ["TmP_724"] ["OPREG[7:0]"] ["0b00010010"] ,
        _eq 8 "DECODER.v:522|DECODER.v:520" ["TmP_725"] ["OPREG[7:0]"] ["0b00000010"] ,
        _eq 4 "DECODER.v:521|DECODER.v:520" ["TmP_726"] ["OPREG[3:0]"] ["0b1010"] ,
        _mux 4 "DECODER.v:461" ["TmP_727[3:0]"] ["ovf_pipe[3:0]"] ["ovf_pipe[2]", "TmP_116", "ovf_pipe[0]", "TmP_115"] ["PHASE_0"],
        _mux 4 "DECODER.v:459" ["TmP_53[3:0]"] ["TmP_727[3:0]"] ["0b0000"] ["TmP_294"],
        _mux 4 "DECODER.v:440" ["TmP_728[3:0]"] ["exc_vector[3:0]"] ["0b000", "nmi_flag"] ["TmP_290"],
        _mux 4 "DECODER.v:438" ["TmP_729[3:0]"] ["TmP_728[3:0]"] ["0b0111"] ["flag_flag"],
        _mux 4 "DECODER.v:432" ["TmP_25[3:0]"] ["TmP_729[3:0]"] ["TmP_783[3:0]"] ["TmP_293"],
        _mux 1 "DECODER.v:412" ["TmP_71"] ["type_nmi"] ["nmi_flag"] ["TmP_292"],
        _pmux 3 2 "DECODER.v:358|DECODER.v:356" ["USED[2:0]"] ["0b000"] ["TmP_78[2:0]", "di_stat[3:1]"] ["TmP_731", "TmP_730"],
        _eq 3 "DECODER.v:358|DECODER.v:356" ["TmP_730"] ["PHASE_0", "dim_feld[3]", "di_stat[0]"] ["0b011"] ,
        _eq 2 "DECODER.v:357|DECODER.v:356" ["TmP_731"] ["PHASE_0", "op_ok"] ["0b11"] ,
        _mux 8 "DECODER.v:351" ["TmP_55[7:0]"] ["phase_reg[7:0]"] ["new_op[47:40]"] ["next"],
        _pmux 3 3 "DECODER.v:330|DECODER.v:327" ["valid[2:0]"] ["0b111"] ["0b000001011"] ["TmP_734", "TmP_733", "TmP_732"],
        _eq 3 "DECODER.v:330|DECODER.v:327" ["TmP_732"] ["ANZ_VAL[2:0]"] ["0b010"] ,
        _eq 3 "DECODER.v:329|DECODER.v:327" ["TmP_733"] ["ANZ_VAL[2:0]"] ["0b001"] ,
        _logic_not 3 "DECODER.v:328|DECODER.v:327" ["TmP_734"] ["ANZ_VAL[2:0]"],
        _shr 1 2 1 "DECODER.v:1093" ["stack[5]"] ["stack_sel[1:0]"] ["s_user"],
        _shr 1 2 1 "DECODER.v:717" ["TmP_735"] ["stack_sel[1:0]"] ["PSR[9]"],
        _sub 32 "DECODER.v:679" ["TmP_736[31:0]"] ["0b00000000000000000000000000000000"] ["disp_val[31:0]"] ,
        _sub 2 "DECODER.v:975" ["n_idx[1:0]"] ["idx_n[1:0]"] ["0b01"] ,
        _mux 6 "DECODER.v:1009" ["TmP_737[5:0]"] ["0b011100"] ["OPREG[13]", "OPREG[13]", "TmP_310", "OPREG[17:15]"] ["op_3byte"],
        _mux 16 "DECODER.v:1077" ["idx_bytes[15:0]"] ["OPREG[7:0]", "OPREG[7:0]"] ["OPREG[15:0]"] ["exr12[11]"],
        _mux 5 "DECODER.v:1092" ["src1_addr[4:0]"] ["op_feld[22:18]"] ["idx_feld[7:3]"] ["exr12[11]"],
        _mux 7 "DECODER.v:1094" ["usp_1[6:0]"] ["0b00110", "src1_addr[1]", "0b0"] ["0b0", "stack[5]", "0b110", "s_user", "0b1"] ["src1_addr[0]"],
        _mux 4 "DECODER.v:1098" ["auop_s[3:0]"] ["0b0010"] ["0b1011"] ["op_feld[45]"],
        _mux 2 "DECODER.v:1099" ["src1_tos[1:0]"] ["0b00"] ["0b11"] ["TmP_93"],
        _mux 36 "DECODER.v:1114" ["TmP_738[35:0]"] ["0b0000000000000000000000111xxxxxxx1", "op_feld[26:25]", "0b0"] ["0b0000000000000000000001011xxxxxxx1100"] ["TmP_210"],
        _mux 36 "DECODER.v:1119" ["TmP_739[35:0]"] ["0b101100", "op_feld[26:25]", "0b100001000000001110", "stack[5]", "0b110", "s_user", "0b10001"] ["auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b000000000000001110", "stack[5]", "0b110", "s_user", "0b1000", "op_feld[45]"] ["TmP_368"],
        _mux 2 "DECODER.v:1127" ["adrd1[18:17]"] ["op_feld[26:25]"] ["0b10"] ["mpoi_1"],
        _mux 5 "DECODER.v:1139" ["src2_addr[4:0]"] ["op_feld[17:13]"] ["idx_feld[15:11]"] ["exr22[11]"],
        _mux 7 "DECODER.v:1140" ["usp_2[6:0]"] ["0b00110", "src2_addr[1]", "0b0"] ["0b0", "stack[5]", "0b110", "s_user", "0b1"] ["src2_addr[0]"],
        _mux 4 "DECODER.v:1143" ["auop_d[3:0]"] ["0b0010"] ["0b1011"] ["op_feld[42]"],
        _mux 34 "DECODER.v:1148" ["tos_oper[33:0]"] ["0b0", "op_feld[42]", "0b001", "op_feld[42]", "0b0000110", "op_feld[24:23]", "0b00", "src1_tos[1:0]", "0b01110", "stack[5]", "0b110", "s_user", "0b1000", "op_feld[42]"] ["0b00", "op_feld[42]", "0b01", "op_feld[42]", "0b00", "op_feld[24:23]", "0b1000010", "src1_tos[1:0]", "0b01110", "stack[5]", "0b110", "s_user", "0b1000", "op_feld[42]"] ["op_feld[40]"],
        _mux 34 "DECODER.v:1163" ["TmP_740[33:0]"] ["0b00000000000000000000111xxxxxxx1", "op_feld[24:23]", "0b0"] ["0b00000000000000000001011xxxxxxx1100"] ["TmP_213"],
        _mux 34 "DECODER.v:1168" ["TmP_741[33:0]"] ["tos_oper[33:0]"] ["0b0", "op_feld[42]", "auop_d[3:0]", "0b0", "exr22[11]", "op_feld[14:13]", "0b0000000", "src1_tos[1:0]", "0b01110", "stack[5]", "0b110", "s_user", "0b1000", "op_feld[42]"] ["TmP_370"],
        _mux 2 "DECODER.v:1177" ["adrd2[18:17]"] ["op_feld[24:23]"] ["0b10"] ["mpoi_2"],
        _mux 7 "DECODER.v:1189" ["quei1[6:0]"] ["0b0", "op_feld[38:34]", "0b0"] ["0b1xxxxxx"] ["acc1"],
        _mux 1 "DECODER.v:1191" ["qword"] ["TmP_210"] ["TmP_213"] ["TmP_301"],
        _mux 7 "DECODER.v:1192" ["quet1[6:0]"] ["0b0", "op_feld[38:33]"] ["0b0111101"] ["acc1"],
        _mux 8 "DECODER.v:1232" ["phase_ein[7:0]"] ["phase_reg[7:0]"] ["0b00000000"] ["abbruch"],
        _mux 67 "DECODER.v:1239" ["TmP_742[66:0]"] ["0b1000000000000000000000000100", "op_feld[38:33]", "0b0", "op_feld[38:34]", "0b00xxxxxx", "op_feld[10:0]", "0b00", "TmP_317", "0b11", "n_idx[1:0]", "0b0"] ["0b1000000000000000000000000101xxxxxxxxxxxxx1111101", "op_sho[10:0]", "0b00101", "n_idx[1:0]", "0b0"] ["short_op"],
        _mux 67 "DECODER.v:1309" ["TmP_743[66:0]"] ["adrd2[18:17]", "gen_src2[31:15]", "0b0001", "gen_src2[14:11]", "0b1xxxxxx", "gen_src2[10:4]", "0b1111101011010001010000", "gen_src2[3:0]"] ["0b1000000000000000000000011111xxxxxxxxxxxxx11111010110100010100000000"] ["exr22[11]"],
        _mux 67 "DECODER.v:1315" ["TmP_744[66:0]"] ["adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]", "0b0010", "gen_src2[14:11]", "0b1xxxxxx", "gen_src2[10:4]", "0b0xxxxxx", "op_feld[10:0]", "0b0010", "gen_src2[3:0]"] ["0b1000000000000000000000100001xxxxxxxxxxxxx0xxxxxx", "op_feld[10:0]", "0b00100000"] ["exr22[11]"],
        _mux 67 "DECODER.v:1330" ["TmP_745[66:0]"] ["adrd2[18:17]", "gen_src2[31:15]", "0b0001", "gen_src2[14:11]", "0b1xxxxxx", "gen_src2[10:4]", "0b1111100011010001010000", "gen_src2[3:0]"] ["0b1000000000000000000000011111xxxxxxxxxxxxx11111000110100010100000000"] ["exr22[11]"],
        _mux 67 "DECODER.v:1424" ["TmP_746[66:0]"] ["0b100000000000000000000000000xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["0b1001110000110100000001001111xxxxxx0", "stack[5]", "0b110", "s_user", "0b10xxxxxx0110100010100100001"] ["TmP_371"],
        _mux 67 "DECODER.v:1440" ["TmP_747[66:0]"] ["0b1000000000000000000000000000111100xxxxxxx", "new_fp", "0b0110000110100010100000000"] ["0b1001110000110100000001100010000", "reg_nr[2:0]", "0b0", "stack[5]", "0b110", "s_user", "0b10xxxxxx0110100010100100001"] ["save_reg"],
        _mux 67 "DECODER.v:1444" ["TmP_748[66:0]"] ["0b1000000000000000000000000000111100xxxxxxx", "new_fp", "0b0110000110100010100000000"] ["0b1001110000110100011001100010000", "reg_nr[2:0]", "0bxxxxxxx0xxxxxx0110100010100100001"] ["save_reg"],
        _mux 67 "DECODER.v:1449" ["TmP_749[66:0]"] ["pop_fp[18:0]", "ppfp[7:0]", "0bxxxxxxx00110000xxxxxx011010001010000000", "new_fp"] ["0b101011001010000100000110011xxxxxxx0", "stack[5]", "0b110", "s_user", "0b10xxxxxx0110100010100000001"] ["save_reg"],
        _mux 67 "DECODER.v:1453" ["TmP_750[66:0]"] ["pop_fp[18:0]", "ppfp[7:0]", "0b1xxxxxx00110001", "resto[5:0]", "0b011010001010000000", "new_fp"] ["0b1010110010100001011001100111xxxxxxxxxxxxx1", "resto[5:0]", "0b0110100010100000001"] ["save_reg"],
        _mux 67 "DECODER.v:1505" ["TmP_751[66:0]"] ["0b100000000000000000001001011xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["0b1000000000000000000010010100111101xxxxxxx0xxxxxx0110100010100000000"] ["reti_flag"],
        _mux 67 "DECODER.v:1506" ["TmP_752[66:0]"] ["0b101001000000000010001001011011110100111110xxxxxx0110100010100000001"] ["TmP_751[66:0]"] ["CFG[8]"],
        _mux 67 "DECODER.v:1514" ["TmP_753[66:0]"] ["0b1000100000000000000010011101xxxxxx0", "ttstak[5]", "0b110", "PSR[9]", "0b110110100110100010100001110"] ["0b100010000000000000001001110xxxxxxx0", "ttstak[5]", "0b110", "PSR[9]", "0b10xxxxxx0110100010100001110"] ["CFG[8]"],
        _mux 67 "DECODER.v:1514" ["TmP_754[66:0]"] ["TmP_753[66:0]"] ["0b1000000000000000000000000001xxxxxxxxxxxxx10110100110100010100000000"] ["reti_flag"],
        _mux 67 "DECODER.v:1527" ["TmP_755[66:0]"] ["0b100000000000000000001001111xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["0b100000000000000000001001101xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["TmP_372"],
        _mux 67 "DECODER.v:1545" ["TmP_756[66:0]"] ["0b1010010000001xx000010000001xxxxxxx001111011111000110100100100000001"] ["ai_next[30:4]", "0bxxxxxxxxxxxxxx1111100011010010010000", "ai_next[3:0]"] ["abo_int"],
        _mux 67 "DECODER.v:1549" ["TmP_757[66:0]"] ["0b1000000000000000000001110011xxxxxxxxxxxxx11111010110100010100000000"] ["0b1000000000000000000011110011xxxxxxxxxxxxx11111010110100010100000000"] ["CFG[8]"],
        _mux 67 "DECODER.v:1555" ["TmP_758[66:0]"] ["0b101001011000000000010000001011110100111100xxxxxx0110100010100000001"] ["0b1010010000001xx000010000001xxxxxxx00111100xxxxxx0110100010100000001"] ["TmP_373"],
        _mux 67 "DECODER.v:1562" ["TmP_759[66:0]"] ["0b1010010000001xx000010000001xxxxxxx001111010010100110100100100000001"] ["0b10000000000000000001000011", "rrepa[0]", "0bxxxxxxxxxxxxxx10010100110100100100000000"] ["TmP_374"],
        _mux 67 "DECODER.v:1571" ["TmP_760[66:0]"] ["0b100000000000000000010001000xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["0b100000000000000000000000000xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["interrupt"],
        _mux 67 "DECODER.v:1576" ["TmP_761[66:0]"] ["0b100000000000000000000000000xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["0b1000100", "dia_flag", "0b0000000", "dia_flag", "0b00110000000xxxxxxxxxxxxxx0xxxxxx00010001", "op_psr[2]", "psr_code[1]", "op_psr[0]", "0b00000000"] ["PSR[5]"],
        _mux 67 "DECODER.v:1594" ["TmP_762[66:0]"] ["0b1000000100000000010011101010111101xxxxxxx1", "lmrreg[5:0]", "0b0110110101000000000"] ["0b1000000100000000010011101000111101xxxxxxx0xxxxxx0110100010100000000"] ["TmP_375"],
        _mux 67 "DECODER.v:1609" ["TmP_765[66:0]"] ["0b1000100000000000000110000111xxxxxx0", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b100xxxxxx0110100010100100000"] ["0b1000000000000000000110100111xxxxxxxxxxxxx1111111", "TmP_764[10:0]", "0b00000000"] ["mt_flag"],
        _mux 67 "DECODER.v:1621" ["TmP_763[66:0]"] ["0b100000000000000000000000000xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["STRING[1:0]", "0b10100", "st_dest[11]", "STRING[1:0]", "0b0000010001100", "op_feld_reg[1]", "0b0010", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b010", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b01", "TmP_313", "0b1111010110100010100000000"] ["STRING[2]"],
        _mux 67 "DECODER.v:1621" ["TmP_766[66:0]"] ["TmP_763[66:0]"] ["0b1000100", "dia_flag", "0b0000000", "dia_flag", "0b00110000000xxxxxxxxxxxxxx0xxxxxx00010001", "op_psr[2]", "psr_code[1]", "op_psr[0]", "0b00000000"] ["TmP_94"],
        _mux 11 "DECODER.v:1627" ["TmP_764[10:0]"] ["0b01101000101"] ["0b00001110110"] ["op_feld_reg[14]"],
        _mux 67 "DECODER.v:1631" ["TmP_767[66:0]"] ["0b1000100000000000000110010111xxxxxx0", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b1011111110110100010100000000"] ["0b1000000000000000000110001110", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00xxxxxxx1", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00", "op_feld_reg[10:8]", "0b010100", "op_feld_reg[1]", "0b100000000"] ["skps_flag"],
        _mux 67 "DECODER.v:1631" ["TmP_768[66:0]"] ["TmP_767[66:0]"] ["0b1000000000000000000110110111xxxxxxxxxxxxx1111111", "TmP_764[10:0]", "0b00000000"] ["mt_flag"],
        _mux 67 "DECODER.v:1643" ["TmP_769[66:0]"] ["0b1000000000000000000110010000111101xxxxxxx10000010110100010100000000"] ["0b100000000000000000000000000xxxxxxxxxxxxxx0xxxxxx0110100010100000000"] ["kurz_st"],
        _mux 67 "DECODER.v:1643" ["TmP_770[66:0]"] ["TmP_769[66:0]"] ["0b1000000000000000000110001110", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00xxxxxxx1", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00", "op_feld_reg[10:8]", "0b010100", "op_feld_reg[1]", "0b100000000"] ["STRING[3]"],
        _mux 67 "DECODER.v:1650" ["TmP_771[66:0]"] ["0b100000000000000000011010111011111100001000xxxxxx", "op_feld_reg[10:8]", "0b0100000100100000"] ["0b001001010000000000011010100011111100000110xxxxxx0110100010100000001"] ["op_feld_reg[14]"],
        _mux 67 "DECODER.v:1656" ["TmP_772[66:0]"] ["0b0001100", "op_feld_reg[15]", "0b00000001000110001000000010000001011111100110100010100000000"] ["0b100000000000000000011010111011111100001000xxxxxx", "op_feld_reg[10:8]", "0b0100000100100000"] ["op_feld_reg[16]"],
        _mux 67 "DECODER.v:1660" ["TmP_773[66:0]"] ["0b1000000000000000000000000000111101xxxxxxx10000010110100010100000000"] ["0b100010000000000000011000011011111100000100xxxxxx0110100010100100000"] ["TmP_793"],
        _mux 67 "DECODER.v:1665" ["TmP_774[66:0]"] ["0b100000000000000000011011111011111100001000xxxxxx", "op_feld_reg[10:8]", "0b0100000100100000"] ["0b001001010000000000011011100011111100000110xxxxxx0110100010100000001"] ["op_feld_reg[14]"],
        _mux 67 "DECODER.v:1673" ["TmP_776[66:0]"] ["TmP_775[66:0]"] ["0b100000000000000000011011111011111100001000xxxxxx", "op_feld_reg[10:8]", "0b0100000100100000"] ["op_feld_reg[16]"],
        _mux 67 "DECODER.v:1678" ["TmP_775[66:0]"] ["STRING[1:0]", "0b10100", "op_feld_reg[15]", "STRING[1:0]", "0b000001000110011000000010000001011111100110100010100000000"] ["0b1000000000000000000110001110000000xxxxxxx1000000", "op_feld_reg[10:8]", "0b010100", "op_feld_reg[1]", "0b100000000"] ["skps_flag"],
        _mux 67 "DECODER.v:1679" ["TmP_777[66:0]"] ["0b1000000000000000000000000000111101xxxxxxx10000010110100010100000000"] ["TmP_775[66:0]"] ["TmP_793"],
        _mux 6 "DECODER.v:1715" ["WRADR[5:0]"] ["wradr_i[5:0]"] ["TmP_319", "0b110", "s_user", "0b1"] ["spupd"],
        _mux 2 "DECODER.v:1717" ["START[1:0]"] ["0b00"] ["start_i[1:0]"] ["no_trap"],
        _mux 11 "DECODER.v:1718" ["OPER[10:0]"] ["oper_i[10:0]"] ["0b01101001001"] ["spupd"],
        _mux 2 "DECODER.v:1723" ["TmP_70[1:0]"] ["0b00"] ["new_op[7:6]"] ["next"],
        _mux 2 "DECODER.v:1724" ["TmP_37[1:0]"] ["0b00"] ["new_op[5:4]"] ["next"],
        _mux 1 "DECODER.v:1745" ["TmP_778"] ["TmP_218"] ["TmP_217"] ["m_usel"],
        _mux 1 "DECODER.v:339" ["TmP_779"] ["TmP_104"] ["op_ok"] ["PHASE_0"],
        _mux 1 "DECODER.v:346" ["TmP_40"] ["long_reg"] ["new_op[7]"] ["next"],
        _mux 1 "DECODER.v:398" ["TmP_780"] ["TmP_108"] ["TmP_333"] ["PHASE_0"],
        _mux 4 "DECODER.v:429" ["misc_vectors[3:0]"] ["TmP_400", "TmP_399", "UNDEF", "svc_flag"] ["0b1001"] ["trac_flag"],
        _mux 4 "DECODER.v:434" ["TmP_781[3:0]"] ["0b1110"] ["ovf_flag", "TmP_402", "TmP_331", "TmP_401"] ["abbruch2"],
        _mux 4 "DECODER.v:435" ["TmP_782[3:0]"] ["misc_vectors[3:0]"] ["0b000", "nmi_flag"] ["interrupt"],
        _mux 4 "DECODER.v:435" ["TmP_783[3:0]"] ["TmP_782[3:0]"] ["TmP_781[3:0]"] ["abbruch"],
        _mux 31 "DECODER.v:451" ["ai_next[30:0]"] ["0b0010010000011000010100000100001"] ["0b1000100000000000000100001000000"] ["TmP_228"],
        _mux 19 "DECODER.v:547" ["pop_fp[18:0]"] ["0b1000000000000000000"] ["0b1010110010100001000"] ["new_fp"],
        _mux 8 "DECODER.v:548" ["ppfp[7:0]"] ["0b00000000"] ["0b00110100"] ["new_fp"],
        _mux 7 "DECODER.v:582" ["no_modul[6:0]"] ["0b1011111"] ["0b0xxxxxx"] ["CFG[8]"],
        _mux 1 "DECODER.v:637" ["TmP_21"] ["TmP_108"] ["new_op[3]"] ["next"],
        _mux 1 "DECODER.v:643" ["TmP_19"] ["TmP_145"] ["new_op[0]"] ["next"],
        _mux 1 "DECODER.v:654" ["disp_ok"] ["0b1"] ["di_stat[0]"] ["ld_disp"],
        _mux 32 "DECODER.v:692" ["TmP_784[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxx", "OPREG[7:0]"] ["0b0000000000000000000000001111", "OPREG[2:0]", "setcfg_lsb"] ["op_setcfg"],
        _mux 32 "DECODER.v:695" ["TmP_785[31:0]"] ["OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10]", "OPREG[10:7]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxx", "opti_byte[7:0]"] ["opt_imme"],
        _mux 32 "DECODER.v:698" ["IMME_Q[31:0]"] ["imme_i[31:0]"] ["PC_SAVE[31:0]"] ["store_pc"],
        _mux 1 "DECODER.v:708" ["do_xor"] ["TmP_72"] ["upd_info"] ["TRAPS[0]"],
        _mux 2 "DECODER.v:741" ["hzl_a[1:0]"] ["OPREG[1:0]"] ["0b10"] ["TmP_266"],
        _mux 6 "DECODER.v:751" ["TmP_786[5:0]"] ["0b011100"] ["0b111101"] ["OPREG[6]"],
        _mux 48 "DECODER.v:778" ["TmP_787[47:0]"] ["0b001100010000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "0b00", "OPREG[15:6]", "0b100", "OPREG[1:0]", "0b0100", "OPREG[5:2]"] ["0b001001010000", "OPREG[13:11]", "0b000", "OPREG[8:6]", "hzl_a[1:0]", "0bxx", "OPREG[15:6]", "0b000", "OPREG[1:0]", "0b0100", "OPREG[5:2]"] ["TmP_269"],
        _mux 11 "DECODER.v:795" ["op_sho[10:0]"] ["0b01101000101"] ["0b00001111010"] ["TmP_270"],
        _mux 8 "DECODER.v:801" ["goacb[7:0]"] ["0b00000000"] ["0b00101000"] ["acb_flag"],
        _mux 8 "DECODER.v:822" ["TmP_788[7:0]"] ["0b00000000"] ["wait_reg[7:0]"] ["wait_reg[8]"],
        _mux 8 "DECODER.v:822" ["endea[7:0]"] ["TmP_788[7:0]"] ["0b00000001"] ["acb_reg"],
        _mux 4 "DECODER.v:823" ["diacb[3:0]"] ["0b0000"] ["0b1110"] ["acb_reg"],
        _mux 2 "DECODER.v:836" ["TmP_789[1:0]"] ["OPREG[18:17]"] ["OPREG[23:22]"] ["TmP_274"],
        _mux 2 "DECODER.v:836" ["TmP_790[1:0]"] ["OPREG[10:9]"] ["TmP_789[1:0]"] ["OPREG[3]"],
        _mux 1 "DECODER.v:859" ["hdx_a"] ["OPREG[10]"] ["OPREG[8]"] ["OPREG[7]"],
        _mux 2 "DECODER.v:866" ["hdl_b[1:0]"] ["OPREG[9:8]"] ["0b10"] ["TmP_278"],
        _mux 2 "DECODER.v:870" ["hdl_f[1:0]"] ["OPREG[8]", "TmP_361"] ["OPREG[9:8]"] ["TmP_279"],
        _mux 6 "DECODER.v:876" ["hdr_c[5:0]"] ["0b10", "OPREG[21:19]", "0b1"] ["0b10", "OPREG[21:20]", "0b0", "OPREG[19]"] ["hdx_a"],
        _mux 6 "DECODER.v:877" ["hdr_d[5:0]"] ["0b10", "OPREG[16:14]", "0b1"] ["0b10", "OPREG[16:15]", "0b0", "OPREG[14]"] ["hdx_a"],
        _mux 6 "DECODER.v:878" ["hdr_e[5:0]"] ["0b10", "OPREG[21:19]", "0b1"] ["0b10", "OPREG[21:20]", "0b0", "OPREG[19]"] ["OPREG[11]"],
        _mux 6 "DECODER.v:879" ["hdr_f[5:0]"] ["0b10", "OPREG[16:15]", "0b0", "OPREG[14]"] ["0b10", "OPREG[16:14]", "0b1"] ["OPREG[11]"],
        _mux 48 "DECODER.v:932" ["TmP_791[47:0]"] ["0b001100011000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b00", "OPREG[23:14]", "0b100", "OPREG[9:8]", "0b0110", "OPREG[13:10]"] ["0b001001011000", "OPREG[21:19]", "0b000", "OPREG[16:14]", "hdl_b[1:0]", "0b10", "OPREG[23:14]", "0b000", "OPREG[9:8]", "0b0110", "OPREG[13:10]"] ["TmP_279"],
        _mux 48 "DECODER.v:951" ["opc_bits[47:0]"] ["op2_feld[47:0]"] ["op3_feld[47:0]"] ["op_3byte"],
        _mux 2 "DECODER.v:978" ["TmP_792[1:0]"] ["opc_bits[12:11]"] ["0b01"] ["TmP_430"],
        _mux 2 "DECODER.v:978" ["otype[1:0]"] ["TmP_792[1:0]"] ["0b11"] ["exception"],
        _mux 8 "DECODER.v:997" ["opti_byte[7:0]"] ["OPREG[23:16]"] ["OPREG[31:24]"] ["TmP_289"],
        _xor 1 "DECODER.v:1675" ["TmP_793"] ["STRING[3]"] ["op_feld_reg[17]"] ,
        _xor 2 "DECODER.v:713" ["TmP_794[1:0]"] ["stack_sel[1:0]"] ["s_mod[1:0]"] ,
        _xor 1 "DECODER.v:717" ["ttstak[5]"] ["TmP_265"] ["TmP_735"] ,
        _xor 1 "DECODER.v:745" ["hzr_s[5]"] ["TmP_267"] ["stack[5]"] ,
        _xor 1 "DECODER.v:870" ["TmP_795"] ["OPREG[9]"] ["OPREG[8]"] ,
        _add 3 "DECODER.v:357" ["TmP_78[2:0]"] ["0b0", "TmP_330", "TmP_389"] ["0b00", "opt_imme"] ,
        _add 2 "DECODER.v:973" ["idx_n[1:0]"] ["0b0", "exr12[11]"] ["0b0", "exr22[11]"] ,
        _and 1 "DECODER.v:1011" ["TmP_48"] ["TmP_194"] ["TmP_299"] ,
        _and 1 "DECODER.v:1017" ["TmP_79"] ["OPREG[13]"] ["TmP_195"] ,
        _and 1 "DECODER.v:1018" ["TmP_80"] ["cinv_flag"] ["TmP_311"] ,
        _and 1 "DECODER.v:1020" ["TmP_81"] ["cinv_flag"] ["STOP_IC"] ,
        _and 1 "DECODER.v:1025" ["TmP_82"] ["TmP_310"] ["TmP_196"] ,
        _and 1 "DECODER.v:1025" ["TmP_83"] ["TmP_82"] ["TmP_197"] ,
        _and 1 "DECODER.v:1026" ["TmP_84"] ["m_ussu"] ["TmP_311"] ,
        _and 1 "DECODER.v:1033" ["TmP_85"] ["TmP_198"] ["TmP_195"] ,
        _and 1 "DECODER.v:1034" ["TmP_86"] ["rwval_flag"] ["TmP_311"] ,
        _and 1 "DECODER.v:1040" ["TmP_87"] ["TmP_312"] ["op_feld_reg[1]"] ,
        _and 1 "DECODER.v:1040" ["rw_bit"] ["TmP_199"] ["TmP_366"] ,
        _and 1 "DECODER.v:1041" ["op_ilo"] ["rw_bit"] ["op_feld_reg[0]"] ,
        _and 1 "DECODER.v:1048" ["st_dest[11]"] ["op_feld_reg[15]"] ["TmP_313"] ,
        _and 1 "DECODER.v:1054" ["TmP_88"] ["TmP_314"] ["TmP_300"] ,
        _and 1 "DECODER.v:1055" ["ph_match"] ["TmP_201"] ["TmP_202"] ,
        _and 1 "DECODER.v:1061" ["TmP_89"] ["kurz_st"] ["TmP_315"] ,
        _and 1 "DECODER.v:1062" ["TmP_90"] ["TmP_314"] ["TmP_204"] ,
        _and 1 "DECODER.v:1063" ["TmP_91"] ["TmP_314"] ["TmP_196"] ,
        _and 1 "DECODER.v:1064" ["TmP_92"] ["TmP_314"] ["TmP_367"] ,
        _and 1 "DECODER.v:1099" ["TmP_93"] ["TmP_209"] ["TmP_316"] ,
        _and 1 "DECODER.v:1137" ["rmw"] ["op_feld[40]"] ["op_feld[39]"] ,
        _and 1 "DECODER.v:1617" ["TmP_94"] ["interrupt"] ["TmP_313"] ,
        _and 1 "DECODER.v:1716" ["WREN"] ["TmP_380"] ["no_trap"] ,
        _and 1 "DECODER.v:1720" ["TmP_1"] ["next"] ["TmP_382"] ,
        _and 1 "DECODER.v:1721" ["TmP_3"] ["next"] ["new_op[62]"] ,
        _and 1 "DECODER.v:1725" ["TmP_95"] ["next"] ["new_op[25]"] ,
        _and 1 "DECODER.v:1725" ["TmP_75"] ["TmP_95"] ["TmP_320"] ,
        _and 1 "DECODER.v:1727" ["LD_OUT[1]"] ["ldoreg[1]"] ["no_trap"] ,
        _and 1 "DECODER.v:1729" ["TmP_96"] ["spupd_i"] ["TmP_321"] ,
        _and 1 "DECODER.v:1729" ["TmP_97"] ["TmP_96"] ["TmP_322"] ,
        _and 1 "DECODER.v:1729" ["spupd"] ["TmP_97"] ["TmP_323"] ,
        _and 1 "DECODER.v:1736" ["TmP_98"] ["new_op[25]"] ["new_op[7]"] ,
        _and 1 "DECODER.v:1739" ["TmP_66"] ["DONE"] ["WR_REG"] ,
        _and 1 "DECODER.v:1745" ["TmP_99"] ["m_ussu"] ["TmP_778"] ,
        _and 1 "DECODER.v:1746" ["TmP_100"] ["dc_user"] ["TmP_324"] ,
        _and 1 "DECODER.v:1748" ["TmP_15"] ["op_ilo"] ["TmP_219"] ,
        _and 1 "DECODER.v:1749" ["TmP_5"] ["op_ilo"] ["TmP_385"] ,
        _and 1 "DECODER.v:1751" ["RWVAL[1]"] ["rwval_flag"] ["TmP_220"] ,
        _and 1 "DECODER.v:1757" ["TmP_101"] ["TmP_219"] ["rw_bit"] ,
        _and 1 "DECODER.v:1758" ["INFO_AU[2]"] ["a_ivar"] ["TmP_325"] ,
        _and 1 "DECODER.v:337" ["TmP_102"] ["TmP_387"] ["TmP_388"] ,
        _and 1 "DECODER.v:339" ["TmP_103"] ["long_reg"] ["TmP_328"] ,
        _and 1 "DECODER.v:339" ["TmP_104"] ["TmP_102"] ["TmP_329"] ,
        _and 1 "DECODER.v:366" ["TmP_105"] ["PHASE_0"] ["TmP_331"] ,
        _and 1 "DECODER.v:366" ["NEXT_PCA"] ["TmP_105"] ["TmP_332"] ,
        _and 1 "DECODER.v:370" ["TmP_49"] ["PHASE_0"] ["TmP_333"] ,
        _and 1 "DECODER.v:371" ["t2p"] ["PHASE_0"] ["TmP_334"] ,
        _and 1 "DECODER.v:384" ["TmP_106"] ["nmi_flag"] ["TmP_335"] ,
        _and 1 "DECODER.v:386" ["TmP_33"] ["PSR[11]"] ["TmP_336"] ,
        _and 1 "DECODER.v:388" ["TmP_107"] ["TmP_390"] ["PHASE_0"] ,
        _and 1 "DECODER.v:388" ["stop"] ["TmP_107"] ["TmP_337"] ,
        _and 1 "DECODER.v:389" ["interrupt"] ["TmP_390"] ["TmP_391"] ,
        _and 1 "DECODER.v:398" ["iabo_fall"] ["IC_ABORT"] ["TmP_780"] ,
        _and 1 "DECODER.v:400" ["TmP_29"] ["iabo_fall"] ["TmP_339"] ,
        _and 1 "DECODER.v:404" ["TmP_109"] ["mmu_sel"] ["TmP_340"] ,
        _and 1 "DECODER.v:410" ["string_ende"] ["TmP_224"] ["TmP_202"] ,
        _and 1 "DECODER.v:414" ["svc_flag"] ["TmP_225"] ["valid[0]"] ,
        _and 1 "DECODER.v:415" ["bpt_flag"] ["TmP_226"] ["valid[0]"] ,
        _and 1 "DECODER.v:416" ["flag_flag"] ["TmP_227"] ["PSR[5]"] ,
        _and 1 "DECODER.v:417" ["trac_flag"] ["t2p"] ["PSR[10]"] ,
        _and 1 "DECODER.v:418" ["TmP_110"] ["ovf_pipe[3]"] ["PSR[5]"] ,
        _and 1 "DECODER.v:418" ["TmP_111"] ["ovf_pipe[1]"] ["TRAPS[2]"] ,
        _and 1 "DECODER.v:419" ["TmP_112"] ["dbg_s"] ["PHASE_0"] ,
        _and 1 "DECODER.v:444" ["TmP_113"] ["interrupt"] ["TmP_341"] ,
        _and 1 "DECODER.v:454" ["TmP_114"] ["TmP_341"] ["TmP_331"] ,
        _and 1 "DECODER.v:454" ["no_trap"] ["TmP_114"] ["TmP_332"] ,
        _and 1 "DECODER.v:461" ["TmP_115"] ["ovf2_op"] ["op_ok"] ,
        _and 1 "DECODER.v:461" ["TmP_116"] ["ovf_op"] ["op_ok"] ,
        _and 1 "DECODER.v:464" ["TmP_117"] ["TmP_405"] ["TmP_302"] ,
        _and 1 "DECODER.v:465" ["TmP_118"] ["TmP_232"] ["OPREG[13]"] ,
        _and 1 "DECODER.v:465" ["TmP_119"] ["TmP_118"] ["TmP_233"] ,
        _and 1 "DECODER.v:466" ["TmP_120"] ["TmP_234"] ["TmP_342"] ,
        _and 1 "DECODER.v:468" ["TmP_121"] ["TmP_235"] ["TmP_302"] ,
        _and 1 "DECODER.v:469" ["TmP_122"] ["TmP_236"] ["TmP_232"] ,
        _and 1 "DECODER.v:470" ["TmP_123"] ["OPREG[13]"] ["TmP_237"] ,
        _and 1 "DECODER.v:470" ["TmP_124"] ["TmP_123"] ["TmP_238"] ,
        _and 1 "DECODER.v:476" ["TmP_125"] ["TmP_239"] ["TmP_240"] ,
        _and 1 "DECODER.v:476" ["TmP_126"] ["dbg_s"] ["TmP_343"] ,
        _and 1 "DECODER.v:480" ["TmP_127"] ["dbg_en"] ["TRAPS[3]"] ,
        _and 1 "DECODER.v:480" ["TmP_128"] ["TmP_127"] ["PHASE_0"] ,
        _and 1 "DECODER.v:480" ["pc_match"] ["TmP_128"] ["TmP_344"] ,
        _and 1 "DECODER.v:482" ["TmP_129"] ["addr_cmp"] ["PHASE_0"] ,
        _and 1 "DECODER.v:482" ["TmP_14"] ["TmP_408"] ["TRAPS[5]"] ,
        _and 1 "DECODER.v:484" ["TmP_130"] ["addr_cmp"] ["TmP_315"] ,
        _and 1 "DECODER.v:491" ["TmP_131"] ["TmP_412"] ["TmP_345"] ,
        _and 1 "DECODER.v:497" ["TmP_132"] ["set_src"] ["TmP_313"] ,
        _and 1 "DECODER.v:497" ["TmP_133"] ["ssrc_flag"] ["TmP_346"] ,
        _and 1 "DECODER.v:501" ["TmP_134"] ["set_dest"] ["TmP_313"] ,
        _and 1 "DECODER.v:501" ["TmP_135"] ["sdest_flag"] ["TmP_346"] ,
        _and 1 "DECODER.v:539" ["op_1byte"] ["op1_feld[18]"] ["valid[0]"] ,
        _and 1 "DECODER.v:540" ["op_12byte"] ["op1_feld[19]"] ["valid[1]"] ,
        _and 1 "DECODER.v:560" ["TmP_17"] ["dia_op"] ["GENSTAT[2]"] ,
        _and 1 "DECODER.v:563" ["TmP_136"] ["valid[0]"] ["TmP_251"] ,
        _and 1 "DECODER.v:569" ["TmP_137"] ["ex_br_op[0]"] ["branch"] ,
        _and 1 "DECODER.v:569" ["TmP_138"] ["acb_reg"] ["TmP_347"] ,
        _and 1 "DECODER.v:573" ["TmP_139"] ["TmP_257"] ["reti_flag"] ,
        _and 1 "DECODER.v:578" ["TmP_140"] ["TmP_252"] ["jump"] ,
        _and 1 "DECODER.v:578" ["TmP_141"] ["TmP_140"] ["di_stat[0]"] ,
        _and 1 "DECODER.v:579" ["TmP_142"] ["TmP_261"] ["di_stat[0]"] ,
        _and 1 "DECODER.v:590" ["rett_exc"] ["TmP_348"] ["TmP_262"] ,
        _and 1 "DECODER.v:610" ["TmP_143"] ["TmP_352"] ["TmP_350"] ,
        _and 1 "DECODER.v:612" ["TmP_144"] ["TmP_353"] ["TmP_350"] ,
        _and 1 "DECODER.v:637" ["TmP_108"] ["TmP_338"] ["dim_feld[3]"] ,
        _and 1 "DECODER.v:643" ["TmP_145"] ["TmP_356"] ["dim_feld[0]"] ,
        _and 1 "DECODER.v:646" ["TmP_147"] ["TmP_146"] ["TmP_264"] ,
        _and 1 "DECODER.v:646" ["TmP_56"] ["TmP_147"] ["TmP_357"] ,
        _and 1 "DECODER.v:648" ["TmP_148"] ["dim_feld[3]"] ["TmP_303"] ,
        _and 1 "DECODER.v:649" ["TmP_149"] ["di_stat[0]"] ["dim_feld[3]"] ,
        _and 1 "DECODER.v:649" ["TmP_150"] ["TmP_149"] ["TmP_303"] ,
        _and 1 "DECODER.v:650" ["TmP_146"] ["ACC_DONE"] ["dim_feld[0]"] ,
        _and 1 "DECODER.v:704" ["TmP_151"] ["new_spsel"] ["TmP_315"] ,
        _and 1 "DECODER.v:704" ["TmP_152"] ["TmP_151"] ["TmP_341"] ,
        _and 1 "DECODER.v:704" ["TmP_153"] ["TmP_152"] ["TmP_358"] ,
        _and 1 "DECODER.v:708" ["TmP_72"] ["PHASE_0"] ["new_spsel"] ,
        _and 1 "DECODER.v:739" ["valid_size"] ["TmP_302"] ["valid[1]"] ,
        _and 1 "DECODER.v:756" ["setcfg"] ["TmP_268"] ["valid[1]"] ,
        _and 1 "DECODER.v:789" ["op_2byte"] ["TmP_427"] ["TmP_359"] ,
        _and 1 "DECODER.v:792" ["TmP_154"] ["TmP_428"] ["TmP_271"] ,
        _and 1 "DECODER.v:792" ["TmP_155"] ["TmP_154"] ["valid_size"] ,
        _and 1 "DECODER.v:792" ["short_op"] ["TmP_429"] ["PHASE_0"] ,
        _and 1 "DECODER.v:798" ["acb_op"] ["TmP_235"] ["valid_size"] ,
        _and 1 "DECODER.v:828" ["TmP_156"] ["dw_info"] ["TmP_311"] ,
        _and 1 "DECODER.v:837" ["TmP_157"] ["TmP_342"] ["TmP_276"] ,
        _and 1 "DECODER.v:837" ["TmP_158"] ["TmP_157"] ["valid[2]"] ,
        _and 1 "DECODER.v:839" ["TmP_159"] ["TmP_277"] ["TmP_238"] ,
        _and 1 "DECODER.v:839" ["TmP_160"] ["TmP_159"] ["valid[2]"] ,
        _and 1 "DECODER.v:946" ["TmP_161"] ["valid[2]"] ["TmP_280"] ,
        _and 1 "DECODER.v:946" ["op_3byte"] ["TmP_161"] ["TmP_304"] ,
        _and 1 "DECODER.v:953" ["op_ok"] ["TmP_433"] ["TmP_362"] ,
        _and 1 "DECODER.v:972" ["wlor"] ["op_feld[39]"] ["TmP_363"] ,
        _and 1 "DECODER.v:988" ["TmP_162"] ["valid[2]"] ["TmP_281"] ,
        _and 1 "DECODER.v:988" ["TmP_163"] ["TmP_162"] ["TmP_282"] ,
        _and 1 "DECODER.v:990" ["TmP_164"] ["TmP_307"] ["TmP_435"] ,
        _and 1 "DECODER.v:991" ["TmP_165"] ["TmP_285"] ["TmP_286"] ,
        _and 1 "DECODER.v:991" ["TmP_166"] ["TmP_165"] ["TmP_308"] ,
        _and 1 "DECODER.v:991" ["TmP_167"] ["TmP_163"] ["TmP_436"] ,
        _and 1 "DECODER.v:993" ["TmP_168"] ["ANZ_VAL[2]"] ["TmP_309"] ,
        _and 1 "DECODER.v:993" ["TmP_169"] ["TmP_168"] ["TmP_287"] ,
        _and 1 "DECODER.v:994" ["TmP_170"] ["TmP_232"] ["TmP_310"] ,
        _and 1 "DECODER.v:994" ["TmP_171"] ["TmP_170"] ["TmP_365"] ,
        _and 1 "DECODER.v:995" ["TmP_172"] ["TmP_238"] ["TmP_288"] ,
        _and 1 "DECODER.v:995" ["TmP_173"] ["TmP_172"] ["hdl_g[0]"] ,
        _and 1 "DECODER.v:995" ["TmP_174"] ["TmP_169"] ["TmP_437"] ,
        _logic_reduce_or 2 "" ["TmP_175"] ["TmP_713", "TmP_714"],
        _logic_reduce_or 2 "" ["TmP_176"] ["TmP_716", "TmP_718"],
        _logic_reduce_or 2 "" ["TmP_177"] ["TmP_690", "TmP_687"],
        _logic_reduce_or 2 "" ["TmP_178"] ["TmP_691", "TmP_688"],
        _logic_reduce_or 2 "" ["TmP_179"] ["TmP_689", "TmP_692"],
        _logic_reduce_or 4 "" ["TmP_180"] ["TmP_648", "TmP_649", "TmP_650", "TmP_652"],
        _logic_reduce_or 2 "" ["TmP_181"] ["TmP_653", "TmP_651"],
        _logic_reduce_or 2 "" ["TmP_182"] ["TmP_602", "TmP_625"],
        _logic_reduce_or 2 "" ["TmP_183"] ["TmP_622", "TmP_623"],
        _logic_reduce_or 2 "" ["TmP_184"] ["TmP_629", "TmP_628"],
        _logic_reduce_or 3 "" ["TmP_185"] ["TmP_632", "TmP_634", "TmP_631"],
        _logic_reduce_or 2 "" ["TmP_186"] ["TmP_636", "TmP_637"],
        _logic_reduce_or 2 "" ["TmP_187"] ["TmP_645", "TmP_646"],
        _logic_reduce_or 3 "" ["TmP_188"] ["TmP_487", "TmP_517", "TmP_483"],
        _logic_reduce_or 3 "" ["TmP_189"] ["TmP_542", "TmP_567", "TmP_570"],
        _logic_reduce_or 3 "" ["TmP_190"] ["TmP_543", "TmP_568", "TmP_571"],
        _logic_reduce_or 2 "" ["TmP_191"] ["TmP_610", "TmP_611"],
        _eq 8 "DECODER.v:1006" ["TmP_192"] ["phase_reg[7:0]"] ["0b01110100"] ,
        _eq 8 "DECODER.v:1006" ["TmP_193"] ["phase_reg[7:0]"] ["0b01110101"] ,
        _logic_not 2 "DECODER.v:1011" ["TmP_194"] ["lmrreg[5:4]"],
        _eq 8 "DECODER.v:1025" ["TmP_197"] ["OPREG[7:0]"] ["0b10101110"] ,
        _logic_not 3 "DECODER.v:1033" ["TmP_198"] ["OPREG[13:11]"],
        _eq 8 "DECODER.v:1033" ["TmP_195"] ["OPREG[7:0]"] ["0b00011110"] ,
        _eq 4 "DECODER.v:1040" ["TmP_199"] ["op_feld_reg[7:4]"] ["0b0110"] ,
        _eq 4 "DECODER.v:1040" ["TmP_200"] ["op_feld_reg[3:0]"] ["0b1110"] ,
        _eq 4 "DECODER.v:1055" ["TmP_201"] ["phase_reg[7:4]"] ["0b1101"] ,
        _eq 3 "DECODER.v:1055" ["TmP_202"] ["phase_reg[2:0]"] ["0b111"] ,
        _eq 8 "DECODER.v:1061" ["TmP_203"] ["phase_reg[7:0]"] ["0b01100101"] ,
        _eq 2 "DECODER.v:1062" ["TmP_204"] ["OPREG[11:10]"] ["0b01"] ,
        _eq 2 "DECODER.v:1063" ["TmP_196"] ["OPREG[11:10]"] ["0b11"] ,
        _eq 8 "DECODER.v:1075" ["TmP_205"] ["phase_reg[7:0]"] ["0b00000010"] ,
        _eq 8 "DECODER.v:1075" ["TmP_206"] ["phase_reg[7:0]"] ["0b01010000"] ,
        _eq 3 "DECODER.v:1091" ["exr12[11]"] ["op_feld[22:20]"] ["0b111"] ,
        _eq 5 "DECODER.v:1099" ["TmP_209"] ["op_feld[22:18]"] ["0b10111"] ,
        _eq 3 "DECODER.v:1138" ["exr22[11]"] ["op_feld[17:15]"] ["0b111"] ,
        _eq 2 "DECODER.v:1191" ["TmP_213"] ["op_feld[24:23]"] ["0b11"] ,
        _eq 2 "DECODER.v:1191" ["TmP_210"] ["op_feld[26:25]"] ["0b11"] ,
        _eq 8 "DECODER.v:1711" ["TmP_30"] ["phase_reg[7:0]"] ["0b01100000"] ,
        _eq 8 "DECODER.v:1714" ["TmP_214"] ["oper_i[7:0]"] ["0b10000011"] ,
        _eq 8 "DECODER.v:1741" ["TmP_215"] ["phase_reg[7:0]"] ["0b10000100"] ,
        _eq 8 "DECODER.v:1741" ["TmP_216"] ["phase_reg[7:0]"] ["0b10000101"] ,
        _eq 8 "DECODER.v:1745" ["TmP_217"] ["phase_reg[7:0]"] ["0b00000111"] ,
        _eq 8 "DECODER.v:1749" ["TmP_218"] ["phase_reg[7:0]"] ["0b00100111"] ,
        _eq 8 "DECODER.v:1751" ["TmP_220"] ["phase_reg[7:0]"] ["0b01010011"] ,
        _eq 8 "DECODER.v:1757" ["TmP_221"] ["phase_reg[7:0]"] ["0b00010111"] ,
        _eq 8 "DECODER.v:1757" ["TmP_222"] ["phase_reg[7:0]"] ["0b01011000"] ,
        _eq 8 "DECODER.v:1757" ["TmP_219"] ["phase_reg[7:0]"] ["0b01011001"] ,
        _eq 2 "DECODER.v:1758" ["INFO_AU[4]"] ["op_feld_reg[40:39]"] ["0b11"] ,
        _eq 8 "DECODER.v:1760" ["RESTART"] ["phase_reg[7:0]"] ["0b01001101"] ,
        _eq 8 "DECODER.v:1763" ["GENSTAT[2]"] ["phase_reg[7:0]"] ["0b10001000"] ,
        _eq 8 "DECODER.v:1764" ["GENSTAT[1]"] ["phase_reg[7:0]"] ["0b10000010"] ,
        _eq 8 "DECODER.v:1765" ["GENSTAT[0]"] ["phase_reg[7:0]"] ["0b01000101"] ,
        _logic_not 8 "DECODER.v:364" ["PHASE_0"] ["phase_reg[7:0]"],
        _eq 2 "DECODER.v:384" ["TmP_223"] ["nmi_reg[1:0]"] ["0b10"] ,
        _eq 4 "DECODER.v:410" ["TmP_224"] ["phase_reg[7:4]"] ["0b1100"] ,
        _eq 8 "DECODER.v:414" ["TmP_225"] ["OPREG[7:0]"] ["0b11100010"] ,
        _eq 8 "DECODER.v:415" ["TmP_226"] ["OPREG[7:0]"] ["0b11110010"] ,
        _eq 8 "DECODER.v:416" ["TmP_227"] ["phase_reg[7:0]"] ["0b10001001"] ,
        _logic_not 3 "DECODER.v:450" ["TmP_229"] ["exc_vector[3:1]"],
        GRUPPE_2 [("instance", "reste_ops"), ("src", "DECODER.v:1769")] [
                ("ACCA[3:0]",["acc1", "0b0", "acc2", "0b0"]),
                ("ADRD1[18:0]",["adrd1[18:17]", "gen_src1[35:19]"]),
                ("ADRD2[18:0]",["adrd2[18:17]", "gen_src2[31:15]"]),
                ("BCLK",["BCLK"]),
                ("EXR12[18:0]",["op_feld[26:25]", "auop_s[3:0]", "0b0", "exr12[11]", "op_feld[19:18]", "0b000000000"]),
                ("EXR22[18:0]",["op_feld[24:23]", "op_feld[42]", "0b01", "op_feld[42]", "0b0", "exr22[11]", "op_feld[14:13]", "0b000000000"]),
                ("IRRW1[6:0]",["0b0000", "idx_feld[2:0]"]),
                ("IRRW2[6:0]",["0b0000", "idx_feld[10:8]"]),
                ("NXRD1[3:0]",["gen_src1[3:0]"]),
                ("NXRW2[3:0]",["gen_src2[3:0]"]),
                ("OPERA[10:0]",["op_feld[10:0]"]),
                ("OPREG[18:0]",["OPREG[18:0]"]),
                ("PHASE[3:0]",["phase_ein[3:0]"]),
                ("PHASE_0",["PHASE_0"]),
                ("PHRD1[3:0]",["gen_src1[14:11]"]),
                ("PHRD2[3:0]",["gen_src2[14:11]"]),
                ("REGA1[6:0]",["gen_src1[10:4]"]),
                ("REGA2[6:0]",["gen_src2[10:4]"]),
                ("SRC_1[6:0]",["0b0", "op_feld[38:33]"]),
                ("SRC_2[6:0]",["0b0", "op_feld[32:27]"]),
                ("STATE_0[66:0]",["state_0[66:0]"]),
                ("STATE_GROUP_50[66:0]",["state_group_50[66:0]"]),
                ("STATE_GROUP_60[66:0]",["state_group_60[66:0]"])],
        REG_LIST [("instance", "scanner"), ("src", "DECODER.v:627")] [
                ("DIN[7:0]",["op_feld_reg[22:15]"]),
                ("INIT",["init_rlist"]),
                ("IPOS[2:0]",["rpointer[2:0]"]),
                ("OPOS[2:0]",["reg_nr[2:0]"]),
                ("VALID",["save_reg"])],
        _buf 13 "DECODER.v:82" ["DETOIP[12:0]"] ["pc_match", "cmps_flag", "ph_match", "op_feld_reg[17]", "kill_opt", "inss_op", "exin_cmd", "extract", "bit_reg", "kurz_st", "dw_info", "acb_reg", "t2p"],
        _buf 32 "DECODER.v:67" ["DISP_BR[31:0]"] ["disp_val[31:0]"],
        _buf 5 "" ["INFO_AU[6:5]", "INFO_AU[3]", "INFO_AU[1:0]"] ["no_trap", "chk_rmw", "RWVAL[1]", "dc_user", "disp_ok"],
        _buf 1 "" ["LD_OUT[0]"] ["ldoreg[0]"],
        _buf 1 "" ["MMU_UPDATE[0]"] ["mmu_sel"],
        _buf 8 "DECODER.v:90" ["PHOUT[7:0]"] ["phase_reg[7:0]"],
        _buf 8 "DECODER.v:72" ["RDAA[7:0]"] ["next", "new_op[39:33]"],
        _buf 8 "DECODER.v:72" ["RDAB[7:0]"] ["next", "new_op[32:26]"],
        _buf 2 "" ["RWVAL[2]", "RWVAL[0]"] ["dc_ilo", "wrval_flag"],
        _buf 1 "" ["WMASKE[0]"] ["wmaske_i[0]"],
        _buf 17 "" ["adrd1[16:0]"] ["gen_src1[35:19]"],
        _buf 17 "" ["adrd2[16:0]"] ["gen_src2[31:15]"],
        _buf 19 "DECODER.v:214" ["adwr2[18:0]"] ["adrd2[18:17]", "gen_src2[33:32]", "gen_src2[29:15]"],
        _buf 3 "DECODER.v:189" ["atyd[2:0]"] ["op_feld[44:42]"],
        _buf 3 "DECODER.v:189" ["atys[2:0]"] ["op_feld[47:45]"],
        _buf 1 "DECODER.v:183" ["carry_psr"] ["PSR[0]"],
        _buf 1 "DECODER.v:171" ["de_flag"] ["CFG[8]"],
        _buf 1 "DECODER.v:191" ["dest_flag"] ["op_feld[39]"],
        _buf 6 "DECODER.v:207" ["dest_r[5:0]"] ["op_feld[32:27]"],
        _buf 6 "DECODER.v:207" ["dest_rl[5:0]"] ["op_feld[32:28]", "0b0"],
        _buf 1 "DECODER.v:202" ["do_long"] ["new_op[7]"],
        _buf 8 "DECODER.v:220" ["dowait[7:0]"] ["waitop[7:0]"],
        _buf 1 "DECODER.v:235" ["dvz_trap"] ["TRAPS[1]"],
        _buf 19 "DECODER.v:214" ["exr11[18:0]"] ["0b1010110000010000000"],
        _buf 18 "" ["exr12[18:12]", "exr12[10:0]"] ["op_feld[26:25]", "auop_s[3:0]", "0b0", "op_feld[19:18]", "0b000000000"],
        _buf 18 "" ["exr22[18:12]", "exr22[10:0]"] ["op_feld[24:23]", "op_feld[42]", "0b01", "op_feld[42]", "0b0", "op_feld[14:13]", "0b000000000"],
        _buf 19 "DECODER.v:214" ["exw22[18:0]"] ["op_feld[24:23]", "0b0", "op_feld[42]", "0b1", "op_feld[42]", "0b0", "exr22[11]", "op_feld[14:13]", "0b000000000"],
        _buf 1 "DECODER.v:183" ["flag"] ["PSR[5]"],
        _buf 1 "DECODER.v:235" ["fpu_trap"] ["TRAPS[0]"],
        _buf 3 "DECODER.v:266" ["hdl_a[2:0]"] ["0b0", "OPREG[9:8]"],
        _buf 3 "DECODER.v:266" ["hdl_c[2:0]"] ["OPREG[10:8]"],
        _buf 1 "" ["hdl_d[1]"] ["0b1"],
        _buf 3 "DECODER.v:266" ["hdl_e[2:0]"] ["OPREG[8]", "0bxx"],
        _buf 1 "" ["hdl_h[1]"] ["hdl_g[1]"],
        _buf 4 "DECODER.v:263" ["hdo_a[3:0]"] ["OPREG[13:10]"],
        _buf 4 "DECODER.v:263" ["hdo_c[3:0]"] ["0b0", "OPREG[10]", "OPREG[7:6]"],
        _buf 8 "DECODER.v:264" ["hdo_d[7:0]"] ["0b010100", "OPREG[10]", "0b0"],
        _buf 4 "DECODER.v:263" ["hdo_e[3:0]"] ["0b011", "OPREG[10]"],
        _buf 6 "DECODER.v:267" ["hdr_a[5:0]"] ["0b000", "OPREG[21:19]"],
        _buf 6 "DECODER.v:267" ["hdr_b[5:0]"] ["0b000", "OPREG[16:14]"],
        _buf 5 "" ["hdr_g[5:1]"] ["0b000", "OPREG[16:15]"],
        _buf 6 "DECODER.v:267" ["hdr_m[5:0]"] ["0b001", "OPREG[17:15]"],
        _buf 3 "DECODER.v:260" ["hzl_b[2:0]"] ["0b0", "OPREG[1:0]"],
        _buf 6 "DECODER.v:261" ["hzr_a[5:0]"] ["0b000", "OPREG[13:11]"],
        _buf 6 "DECODER.v:261" ["hzr_b[5:0]"] ["0b000", "OPREG[8:6]"],
        _buf 5 "" ["hzr_s[4:0]"] ["0b110", "s_user", "0b1"],
        _buf 4 "DECODER.v:210" ["idx_1[3:0]"] ["0b0", "exr12[11]", "op_feld[19:18]"],
        _buf 4 "DECODER.v:210" ["idx_2[3:0]"] ["0b0", "exr22[11]", "op_feld[14:13]"],
        _buf 7 "DECODER.v:216" ["irrw1[6:0]"] ["0b0000", "idx_feld[2:0]"],
        _buf 7 "DECODER.v:216" ["irrw2[6:0]"] ["0b0000", "idx_feld[10:8]"],
        _buf 1 "DECODER.v:171" ["ivec_flag"] ["CFG[0]"],
        _buf 1 "DECODER.v:183" ["larger"] ["PSR[2]"],
        _buf 1 "DECODER.v:191" ["long"] ["op_feld[41]"],
        _buf 1 "DECODER.v:183" ["negativ"] ["PSR[7]"],
        _buf 19 "DECODER.v:173" ["new_addr[18:0]"] ["op1_feld[52:34]"],
        _buf 8 "DECODER.v:176" ["new_nx[7:0]"] ["op1_feld[7:0]"],
        _buf 8 "DECODER.v:175" ["new_ph[7:0]"] ["op1_feld[15:8]"],
        _buf 14 "DECODER.v:174" ["new_regs[13:0]"] ["op1_feld[33:20]"],
        _buf 4 "DECODER.v:217" ["nxrd1[3:0]"] ["gen_src1[3:0]"],
        _buf 4 "DECODER.v:217" ["nxrw2[3:0]"] ["gen_src2[3:0]"],
        _buf 9 "" ["op_psr[10:3]", "op_psr[1]"] ["0b00010001", "psr_code[1]"],
        _buf 11 "DECODER.v:241" ["op_scp[10:0]"] ["op_feld_reg[10:8]", "0b01000001"],
        _buf 11 "DECODER.v:206" ["op_str[10:0]"] ["op_feld_reg[10:8]", "0b010100", "op_feld_reg[1]", "0b1"],
        _buf 11 "DECODER.v:206" ["opera[10:0]"] ["op_feld[10:0]"],
        _buf 8 "DECODER.v:245" ["ph_str[7:0]"] ["0b1100", "op_feld_reg[1]", "0b001"],
        _buf 8 "DECODER.v:215" ["phrd1[7:0]"] ["gen_src1[18:11]"],
        _buf 8 "DECODER.v:215" ["phrd2[7:0]"] ["0b0001", "gen_src2[14:11]"],
        _buf 8 "DECODER.v:215" ["phwr2[7:0]"] ["0b0010", "gen_src2[14:11]"],
        _buf 13 "DECODER.v:224" ["pop_1[12:0]"] ["0b00", "op_feld[26:25]", "0b100001000"],
        _buf 2 "" ["psr_code[2]", "psr_code[0]"] ["op_psr[2]", "op_psr[0]"],
        _buf 19 "DECODER.v:214" ["re_wr[18:0]"] ["op_feld[24:23]", "0b01010000000000011"],
        _buf 7 "DECODER.v:216" ["rega1[6:0]"] ["gen_src1[10:4]"],
        _buf 7 "DECODER.v:216" ["rega2[6:0]"] ["gen_src2[10:4]"],
        _buf 7 "" ["rrepa[7:1]"] ["0b1000011"],
        _buf 7 "DECODER.v:253" ["rstr0[6:0]"] ["0b0", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00"],
        _buf 7 "DECODER.v:253" ["rstr1[6:0]"] ["0b0", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b01"],
        _buf 7 "DECODER.v:253" ["rstr2[6:0]"] ["0b0", "kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b10"],
        _buf 19 "DECODER.v:173" ["save_pc[18:0]"] ["0b1000100", "dia_flag", "0b0000000", "dia_flag", "0b001"],
        _buf 7 "DECODER.v:196" ["saver[6:0]"] ["0b0000", "reg_nr[2:0]"],
        _buf 2 "DECODER.v:193" ["src1_le[1:0]"] ["op_feld[26:25]"],
        _buf 1 "DECODER.v:191" ["src2_flag"] ["op_feld[40]"],
        _buf 2 "DECODER.v:193" ["src2_le[1:0]"] ["op_feld[24:23]"],
        _buf 7 "DECODER.v:192" ["src_1[6:0]"] ["0b0", "op_feld[38:33]"],
        _buf 7 "DECODER.v:192" ["src_1l[6:0]"] ["0b0", "op_feld[38:34]", "0b0"],
        _buf 7 "DECODER.v:192" ["src_2[6:0]"] ["0b0", "op_feld[32:27]"],
        _buf 7 "DECODER.v:192" ["src_2l[6:0]"] ["0b0", "op_feld[32:28]", "0b0"],
        _buf 18 "" ["st_dest[18:12]", "st_dest[10:0]"] ["STRING[1:0]", "0b01100", "STRING[1:0]", "0b000001011"],
        _buf 19 "DECODER.v:214" ["st_len[18:0]"] ["STRING[1:0]", "0b00000000000000000"],
        _buf 19 "DECODER.v:214" ["st_src[18:0]"] ["STRING[1:0]", "0b10100", "st_dest[11]", "STRING[1:0]", "0b000001000"],
        _buf 19 "DECODER.v:214" ["st_src2[18:0]"] ["STRING[1:0]", "0b10100", "st_dest[11]", "STRING[1:0]", "0b000001011"],
        _buf 19 "DECODER.v:214" ["st_trde[18:0]"] ["0b0001100", "op_feld_reg[15]", "0b00000001000"],
        _buf 19 "DECODER.v:214" ["st_trs2[18:0]"] ["STRING[1:0]", "0b10100", "op_feld_reg[15]", "STRING[1:0]", "0b000001000"],
        _buf 6 "" ["stack[6]", "stack[4:0]"] ["0b0110", "s_user", "0b1"],
        _buf 6 "" ["ttstak[6]", "ttstak[4:0]"] ["0b0110", "PSR[9]", "0b1"],
        _buf 6 "DECODER.v:252" ["wstr0[5:0]"] ["kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b00"],
        _buf 6 "DECODER.v:252" ["wstr1[5:0]"] ["kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b01"],
        _buf 6 "DECODER.v:252" ["wstr2[5:0]"] ["kurz_st", "kurz_st", "kurz_st", "kurz_st", "0b10"],
        _buf 1 "DECODER.v:183" ["zero"] ["PSR[6]"]
    ] in
    PINST "draw_hier DECODER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DFPU_ADDSUB {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "START[1:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "MAN1[20:0]",
                 "MAN2[20:0]",
                 "SRCFLAGS[5:0]",
                 "BWD[1:0]",
                 "SELECT[3:0]" ] in
    let outs = [ "OUT[69:0]",
                 "IOUT[31:0]",
                 "CMPRES[1:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[31:0]",
                 "TmP_1",
                 "TmP_10[31:0]",
                 "TmP_100[31:0]",
                 "TmP_101",
                 "TmP_102",
                 "TmP_103",
                 "TmP_104",
                 "TmP_11[63:0]",
                 "TmP_12[69:0]",
                 "TmP_13",
                 "TmP_14[5:0]",
                 "TmP_15[5:0]",
                 "TmP_16",
                 "TmP_17[67:0]",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[55:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5[10:0]",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6[10:0]",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75",
                 "TmP_76",
                 "TmP_77",
                 "TmP_78",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80[30:0]",
                 "TmP_81[55:0]",
                 "TmP_82",
                 "TmP_83",
                 "TmP_84",
                 "TmP_85",
                 "TmP_86",
                 "TmP_87",
                 "TmP_88",
                 "TmP_89",
                 "TmP_9",
                 "TmP_90",
                 "TmP_91",
                 "TmP_92[5:0]",
                 "TmP_93[5:0]",
                 "TmP_94[52:0]",
                 "TmP_95[5:0]",
                 "TmP_96",
                 "TmP_97",
                 "TmP_98[32:0]",
                 "TmP_99[67:0]",
                 "add_q[65:0]",
                 "addflag",
                 "blshifta[55:0]",
                 "blshiftb[55:0]",
                 "blshiftc[55:0]",
                 "blshiftd[55:0]",
                 "blshifte[55:0]",
                 "blshiftf[55:0]",
                 "blshifti[55:0]",
                 "brshifta[55:0]",
                 "brshiftb[55:0]",
                 "brshiftc[55:0]",
                 "brshiftd[55:0]",
                 "brshifte[55:0]",
                 "brshiftf[55:0]",
                 "car_ry",
                 "ex_msb",
                 "ex_null",
                 "exdiff[11:0]",
                 "exdiff12[11:0]",
                 "expo1[10:0]",
                 "expo2[10:0]",
                 "expol[12:0]",
                 "ganzklein",
                 "iadder[32:0]",
                 "inex[1:0]",
                 "lowdiff[32:0]",
                 "lsb_bl[1:0]",
                 "ma_msb",
                 "ma_null",
                 "madiff[20:0]",
                 "minint",
                 "movdat[31:0]",
                 "movif[31:0]",
                 "muxsrc1[52:0]",
                 "muxsrc2[63:0]",
                 "nan",
                 "outreg[69:0]",
                 "ovflag",
                 "ovflag2",
                 "pipe1[52:0]",
                 "pshift[2:0]",
                 "restbits",
                 "result[67:0]",
                 "rexdiff[11:0]",
                 "rexo[11:0]",
                 "rovfl",
                 "shift[5:0]",
                 "shift1[5:0]",
                 "shift2[5:0]",
                 "shift_1",
                 "shift_16",
                 "shift_2",
                 "shift_32",
                 "shift_4",
                 "shift_8",
                 "shiftl[12:0]",
                 "sign",
                 "sign1",
                 "sign2",
                 "sign_movif",
                 "switch",
                 "vorz",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 32 "DP_FPU.v:246" ["TmP_10[31:0]"] ["TmP_100[31:0]"] ["0b0000000000000000000000000000000", "movdat[31]"] ,
        _add 33 "DP_FPU.v:394" ["iadder[32:0]"] ["TmP_98[32:0]"] ["0b00000000000000000000000000000000", "car_ry"] ,
        _add 68 "DP_FPU.v:415" ["TmP_17[67:0]"] ["0b0", "muxsrc2[63:0]", "0b000"] ["TmP_99[67:0]"] ,
        _add 68 "DP_FPU.v:415" ["result[67:0]"] ["TmP_17[67:0]"] ["0b0000000000000000000000000000000000000000000000000000000000000000000", "TmP_82"] ,
        _and 1 "DP_FPU.v:261" ["TmP_18"] ["TmP_84"] ["TmP_39"] ,
        _and 1 "DP_FPU.v:261" ["TmP_13"] ["TmP_18"] ["TmP_71"] ,
        _and 1 "DP_FPU.v:264" ["ganzklein"] ["TmP_72"] ["TmP_52"] ,
        _and 1 "DP_FPU.v:271" ["TmP_19"] ["TmP_74"] ["TmP_53"] ,
        _and 1 "DP_FPU.v:272" ["TmP_20"] ["TmP_74"] ["TmP_54"] ,
        _and 1 "DP_FPU.v:273" ["TmP_21"] ["TmP_74"] ["TmP_55"] ,
        _and 1 "DP_FPU.v:277" ["TmP_22"] ["TmP_40"] ["TmP_41"] ,
        _and 1 "DP_FPU.v:277" ["TmP_23"] ["TmP_22"] ["BWD[1]"] ,
        _and 1 "DP_FPU.v:300" ["TmP_24"] ["TmP_75"] ["TmP_85"] ,
        _and 1 "DP_FPU.v:321" ["TmP_25"] ["ma_null"] ["lowdiff[32]"] ,
        _and 1 "DP_FPU.v:321" ["TmP_26"] ["ex_null"] ["TmP_86"] ,
        _and 1 "DP_FPU.v:355" ["CMPRES[1]"] ["TmP_76"] ["TmP_96"] ,
        _and 1 "DP_FPU.v:356" ["TmP_27"] ["ex_null"] ["ma_null"] ,
        _and 1 "DP_FPU.v:356" ["TmP_28"] ["TmP_27"] ["TmP_44"] ,
        _and 1 "DP_FPU.v:356" ["TmP_29"] ["TmP_28"] ["TmP_45"] ,
        _and 1 "DP_FPU.v:356" ["TmP_30"] ["SRCFLAGS[2]"] ["SRCFLAGS[0]"] ,
        _and 1 "DP_FPU.v:389" ["TmP_31"] ["TmP_46"] ["TmP_78"] ,
        _and 1 "DP_FPU.v:390" ["TmP_32"] ["TmP_79"] ["TmP_48"] ,
        _and 1 "DP_FPU.v:453" ["TmP_33"] ["TmP_75"] ["SRCFLAGS[2]"] ,
        _and 1 "DP_FPU.v:453" ["TmP_34"] ["TmP_33"] ["SRCFLAGS[0]"] ,
        _and 1 "DP_FPU.v:454" ["TmP_35"] ["TmP_82"] ["TmP_75"] ,
        _and 1 "DP_FPU.v:454" ["TmP_36"] ["TmP_50"] ["TmP_88"] ,
        _and 1 "DP_FPU.v:456" ["TmP_37"] ["vorz"] ["TmP_83"] ,
        _and 1 "DP_FPU.v:460" ["TmP_38"] ["addflag"] ["TmP_75"] ,
        _eq 32 "DP_FPU.v:277" ["TmP_40"] ["SRC1[31:0]"] ["0b11000001111000000000000000000000"] ,
        _logic_not 32 "DP_FPU.v:277" ["TmP_41"] ["SRC2[31:0]"],
        _eq 2 "DP_FPU.v:300" ["TmP_39"] ["SELECT[1:0]"] ["0b11"] ,
        _logic_not 11 "DP_FPU.v:309" ["TmP_42"] ["exdiff[10:0]"],
        _logic_not 20 "DP_FPU.v:310" ["TmP_43"] ["madiff[19:0]"],
        _eq 1 "DP_FPU.v:356" ["TmP_44"] ["SRCFLAGS[4]"] ["SRCFLAGS[5]"] ,
        _logic_not 33 "DP_FPU.v:356" ["TmP_45"] ["lowdiff[32:0]"],
        _eq 2 "DP_FPU.v:389" ["TmP_46"] ["brshiftf[25:24]"] ["0b11"] ,
        _eq 2 "DP_FPU.v:389" ["TmP_47"] ["brshiftf[24]", "restbits"] ["0b11"] ,
        _logic_not 2 "DP_FPU.v:390" ["TmP_48"] ["brshiftf[24]", "restbits"],
        _logic_not 32 "DP_FPU.v:421" ["shift_32"] ["blshifti[55:24]"],
        _logic_not 16 "DP_FPU.v:436" ["shift_16"] ["blshifta[55:40]"],
        _logic_not 8 "DP_FPU.v:438" ["shift_8"] ["blshiftb[55:48]"],
        _logic_not 4 "DP_FPU.v:440" ["shift_4"] ["blshiftc[55:52]"],
        _logic_not 2 "DP_FPU.v:442" ["shift_2"] ["blshiftd[55:54]"],
        _eq 4 "DP_FPU.v:451" ["TmP_49"] ["SELECT[3:0]"] (_SignExt 4 ["0b11"]) ,
        _logic_not 56 "DP_FPU.v:454" ["TmP_50"] ["blshifti[55:0]"],
        _eq 2 "DP_FPU.v:454" ["TmP_51"] ["SELECT[1:0]"] ["0b10"] ,
        _logic_reduce_bool 6 "DP_FPU.v:264" ["TmP_52"] ["rexdiff[10:5]"],
        _logic_reduce_bool 8 "DP_FPU.v:271" ["TmP_53"] ["rexo[10:3]"],
        _logic_reduce_bool 7 "DP_FPU.v:272" ["TmP_54"] ["rexo[10:4]"],
        _logic_reduce_bool 6 "DP_FPU.v:273" ["TmP_55"] ["rexo[10:5]"],
        _logic_reduce_bool 5 "DP_FPU.v:313" ["TmP_56"] ["exdiff[10:6]"],
        _logic_reduce_bool 5 "DP_FPU.v:314" ["TmP_57"] ["exdiff12[10:6]"],
        _logic_reduce_bool 30 "DP_FPU.v:368" ["TmP_58"] ["pipe1[29:0]"],
        _logic_reduce_bool 17 "DP_FPU.v:369" ["TmP_59"] ["brshifta[16:0]"],
        _logic_reduce_bool 9 "DP_FPU.v:371" ["TmP_60"] ["brshiftb[8:0]"],
        _logic_reduce_bool 5 "DP_FPU.v:372" ["TmP_61"] ["brshiftc[4:0]"],
        _logic_reduce_bool 3 "DP_FPU.v:373" ["TmP_62"] ["brshiftd[2:0]"],
        _logic_reduce_bool 2 "DP_FPU.v:374" ["TmP_63"] ["brshifte[1:0]"],
        _logic_reduce_bool 24 "DP_FPU.v:384" ["restbits"] ["brshiftf[23:0]"],
        _ne 1 "DP_FPU.v:400" ["TmP_64"] ["iadder[8]"] ["iadder[7]"] ,
        _ne 1 "DP_FPU.v:401" ["TmP_65"] ["iadder[16]"] ["iadder[15]"] ,
        _ne 1 "DP_FPU.v:402" ["TmP_66"] ["iadder[32]"] ["iadder[31]"] ,
        _ne 1 "DP_FPU.v:424" ["TmP_67"] ["muxsrc2[53]"] ["result[56]"] ,
        _logic_reduce_bool 3 "DP_FPU.v:424" ["TmP_68"] ["result[2:0]"],
        _logic_reduce_bool 2 "DP_FPU.v:425" ["TmP_69"] ["result[1:0]"],
        _logic_reduce_bool 2 "DP_FPU.v:451" ["TmP_70"] ["blshiftf[1:0]"],
        _not 1 "DP_FPU.v:261" ["TmP_71"] ["minint"],
        _not 1 "DP_FPU.v:264" ["TmP_72"] ["rexdiff[11]"],
        _not 1 "DP_FPU.v:267" ["TmP_73"] ["BWD[1]"],
        _not 1 "DP_FPU.v:273" ["TmP_74"] ["rexo[11]"],
        _not 1 "DP_FPU.v:350" ["TmP_1"] ["TmP_103"],
        _not 1 "DP_FPU.v:355" ["TmP_76"] ["CMPRES[0]"],
        _not 1 "DP_FPU.v:355" ["TmP_77"] ["SRCFLAGS[4]"],
        _not 1 "DP_FPU.v:389" ["TmP_78"] ["restbits"],
        _not 1 "DP_FPU.v:390" ["TmP_79"] ["ganzklein"],
        _not 31 "DP_FPU.v:394" ["TmP_80[30:0]"] ["brshiftf[55:25]"],
        _not 56 "DP_FPU.v:415" ["TmP_81[55:0]"] ["brshiftf[55:0]"],
        _not 1 "DP_FPU.v:444" ["shift_1"] ["blshifte[55]"],
        _not 1 "DP_FPU.v:454" ["TmP_82"] ["addflag"],
        _not 1 "DP_FPU.v:456" ["TmP_83"] ["zero"],
        _not 1 "DP_FPU.v:460" ["TmP_75"] ["SELECT[1]"],
        _or 1 "DP_FPU.v:261" ["TmP_84"] ["ovflag"] ["ovflag2"] ,
        _or 1 "DP_FPU.v:300" ["TmP_85"] ["SRCFLAGS[3]"] ["SRCFLAGS[1]"] ,
        _or 1 "DP_FPU.v:321" ["TmP_86"] ["ma_msb"] ["TmP_25"] ,
        _or 1 "DP_FPU.v:321" ["switch"] ["ex_msb"] ["TmP_26"] ,
        _or 1 "DP_FPU.v:356" ["CMPRES[0]"] ["TmP_29"] ["TmP_30"] ,
        _or 1 "DP_FPU.v:389" ["TmP_87"] ["TmP_31"] ["TmP_47"] ,
        _or 1 "DP_FPU.v:454" ["TmP_88"] ["TmP_35"] ["TmP_51"] ,
        _or 1 "DP_FPU.v:454" ["zero"] ["TmP_34"] ["TmP_36"] ,
        _dff 70 "DP_FPU.v:459" ["outreg[69:0]"] ["BCLK"] ["TmP_12[69:0]"],
        _dff 32 "DP_FPU.v:396" ["IOUT[31:0]"] ["BCLK"] ["TmP_0[31:0]"],
        _dff 56 "DP_FPU.v:370" ["brshiftc[55:0]"] ["BCLK"] ["TmP_2[55:0]"],
        _dff 1 "DP_FPU.v:347" ["vorz"] ["BCLK"] ["TmP_16"],
        _dff 1 "DP_FPU.v:347" ["addflag"] ["BCLK"] ["TmP_1"],
        _dff 64 "DP_FPU.v:328" ["muxsrc2[63:0]"] ["BCLK"] ["TmP_11[63:0]"],
        _dff 3 "DP_FPU.v:328" ["pshift[2:0]"] ["BCLK"] ["shift[2:0]"],
        _dff 6 "DP_FPU.v:306" ["shift1[5:0]"] ["BCLK"] ["TmP_14[5:0]"],
        _dff 6 "DP_FPU.v:306" ["shift2[5:0]"] ["BCLK"] ["TmP_15[5:0]"],
        _dff 1 "DP_FPU.v:306" ["ex_null"] ["BCLK"] ["TmP_4"],
        _dff 1 "DP_FPU.v:306" ["ma_null"] ["BCLK"] ["TmP_8"],
        _dff 1 "DP_FPU.v:306" ["ex_msb"] ["BCLK"] ["TmP_3"],
        _dff 1 "DP_FPU.v:306" ["ma_msb"] ["BCLK"] ["TmP_7"],
        _dff 11 "DP_FPU.v:306" ["expo1[10:0]"] ["BCLK"] ["TmP_5[10:0]"],
        _dff 11 "DP_FPU.v:306" ["expo2[10:0]"] ["BCLK"] ["TmP_6[10:0]"],
        _dff 1 "DP_FPU.v:276" ["minint"] ["BCLK"] ["TmP_9"],
        _dff 1 "DP_FPU.v:261" ["rovfl"] ["BCLK"] ["TmP_13"],
        _dff 1 "DP_FPU.v:248" ["sign_movif"] ["BCLK"] ["movdat[31]"],
        _dff 32 "DP_FPU.v:246" ["movif[31:0]"] ["BCLK"] ["TmP_10[31:0]"],
        _pmux 1 2 "DP_FPU.v:401|DP_FPU.v:399" ["ovflag2"] ["TmP_66"] ["TmP_64", "TmP_65"] ["TmP_90", "TmP_89"],
        _pmux 1 2 "DP_FPU.v:390|DP_FPU.v:388" ["car_ry"] ["SRCFLAGS[4]"] ["TmP_104", "TmP_97"] ["TmP_91", "SELECT[3]"],
        _logic_not 2 "DP_FPU.v:389|DP_FPU.v:388" ["TmP_91"] ["SELECT[3:2]"],
        _mux 11 "DP_FPU.v:307" ["TmP_6[10:0]"] ["expo2[10:0]"] ["SRC2[30:20]"] ["START[0]"],
        _mux 11 "DP_FPU.v:307" ["TmP_5[10:0]"] ["expo1[10:0]"] ["SRC1[30:20]"] ["START[0]"],
        _mux 1 "DP_FPU.v:307" ["TmP_7"] ["ma_msb"] ["madiff[20]"] ["START[0]"],
        _mux 1 "DP_FPU.v:307" ["TmP_3"] ["ex_msb"] ["exdiff[11]"] ["START[0]"],
        _mux 1 "DP_FPU.v:307" ["TmP_8"] ["ma_null"] ["TmP_43"] ["START[0]"],
        _mux 1 "DP_FPU.v:307" ["TmP_4"] ["ex_null"] ["TmP_42"] ["START[0]"],
        _mux 6 "DP_FPU.v:307" ["TmP_15[5:0]"] ["shift2[5:0]"] ["TmP_93[5:0]"] ["START[0]"],
        _mux 6 "DP_FPU.v:307" ["TmP_14[5:0]"] ["shift1[5:0]"] ["TmP_92[5:0]"] ["START[0]"],
        _mux 1 "DP_FPU.v:277" ["TmP_9"] ["minint"] ["TmP_23"] ["START[1]"],
        _pmux 1 2 "DP_FPU.v:272|DP_FPU.v:270" ["ovflag"] ["TmP_21"] ["TmP_19", "TmP_20"] ["TmP_90", "TmP_89"],
        _pmux 32 2 "DP_FPU.v:241|DP_FPU.v:239" ["movdat[31:0]"] ["SRC1[31:0]"] ["SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7:0]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15:0]"] ["TmP_90", "TmP_89"],
        _eq 2 "DP_FPU.v:241|DP_FPU.v:239" ["TmP_89"] ["BWD[1:0]"] ["0b01"] ,
        _logic_not 2 "DP_FPU.v:240|DP_FPU.v:239" ["TmP_90"] ["BWD[1:0]"],
        _sub 12 "DP_FPU.v:258" ["rexdiff[11:0]"] ["0b010000011101"] ["0b0", "SRC1[30:20]"] ,
        _sub 12 "DP_FPU.v:267" ["rexo[11:0]"] ["0b0", "SRC1[30:20]"] ["0b00111111111", "TmP_73"] ,
        _sub 12 "DP_FPU.v:302" ["exdiff[11:0]"] ["0b0", "SRC2[30:20]"] ["0b0", "SRC1[30:20]"] ,
        _sub 21 "DP_FPU.v:303" ["madiff[20:0]"] ["0b0", "SRC2[19:0]"] ["0b0", "SRC1[19:0]"] ,
        _sub 12 "DP_FPU.v:304" ["exdiff12[11:0]"] ["0b0", "SRC1[30:20]"] ["0b0", "SRC2[30:20]"] ,
        _sub 33 "DP_FPU.v:319" ["lowdiff[32:0]"] ["0b0", "SRC2[31:0]"] ["0b0", "SRC1[31:0]"] ,
        _sub 13 "DP_FPU.v:448" ["expol[12:0]"] ["shiftl[12:0]"] ["0b0000000", "shift_32", "shift_16", "shift_8", "shift_4", "shift_2", "shift_1"] ,
        _mux 1 "DP_FPU.v:300" ["nan"] ["TmP_24"] ["SRCFLAGS[1]"] ["TmP_39"],
        _mux 6 "DP_FPU.v:313" ["TmP_92[5:0]"] ["exdiff[5:0]"] ["0b111111"] ["TmP_56"],
        _mux 6 "DP_FPU.v:314" ["TmP_93[5:0]"] ["exdiff12[5:0]"] ["0b111111"] ["TmP_57"],
        _mux 53 "DP_FPU.v:323" ["muxsrc1[52:0]"] ["MAN1[20:0]", "SRC1[31:0]"] ["MAN2[20:0]", "SRC2[31:0]"] ["switch"],
        _mux 53 "DP_FPU.v:325" ["TmP_94[52:0]"] ["0b1", "SRC1[19:0]", "SRC2[31:0]"] ["0b00000000000000000000000000000000000000000000000000000"] ["ganzklein"],
        _mux 53 "DP_FPU.v:325" ["pipe1[52:0]"] ["muxsrc1[52:0]"] ["TmP_94[52:0]"] ["SELECT[1]"],
        _mux 6 "DP_FPU.v:326" ["TmP_95[5:0]"] ["shift1[5:0]"] ["shift2[5:0]"] ["switch"],
        _mux 6 "DP_FPU.v:326" ["shift[5:0]"] ["TmP_95[5:0]"] ["0b0", "rexdiff[4:0]"] ["SELECT[1]"],
        _mux 64 "DP_FPU.v:330" ["TmP_11[63:0]"] ["expo2[10:0]", "MAN2[20:0]", "SRC2[31:0]"] ["expo1[10:0]", "MAN1[20:0]", "SRC1[31:0]"] ["switch"],
        _mux 1 "DP_FPU.v:349" ["TmP_16"] ["SRCFLAGS[5]"] ["TmP_101"] ["switch"],
        _mux 1 "DP_FPU.v:355" ["TmP_96"] ["SRCFLAGS[5]"] ["TmP_77"] ["switch"],
        _mux 56 "DP_FPU.v:368" ["brshifta[55:0]"] ["pipe1[52:0]", "0b000"] ["0b00000000000000000000000000000000", "pipe1[52:30]", "TmP_58"] ["shift[5]"],
        _mux 56 "DP_FPU.v:369" ["brshiftb[55:0]"] ["brshifta[55:0]"] ["0b0000000000000000", "brshifta[55:17]", "TmP_59"] ["shift[4]"],
        _mux 56 "DP_FPU.v:371" ["TmP_2[55:0]"] ["brshiftb[55:0]"] ["0b00000000", "brshiftb[55:9]", "TmP_60"] ["shift[3]"],
        _mux 56 "DP_FPU.v:372" ["brshiftd[55:0]"] ["brshiftc[55:0]"] ["0b0000", "brshiftc[55:5]", "TmP_61"] ["pshift[2]"],
        _mux 56 "DP_FPU.v:373" ["brshifte[55:0]"] ["brshiftd[55:0]"] ["0b00", "brshiftd[55:3]", "TmP_62"] ["pshift[1]"],
        _mux 56 "DP_FPU.v:374" ["brshiftf[55:0]"] ["brshifte[55:0]"] ["0b0", "brshifte[55:2]", "TmP_63"] ["pshift[0]"],
        _mux 1 "DP_FPU.v:390" ["TmP_97"] ["0b0"] ["TmP_32"] ["SRCFLAGS[4]"],
        _mux 33 "DP_FPU.v:394" ["TmP_98[32:0]"] ["0b00", "brshiftf[55:25]"] ["0b11", "TmP_80[30:0]"] ["SRCFLAGS[4]"],
        _mux 32 "DP_FPU.v:396" ["TmP_0[31:0]"] ["iadder[31:0]"] ["0b10000000000000000000000000000000"] ["minint"],
        _mux 68 "DP_FPU.v:415" ["TmP_99[67:0]"] ["0b111111111111", "TmP_81[55:0]"] ["0b000000000000", "brshiftf[55:0]"] ["addflag"],
        _mux 56 "DP_FPU.v:417" ["blshifti[55:0]"] ["result[55:0]"] ["movif[31:0]", "0b000000000000000000000000"] ["SELECT[1]"],
        _mux 13 "DP_FPU.v:419" ["shiftl[12:0]"] ["0b0", "result[67:56]"] ["0b0010000011110"] ["SELECT[1]"],
        _mux 66 "DP_FPU.v:425" ["add_q[65:0]"] ["result[67:56]", "result[54:2]", "TmP_69"] ["result[67:3]", "TmP_68"] ["TmP_67"],
        _mux 56 "DP_FPU.v:435" ["blshifta[55:0]"] ["blshifti[55:0]"] ["blshifti[23:0]", "0b00000000000000000000000000000000"] ["shift_32"],
        _mux 56 "DP_FPU.v:437" ["blshiftb[55:0]"] ["blshifta[55:0]"] ["blshifta[39:0]", "0b0000000000000000"] ["shift_16"],
        _mux 56 "DP_FPU.v:439" ["blshiftc[55:0]"] ["blshiftb[55:0]"] ["blshiftb[47:0]", "0b00000000"] ["shift_8"],
        _mux 56 "DP_FPU.v:441" ["blshiftd[55:0]"] ["blshiftc[55:0]"] ["blshiftc[51:0]", "0b0000"] ["shift_4"],
        _mux 56 "DP_FPU.v:443" ["blshifte[55:0]"] ["blshiftd[55:0]"] ["blshiftd[53:0]", "0b00"] ["shift_2"],
        _mux 56 "DP_FPU.v:445" ["blshiftf[55:0]"] ["blshifte[54:0]", "0b0"] ["0b1", "blshifte[54:0]"] ["blshifte[55]"],
        _mux 2 "DP_FPU.v:451" ["lsb_bl[1:0]"] ["blshiftf[2]", "TmP_70"] ["brshiftf[24]", "restbits"] ["TmP_49"],
        _mux 1 "DP_FPU.v:456" ["sign"] ["TmP_37"] ["sign_movif"] ["SELECT[1]"],
        _mux 70 "DP_FPU.v:461" ["TmP_12[69:0]"] ["nan", "zero", "sign", "expol[12:0]", "blshiftf[54:3]", "lsb_bl[1:0]"] ["nan", "zero", "sign", "0b0", "add_q[65:0]"] ["TmP_38"],
        _mux 2 "DP_FPU.v:465" ["OUT[66:65]"] ["outreg[66:65]"] ["0b01"] ["rovfl"],
        _xor 32 "DP_FPU.v:246" ["TmP_100[31:0]"] ["movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]"] ["movdat[31:0]"] ,
        _xor 1 "DP_FPU.v:349" ["TmP_101"] ["SELECT[0]"] ["SRCFLAGS[4]"] ,
        _xor 1 "DP_FPU.v:350" ["TmP_102"] ["SRCFLAGS[4]"] ["SRCFLAGS[5]"] ,
        _xor 1 "DP_FPU.v:350" ["TmP_103"] ["SELECT[0]"] ["TmP_102"] ,
        _xor 1 "DP_FPU.v:389" ["TmP_104"] ["SRCFLAGS[4]"] ["TmP_87"] ,
        _buf 68 "" ["OUT[69:67]", "OUT[64:0]"] ["outreg[69:67]", "outreg[64:0]"],
        _buf 2 "DP_FPU.v:380" ["inex[1:0]"] ["brshiftf[24]", "restbits"],
        _buf 1 "DP_FPU.v:287" ["sign1"] ["SRCFLAGS[4]"],
        _buf 1 "DP_FPU.v:287" ["sign2"] ["SRCFLAGS[5]"]
    ] in
    PINST "draw_hier DFPU_ADDSUB" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DFPU_BCD {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "START",
                 "DO_BCD",
                 "BWD[1:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "CY_IN",
                 "SUBP" ] in
    let outs = [ "BCD_Q[31:0]",
                 "CY_OUT",
                 "BCD_DONE" ] in
    let ints = md_extract_vectors [ "TmP_0[7:0]",
                 "TmP_1[7:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[7:0]",
                 "TmP_20",
                 "TmP_3[7:0]",
                 "TmP_4[1:0]",
                 "TmP_5",
                 "TmP_6[1:0]",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "byte_cou[1:0]",
                 "carry",
                 "carry_lsd",
                 "carry_msd",
                 "datain[15:0]",
                 "result[7:0]",
                 "run_bcd" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 2 "DP_FPU.v:175" ["TmP_6[1:0]"] ["byte_cou[1:0]"] ["0b0", "run_bcd"] ,
        _and 1 "DP_FPU.v:173" ["TmP_8"] ["TmP_7"] ["TmP_16"] ,
        _and 1 "DP_FPU.v:173" ["TmP_9"] ["run_bcd"] ["TmP_17"] ,
        _and 1 "DP_FPU.v:200" ["TmP_7"] ["START"] ["DO_BCD"] ,
        _and 1 "DP_FPU.v:200" ["TmP_10"] ["TmP_7"] ["TmP_14"] ,
        _and 1 "DP_FPU.v:200" ["TmP_11"] ["run_bcd"] ["TmP_15"] ,
        _eq 2 "DP_FPU.v:197" ["TmP_12"] ["byte_cou[1:0]"] ["0b10"] ,
        _eq 2 "DP_FPU.v:198" ["TmP_13"] ["byte_cou[1:0]"] ["0b11"] ,
        _logic_not 2 "DP_FPU.v:200" ["TmP_14"] ["BWD[1:0]"],
        _eq 2 "DP_FPU.v:200" ["TmP_15"] ["BWD[1:0]"] ["byte_cou[1:0]"] ,
        _logic_reduce_bool 2 "DP_FPU.v:173" ["TmP_16"] ["BWD[1:0]"],
        _ne 2 "DP_FPU.v:173" ["TmP_17"] ["BWD[1:0]"] ["byte_cou[1:0]"] ,
        _or 1 "DP_FPU.v:173" ["TmP_5"] ["TmP_8"] ["TmP_9"] ,
        _or 1 "DP_FPU.v:200" ["BCD_DONE"] ["TmP_10"] ["TmP_11"] ,
        _dff 8 "DP_FPU.v:198" ["BCD_Q[31:24]"] ["BCLK"] ["TmP_2[7:0]"],
        _dff 8 "DP_FPU.v:197" ["BCD_Q[23:16]"] ["BCLK"] ["TmP_1[7:0]"],
        _dff 8 "DP_FPU.v:196" ["BCD_Q[15:8]"] ["BCLK"] ["TmP_0[7:0]"],
        _dff 8 "DP_FPU.v:195" ["BCD_Q[7:0]"] ["BCLK"] ["TmP_3[7:0]"],
        _dff 1 "DP_FPU.v:193" ["CY_OUT"] ["BCLK"] ["carry_msd"],
        _dff 2 "DP_FPU.v:175" ["byte_cou[1:0]"] ["BCLK"] ["TmP_4[1:0]"],
        _adff 1 "DP_FPU.v:170" ["run_bcd"] ["BRESET"] ["BCLK"] ["TmP_5"],
        _mux 8 "DP_FPU.v:198" ["TmP_2[7:0]"] ["BCD_Q[31:24]"] ["result[7:0]"] ["TmP_13"],
        _mux 8 "DP_FPU.v:197" ["TmP_1[7:0]"] ["BCD_Q[23:16]"] ["result[7:0]"] ["TmP_12"],
        _mux 8 "DP_FPU.v:196" ["TmP_0[7:0]"] ["result[7:0]"] ["BCD_Q[15:8]"] ["byte_cou[1]"],
        _mux 8 "DP_FPU.v:195" ["TmP_3[7:0]"] ["BCD_Q[7:0]"] ["result[7:0]"] ["START"],
        _pmux 16 4 "DP_FPU.v:182|DP_FPU.v:178" ["datain[15:0]"] ["0bxxxxxxxxxxxxxxxx"] ["SRC1[7:0]", "SRC2[7:0]", "SRC1[15:8]", "SRC2[15:8]", "SRC1[23:16]", "SRC2[23:16]", "SRC1[31:24]", "SRC2[31:24]"] ["START", "TmP_20", "TmP_19", "TmP_18"],
        _eq 3 "DP_FPU.v:182|DP_FPU.v:178" ["TmP_18"] ["START", "byte_cou[1:0]"] ["0b011"] ,
        _eq 3 "DP_FPU.v:181|DP_FPU.v:178" ["TmP_19"] ["START", "byte_cou[1:0]"] ["0b010"] ,
        _logic_not 2 "DP_FPU.v:180|DP_FPU.v:178" ["TmP_20"] ["START", "byte_cou[1]"],
        _mux 2 "DP_FPU.v:175" ["TmP_4[1:0]"] ["TmP_6[1:0]"] ["0b01"] ["START"],
        _mux 1 "DP_FPU.v:185" ["carry"] ["CY_OUT"] ["CY_IN"] ["START"],
        BCDADDER [("instance", "lsd_inst"), ("src", "DP_FPU.v:187")] [
                ("A_IN[3:0]",["datain[3:0]"]),
                ("B_IN[3:0]",["datain[11:8]"]),
                ("CY_IN",["carry"]),
                ("CY_OUT",["carry_lsd"]),
                ("OUT[3:0]",["result[3:0]"]),
                ("SUBP",["SUBP"])],
        BCDADDER [("instance", "msd_inst"), ("src", "DP_FPU.v:190")] [
                ("A_IN[3:0]",["datain[7:4]"]),
                ("B_IN[3:0]",["datain[15:12]"]),
                ("CY_IN",["carry_lsd"]),
                ("CY_OUT",["carry_msd"]),
                ("OUT[3:0]",["result[7:4]"]),
                ("SUBP",["SUBP"])]
    ] in
    PINST "draw_hier DFPU_BCD" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DFPU_DIV {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRST",
                 "START[3:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "MAN1[20:0]",
                 "MAN2[20:0]",
                 "SRCFLAGS[5:0]",
                 "FL",
                 "BWD[1:0]",
                 "OPCODE[2:0]" ] in
    let outs = [ "OUT[69:0]",
                 "DONE",
                 "DIVI_OUT[63:0]",
                 "DVZ_TRAP",
                 "DEI_OVF[1:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1[31:0]",
                 "TmP_10",
                 "TmP_100[31:0]",
                 "TmP_101",
                 "TmP_102",
                 "TmP_103",
                 "TmP_104[12:0]",
                 "TmP_105[31:0]",
                 "TmP_106",
                 "TmP_11[56:0]",
                 "TmP_12[31:0]",
                 "TmP_13[56:0]",
                 "TmP_14[55:0]",
                 "TmP_15",
                 "TmP_16[12:0]",
                 "TmP_17",
                 "TmP_18[4:0]",
                 "TmP_19[5:0]",
                 "TmP_2[31:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24[31:0]",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27[32:0]",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30[31:0]",
                 "TmP_31[55:0]",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4[69:0]",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6[4:0]",
                 "TmP_60[1:0]",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67[69:0]",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72[56:0]",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75",
                 "TmP_76[56:0]",
                 "TmP_77",
                 "TmP_78",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82",
                 "TmP_83",
                 "TmP_84",
                 "TmP_85[5:0]",
                 "TmP_86",
                 "TmP_87",
                 "TmP_88",
                 "TmP_89",
                 "TmP_9",
                 "TmP_90",
                 "TmP_91[4:0]",
                 "TmP_92[31:0]",
                 "TmP_93[12:0]",
                 "TmP_94[12:0]",
                 "TmP_95[31:0]",
                 "TmP_96[31:0]",
                 "TmP_97[32:0]",
                 "TmP_98[56:0]",
                 "TmP_99[56:0]",
                 "addoff[2:0]",
                 "dei_pipe",
                 "dei_result[31:0]",
                 "diff_msb[6:0]",
                 "din_mux[62:0]",
                 "divi_counter[4:0]",
                 "divi_pipe1",
                 "divi_pipe2",
                 "divi_pipe3",
                 "divi_pipe4",
                 "divi_result[32:0]",
                 "divreg[56:0]",
                 "divreg_ext[31:0]",
                 "divsr[56:0]",
                 "dreimal[55:0]",
                 "dvz_pipe",
                 "ende",
                 "expoh[12:0]",
                 "expol[12:0]",
                 "exponent[12:0]",
                 "extdata",
                 "i_in[31:0]",
                 "i_out[37:0]",
                 "ist_null",
                 "ivalue[31:0]",
                 "load_src1",
                 "load_src2",
                 "man_1[20:0]",
                 "msb_src1[4:0]",
                 "msb_src2[5:0]",
                 "nan",
                 "neg_flag",
                 "neg_src1",
                 "neg_src2",
                 "negativ",
                 "next_msb2",
                 "not_dei",
                 "nul_src2",
                 "offset[12:0]",
                 "orlow_d",
                 "orlow_s",
                 "pipe_reg[31:0]",
                 "plus_1",
                 "rest_null",
                 "resthigh",
                 "restlow",
                 "restlsb",
                 "run_divi",
                 "runflag",
                 "save1[32:0]",
                 "sel_in",
                 "shift_16[62:0]",
                 "shift_2[62:0]",
                 "shift_32[64:0]",
                 "shift_4[62:0]",
                 "shift_8[62:0]",
                 "shift_r[4:0]",
                 "short",
                 "sign",
                 "src2_reg[31:0]",
                 "src_1[32:0]",
                 "stop_divi",
                 "sub1[56:0]",
                 "sub2[56:0]",
                 "sub3[56:0]",
                 "sub_case",
                 "valdata",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 32 "DP_FPU.v:901" ["TmP_30[31:0]"] ["TmP_105[31:0]"] ["0b0000000000000000000000000000000", "plus_1"] ,
        _add 56 "DP_FPU.v:927" ["TmP_31[55:0]"] ["0b0", "man_1[20:0]", "src_1[32:0]", "0b0"] ["0b00", "man_1[20:0]", "src_1[32:0]"] ,
        _add 13 "DP_FPU.v:992" ["expoh[12:0]"] ["exponent[12:0]"] ["offset[12:1]", "0b1"] ,
        _add 13 "DP_FPU.v:993" ["expol[12:0]"] ["exponent[12:0]"] ["offset[12:0]"] ,
        _and 1 "DP_FPU.v:790" ["TmP_32"] ["TmP_51"] ["run_divi"] ,
        _and 1 "DP_FPU.v:792" ["TmP_7"] ["START[3]"] ["TmP_50"] ,
        _and 1 "DP_FPU.v:793" ["TmP_5"] ["divi_pipe1"] ["extdata"] ,
        _and 1 "DP_FPU.v:804" ["TmP_15"] ["START[3]"] ["ist_null"] ,
        _and 32 "DP_FPU.v:824" ["TmP_24[31:0]"] ["extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata", "extdata"] ["ivalue[31:0]"] ,
        _and 1 "DP_FPU.v:826" ["valdata"] ["extdata"] ["TmP_50"] ,
        _and 1 "DP_FPU.v:834" ["TmP_33"] ["extdata"] ["ist_null"] ,
        _and 1 "DP_FPU.v:834" ["TmP_22"] ["TmP_33"] ["divi_pipe1"] ,
        _and 1 "DP_FPU.v:867" ["TmP_34"] ["divi_pipe3"] ["TmP_52"] ,
        _and 1 "DP_FPU.v:875" ["TmP_10"] ["divi_pipe3"] ["stop_divi"] ,
        _and 1 "DP_FPU.v:880" ["TmP_29"] ["neg_flag"] ["TmP_53"] ,
        _and 1 "DP_FPU.v:892" ["TmP_35"] ["sub_case"] ["TmP_54"] ,
        _and 1 "DP_FPU.v:898" ["TmP_36"] ["negativ"] ["rest_null"] ,
        _and 1 "DP_FPU.v:917" ["TmP_37"] ["TmP_55"] ["runflag"] ,
        _and 1 "DP_FPU.v:919" ["TmP_38"] ["ende"] ["runflag"] ,
        _and 1 "DP_FPU.v:973" ["short"] ["TmP_45"] ["runflag"] ,
        _and 1 "DP_FPU.v:975" ["TmP_39"] ["TmP_103"] ["runflag"] ,
        _and 1 "DP_FPU.v:977" ["sign"] ["TmP_106"] ["TmP_56"] ,
        _and 1 "DP_FPU.v:978" ["zero"] ["SRCFLAGS[2]"] ["TmP_57"] ,
        _and 1 "DP_FPU.v:979" ["TmP_40"] ["SRCFLAGS[2]"] ["SRCFLAGS[0]"] ,
        _and 1 "DP_FPU.v:982" ["TmP_41"] ["TmP_46"] ["TmP_56"] ,
        _and 1 "DP_FPU.v:982" ["orlow_d"] ["TmP_41"] ["TmP_58"] ,
        _and 1 "DP_FPU.v:983" ["orlow_s"] ["TmP_47"] ["TmP_56"] ,
        _logic_reduce_or 2 "" ["TmP_42"] ["TmP_81", "TmP_43"],
        _logic_not 5 "DP_FPU.v:873" ["stop_divi"] ["divi_counter[4:0]"],
        _logic_not 32 "DP_FPU.v:878" ["rest_null"] ["divreg[33:2]"],
        _land 1 "DP_FPU.v:996" ["TmP_44"] ["ende"] ["runflag"],
        _logic_reduce_bool 4 "DP_FPU.v:973" ["TmP_45"] ["SRCFLAGS[3:0]"],
        _logic_reduce_bool 30 "DP_FPU.v:982" ["TmP_46"] ["divreg[56:27]"],
        _logic_reduce_bool 25 "DP_FPU.v:983" ["TmP_47"] ["divreg[26:2]"],
        _logic_reduce_bool 2 "DP_FPU.v:986" ["TmP_48"] ["divsr[1:0]"],
        _not 1 "DP_FPU.v:785" ["TmP_49"] ["START[1]"],
        _not 1 "DP_FPU.v:790" ["TmP_51"] ["divi_pipe4"],
        _not 1 "DP_FPU.v:826" ["TmP_50"] ["ist_null"],
        _not 1 "DP_FPU.v:871" ["TmP_52"] ["stop_divi"],
        _not 1 "DP_FPU.v:880" ["TmP_53"] ["nul_src2"],
        _not 1 "DP_FPU.v:892" ["TmP_54"] ["rest_null"],
        _not 1 "DP_FPU.v:917" ["TmP_55"] ["ende"],
        _not 1 "DP_FPU.v:978" ["TmP_57"] ["SRCFLAGS[0]"],
        _not 1 "DP_FPU.v:982" ["TmP_58"] ["FL"],
        _not 1 "DP_FPU.v:983" ["TmP_56"] ["zero"],
        _or 1 "DP_FPU.v:790" ["TmP_25"] ["TmP_7"] ["TmP_32"] ,
        _or 1 "DP_FPU.v:798" ["TmP_28"] ["START[3]"] ["divi_pipe1"] ,
        _or 1 "DP_FPU.v:801" ["TmP_59"] ["extdata"] ["START[0]"] ,
        _or 2 "DP_FPU.v:837" ["TmP_60[1:0]"] ["addoff[1:0]"] ["i_out[36:35]"] ,
        _or 1 "DP_FPU.v:867" ["TmP_9"] ["divi_pipe2"] ["TmP_34"] ,
        _or 1 "DP_FPU.v:917" ["TmP_26"] ["START[2]"] ["TmP_37"] ,
        _or 1 "DP_FPU.v:919" ["TmP_3"] ["TmP_38"] ["divi_pipe4"] ,
        _or 1 "DP_FPU.v:921" ["TmP_61"] ["FL"] ["run_divi"] ,
        _or 1 "DP_FPU.v:924" ["load_src1"] ["START[2]"] ["divi_pipe1"] ,
        _or 1 "DP_FPU.v:935" ["load_src2"] ["START[2]"] ["divi_pipe2"] ,
        _or 1 "DP_FPU.v:969" ["TmP_62"] ["DEI_OVF[0]"] ["TmP_102"] ,
        _or 1 "DP_FPU.v:975" ["TmP_63"] ["divsr[26]"] ["divsr[25]"] ,
        _or 1 "DP_FPU.v:975" ["TmP_64"] ["divsr[56]"] ["divsr[55]"] ,
        _or 1 "DP_FPU.v:975" ["ende"] ["TmP_39"] ["short"] ,
        _or 1 "DP_FPU.v:979" ["TmP_65"] ["SRCFLAGS[3]"] ["SRCFLAGS[1]"] ,
        _or 1 "DP_FPU.v:979" ["nan"] ["TmP_65"] ["TmP_40"] ,
        _or 1 "DP_FPU.v:985" ["restlsb"] ["divsr[0]"] ["orlow_s"] ,
        _or 1 "DP_FPU.v:986" ["TmP_66"] ["TmP_48"] ["orlow_s"] ,
        _or 1 "DP_FPU.v:986" ["restlow"] ["TmP_66"] ["orlow_d"] ,
        _or 1 "DP_FPU.v:987" ["resthigh"] ["divsr[2]"] ["restlow"] ,
        _dff 70 "DP_FPU.v:995" ["OUT[69:0]"] ["BCLK"] ["TmP_4[69:0]"],
        _dff 13 "DP_FPU.v:989" ["exponent[12:0]"] ["BCLK"] ["TmP_16[12:0]"],
        _dff 1 "DP_FPU.v:971" ["DEI_OVF[1]"] ["BCLK"] ["divi_pipe4"],
        _dff 1 "DP_FPU.v:967" ["DEI_OVF[0]"] ["BCLK"] ["TmP_0"],
        _dff 57 "DP_FPU.v:954" ["divsr[56:0]"] ["BCLK"] ["TmP_13[56:0]"],
        _dff 32 "DP_FPU.v:949" ["divreg_ext[31:0]"] ["BCLK"] ["TmP_12[31:0]"],
        _dff 57 "DP_FPU.v:937" ["divreg[56:0]"] ["BCLK"] ["TmP_11[56:0]"],
        _dff 33 "DP_FPU.v:929" ["save1[32:0]"] ["BCLK"] ["TmP_27[32:0]"],
        _dff 56 "DP_FPU.v:927" ["dreimal[55:0]"] ["BCLK"] ["TmP_14[55:0]"],
        _dff 1 "DP_FPU.v:919" ["DONE"] ["BCLK"] ["TmP_3"],
        _adff 1 "DP_FPU.v:914" ["runflag"] ["BRST"] ["BCLK"] ["TmP_26"],
        _dff 32 "DP_FPU.v:903" ["DIVI_OUT[31:0]"] ["BCLK"] ["TmP_1[31:0]"],
        _dff 32 "DP_FPU.v:900" ["DIVI_OUT[63:32]"] ["BCLK"] ["TmP_2[31:0]"],
        _dff 1 "DP_FPU.v:896" ["negativ"] ["BCLK"] ["divi_result[32]"],
        _dff 1 "DP_FPU.v:880" ["sub_case"] ["BCLK"] ["TmP_29"],
        _dff 1 "DP_FPU.v:875" ["divi_pipe4"] ["BCLK"] ["TmP_10"],
        _dff 5 "DP_FPU.v:869" ["divi_counter[4:0]"] ["BCLK"] ["TmP_6[4:0]"],
        _adff 1 "DP_FPU.v:864" ["divi_pipe3"] ["BRST"] ["BCLK"] ["TmP_9"],
        _dff 6 "DP_FPU.v:836" ["msb_src2[5:0]"] ["BCLK"] ["TmP_19[5:0]"],
        _dff 1 "DP_FPU.v:834" ["next_msb2"] ["BCLK"] ["TmP_22"],
        _dff 32 "DP_FPU.v:824" ["pipe_reg[31:0]"] ["BCLK"] ["TmP_24[31:0]"],
        _dff 32 "DP_FPU.v:821" ["ivalue[31:0]"] ["BCLK"] ["i_out[31:0]"],
        _dff 1 "DP_FPU.v:814" ["neg_src2"] ["BCLK"] ["TmP_21"],
        _dff 1 "DP_FPU.v:814" ["nul_src2"] ["BCLK"] ["TmP_23"],
        _dff 1 "DP_FPU.v:807" ["neg_src1"] ["BCLK"] ["TmP_20"],
        _dff 5 "DP_FPU.v:807" ["msb_src1[4:0]"] ["BCLK"] ["TmP_18[4:0]"],
        _dff 1 "DP_FPU.v:805" ["DVZ_TRAP"] ["BCLK"] ["dvz_pipe"],
        _dff 1 "DP_FPU.v:804" ["dvz_pipe"] ["BCLK"] ["TmP_15"],
        _dff 1 "DP_FPU.v:798" ["sel_in"] ["BCLK"] ["TmP_28"],
        _dff 32 "DP_FPU.v:796" ["src2_reg[31:0]"] ["BCLK"] ["SRC2[31:0]"],
        _dff 1 "DP_FPU.v:794" ["divi_pipe2"] ["BCLK"] ["TmP_8"],
        _dff 1 "DP_FPU.v:793" ["dei_pipe"] ["BCLK"] ["TmP_5"],
        _dff 1 "DP_FPU.v:792" ["divi_pipe1"] ["BCLK"] ["TmP_7"],
        _adff 1 "DP_FPU.v:787" ["run_divi"] ["BRST"] ["BCLK"] ["TmP_25"],
        _dff 1 "DP_FPU.v:785" ["extdata"] ["BCLK"] ["TmP_17"],
        _pmux 70 4 "DP_FPU.v:1001|DP_FPU.v:997" ["TmP_67[69:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["nan", "zero", "sign", "expoh[9:7]", "expoh[7]", "expoh[7]", "expoh[7:0]", "divsr[25:3]", "0b0000000000000000000000000000", "divsr[3:2]", "restlow", "nan", "zero", "sign", "expol[9:7]", "expol[7]", "expol[7]", "expol[7:0]", "divsr[24:2]", "0b0000000000000000000000000000", "divsr[2:1]", "restlsb", "nan", "zero", "sign", "expoh[12:0]", "divsr[55:3]", "resthigh", "nan", "zero", "sign", "expol[12:0]", "divsr[54:2]", "restlow"] ["TmP_71", "TmP_70", "TmP_69", "TmP_68"],
        _logic_not 2 "DP_FPU.v:1001|DP_FPU.v:997" ["TmP_68"] ["FL", "divsr[56]"],
        _eq 2 "DP_FPU.v:1000|DP_FPU.v:997" ["TmP_69"] ["FL", "divsr[56]"] ["0b01"] ,
        _eq 2 "DP_FPU.v:999|DP_FPU.v:997" ["TmP_70"] ["FL", "divsr[26]"] ["0b10"] ,
        _eq 2 "DP_FPU.v:998|DP_FPU.v:997" ["TmP_71"] ["FL", "divsr[26]"] ["0b11"] ,
        _mux 70 "DP_FPU.v:996" ["TmP_4[69:0]"] ["OUT[69:0]"] ["TmP_67[69:0]"] ["TmP_44"],
        _mux 13 "DP_FPU.v:989" ["TmP_16[12:0]"] ["exponent[12:0]"] ["TmP_104[12:0]"] ["START[0]"],
        _mux 1 "DP_FPU.v:968" ["TmP_0"] ["TmP_62"] ["0b0"] ["load_src2"],
        _pmux 57 3 "DP_FPU.v:961|DP_FPU.v:958" ["TmP_72[56:0]"] ["divsr[54:0]", "0b00"] ["divsr[54:0]", "0b11", "divsr[54:0]", "0b10", "divsr[54:0]", "0b01"] ["TmP_75", "TmP_74", "TmP_73"],
        _mux 57 "DP_FPU.v:955" ["TmP_13[56:0]"] ["TmP_72[56:0]"] ["0b000000000000000000000000000000000000000000000000000000000"] ["load_src2"],
        _mux 32 "DP_FPU.v:950" ["TmP_12[31:0]"] ["divreg_ext[29:0]", "0b00"] ["TmP_100[31:0]"] ["load_src2"],
        _pmux 57 3 "DP_FPU.v:944|DP_FPU.v:941" ["TmP_76[56:0]"] ["divreg[54:0]", "divreg_ext[31:30]"] ["sub3[54:0]", "divreg_ext[31:30]", "sub2[54:0]", "divreg_ext[31:30]", "sub1[54:0]", "divreg_ext[31:30]"] ["TmP_75", "TmP_74", "TmP_73"],
        _eq 3 "DP_FPU.v:944|DP_FPU.v:941" ["TmP_73"] ["sub3[56]", "sub2[56]", "sub1[56]"] ["0b110"] ,
        _eq 2 "DP_FPU.v:943|DP_FPU.v:941" ["TmP_74"] ["sub3[56]", "sub2[56]"] ["0b10"] ,
        _not 1 "DP_FPU.v:942|DP_FPU.v:941" ["TmP_75"] ["sub3[56]"],
        _mux 57 "DP_FPU.v:938" ["TmP_11[56:0]"] ["TmP_76[56:0]"] ["TmP_99[56:0]"] ["load_src2"],
        _mux 33 "DP_FPU.v:929" ["TmP_27[32:0]"] ["save1[32:0]"] ["src_1[32:0]"] ["load_src1"],
        _mux 56 "DP_FPU.v:927" ["TmP_14[55:0]"] ["dreimal[55:0]"] ["TmP_31[55:0]"] ["load_src1"],
        _pmux 32 2 "DP_FPU.v:908|DP_FPU.v:906" ["dei_result[31:0]"] ["divsr[31:0]"] ["0bxxxxxxxxxxxxxxxx", "divsr[7:0]", "divreg[9:2]", "divsr[15:0]", "divreg[17:2]"] ["TmP_78", "TmP_77"],
        _eq 3 "DP_FPU.v:908|DP_FPU.v:906" ["TmP_77"] ["extdata", "BWD[1:0]"] ["0b001"] ,
        _logic_not 3 "DP_FPU.v:907|DP_FPU.v:906" ["TmP_78"] ["extdata", "BWD[1:0]"],
        _mux 32 "DP_FPU.v:903" ["TmP_1[31:0]"] ["DIVI_OUT[31:0]"] ["divreg[33:2]"] ["divi_pipe4"],
        _mux 32 "DP_FPU.v:901" ["TmP_2[31:0]"] ["DIVI_OUT[63:32]"] ["TmP_96[31:0]"] ["divi_pipe4"],
        _pmux 33 3 "DP_FPU.v:893|DP_FPU.v:889" ["divi_result[32:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["neg_src2", "divreg[33:2]", "neg_src1", "TmP_95[31:0]", "neg_flag", "divsr[31:0]"] ["TmP_80", "TmP_79", "TmP_42"],
        _eq 2 "DP_FPU.v:893|DP_FPU.v:889" ["TmP_43"] ["OPCODE[1:0]"] ["0b11"] ,
        _eq 2 "DP_FPU.v:892|DP_FPU.v:889" ["TmP_79"] ["OPCODE[1:0]"] ["0b10"] ,
        _eq 2 "DP_FPU.v:891|DP_FPU.v:889" ["TmP_80"] ["OPCODE[1:0]"] ["0b01"] ,
        _logic_not 2 "DP_FPU.v:890|DP_FPU.v:889" ["TmP_81"] ["OPCODE[1:0]"],
        _mux 5 "DP_FPU.v:870" ["TmP_6[4:0]"] ["TmP_91[4:0]"] ["shift_r[4:0]"] ["divi_pipe2"],
        _pmux 63 3 "DP_FPU.v:852|DP_FPU.v:849" ["din_mux[62:0]"] ["pipe_reg[30:0]", "ivalue[31:0]"] ["0b0000000000000000000000000000000", "ivalue[31:0]", "0b00000000000000000000000", "pipe_reg[31:0]", "ivalue[7:0]", "0b000000000000000", "pipe_reg[31:0]", "ivalue[15:0]"] ["TmP_84", "TmP_83", "TmP_82"],
        _eq 3 "DP_FPU.v:852|DP_FPU.v:849" ["TmP_82"] ["BWD[1:0]", "extdata"] ["0b011"] ,
        _eq 3 "DP_FPU.v:851|DP_FPU.v:849" ["TmP_83"] ["BWD[1:0]", "extdata"] ["0b001"] ,
        _logic_not 2 "DP_FPU.v:850|DP_FPU.v:849" ["TmP_84"] ["BWD[1]", "extdata"],
        _mux 6 "DP_FPU.v:839" ["TmP_85[5:0]"] ["msb_src2[5:0]"] ["0b0", "i_out[36:32]"] ["next_msb2"],
        _mux 6 "DP_FPU.v:837" ["TmP_19[5:0]"] ["TmP_85[5:0]"] ["addoff[2]", "TmP_60[1:0]", "i_out[34:32]"] ["divi_pipe1"],
        _pmux 3 2 "DP_FPU.v:830|DP_FPU.v:828" ["addoff[2:0]"] ["valdata", "0b00"] ["0b00", "valdata", "0b0", "valdata", "0b0"] ["TmP_87", "TmP_86"],
        _eq 2 "DP_FPU.v:830|DP_FPU.v:828" ["TmP_86"] ["BWD[1:0]"] ["0b01"] ,
        _logic_not 2 "DP_FPU.v:829|DP_FPU.v:828" ["TmP_87"] ["BWD[1:0]"],
        _mux 1 "DP_FPU.v:815" ["TmP_23"] ["nul_src2"] ["ist_null"] ["divi_pipe1"],
        _mux 1 "DP_FPU.v:815" ["TmP_21"] ["neg_src2"] ["i_out[37]"] ["divi_pipe1"],
        _mux 5 "DP_FPU.v:808" ["TmP_18[4:0]"] ["msb_src1[4:0]"] ["i_out[36:32]"] ["START[3]"],
        _mux 1 "DP_FPU.v:808" ["TmP_20"] ["neg_src1"] ["i_out[37]"] ["START[3]"],
        _mux 1 "DP_FPU.v:785" ["TmP_17"] ["extdata"] ["TmP_49"] ["START[3]"],
        _logic_reduce_or 2 "DP_FPU.v:969" ["TmP_88"] ["divsr[32]", "divsr[33]"],
        _logic_reduce_or 2 "DP_FPU.v:969" ["TmP_89"] ["divsr[16]", "divsr[17]"],
        _logic_reduce_or 2 "DP_FPU.v:969" ["TmP_90"] ["divsr[8]", "divsr[9]"],
        _sub 7 "DP_FPU.v:843" ["diff_msb[6:0]"] ["0b0", "msb_src2[5:0]"] ["0b00", "msb_src1[4:0]"] ,
        _sub 5 "DP_FPU.v:871" ["TmP_91[4:0]"] ["divi_counter[4:0]"] ["0b0000", "TmP_52"] ,
        _sub 32 "DP_FPU.v:892" ["TmP_92[31:0]"] ["save1[31:0]"] ["divreg[33:2]"] ,
        _sub 57 "DP_FPU.v:931" ["sub1[56:0]"] ["divreg[56:0]"] ["0b000", "man_1[20:0]", "save1[32:0]"] ,
        _sub 57 "DP_FPU.v:932" ["sub2[56:0]"] ["divreg[56:0]"] ["0b00", "man_1[20:0]", "save1[32:0]", "0b0"] ,
        _sub 57 "DP_FPU.v:933" ["sub3[56:0]"] ["divreg[56:0]"] ["0b0", "dreimal[55:0]"] ,
        _sub 13 "DP_FPU.v:989" ["TmP_93[12:0]"] ["0b00000", "SRC2[30:23]"] ["0b00000", "SRC1[30:23]"] ,
        _sub 13 "DP_FPU.v:990" ["TmP_94[12:0]"] ["0b00", "SRC2[30:20]"] ["0b00", "SRC1[30:20]"] ,
        _mux 1 "DP_FPU.v:794" ["TmP_8"] ["divi_pipe1"] ["dei_pipe"] ["extdata"],
        _mux 32 "DP_FPU.v:799" ["i_in[31:0]"] ["SRC1[31:0]"] ["src2_reg[31:0]"] ["sel_in"],
        _mux 5 "DP_FPU.v:846" ["shift_r[4:0]"] ["diff_msb[5:1]"] ["0b00000"] ["diff_msb[6]"],
        _mux 63 "DP_FPU.v:856" ["shift_2[62:0]"] ["din_mux[60:0]", "0b00"] ["din_mux[62:0]"] ["shift_r[0]"],
        _mux 63 "DP_FPU.v:857" ["shift_4[62:0]"] ["shift_2[58:0]", "0b0000"] ["shift_2[62:0]"] ["shift_r[1]"],
        _mux 63 "DP_FPU.v:858" ["shift_8[62:0]"] ["shift_4[54:0]", "0b00000000"] ["shift_4[62:0]"] ["shift_r[2]"],
        _mux 63 "DP_FPU.v:859" ["shift_16[62:0]"] ["shift_8[46:0]", "0b0000000000000000"] ["shift_8[62:0]"] ["shift_r[3]"],
        _mux 65 "DP_FPU.v:862" ["shift_32[64:0]"] ["shift_16[62:0]", "0b00"] ["0b0", "pipe_reg[31:0]", "ivalue[31:0]"] ["shift_r[4]"],
        _mux 32 "DP_FPU.v:892" ["TmP_95[31:0]"] ["divreg[33:2]"] ["TmP_92[31:0]"] ["TmP_35"],
        _mux 1 "DP_FPU.v:898" ["plus_1"] ["negativ"] ["TmP_36"] ["TmP_43"],
        _mux 32 "DP_FPU.v:901" ["TmP_96[31:0]"] ["dei_result[31:0]"] ["TmP_30[31:0]"] ["OPCODE[2]"],
        _mux 21 "DP_FPU.v:921" ["man_1[20:0]"] ["MAN1[20:0]"] ["0b000000000000000000000"] ["TmP_61"],
        _mux 33 "DP_FPU.v:922" ["TmP_97[32:0]"] ["SRC1[31:0]", "0b0"] ["0b0000000001", "SRC1[22:0]"] ["FL"],
        _mux 33 "DP_FPU.v:922" ["src_1[32:0]"] ["TmP_97[32:0]"] ["0b0", "ivalue[31:0]"] ["run_divi"],
        _mux 57 "DP_FPU.v:938" ["TmP_98[56:0]"] ["0b000", "MAN2[20:0]", "SRC2[31:0]", "0b0"] ["0b0000000000000000000000000000000001", "SRC2[22:0]"] ["FL"],
        _mux 57 "DP_FPU.v:938" ["TmP_99[56:0]"] ["TmP_98[56:0]"] ["0b000000000000000000000000", "shift_32[64:32]"] ["divi_pipe2"],
        _mux 32 "DP_FPU.v:950" ["TmP_100[31:0]"] ["0b00000000000000000000000000000000"] ["shift_32[31:0]"] ["divi_pipe2"],
        _mux 1 "DP_FPU.v:969" ["TmP_101"] ["TmP_90"] ["TmP_89"] ["BWD[0]"],
        _mux 1 "DP_FPU.v:969" ["TmP_102"] ["TmP_101"] ["TmP_88"] ["BWD[1]"],
        _mux 1 "DP_FPU.v:975" ["TmP_103"] ["TmP_64"] ["TmP_63"] ["FL"],
        _mux 13 "DP_FPU.v:990" ["TmP_104[12:0]"] ["TmP_94[12:0]"] ["TmP_93[12:0]"] ["FL"],
        _mux 13 "DP_FPU.v:991" ["offset[12:0]"] ["0b0001111111110"] ["0b0000001111110"] ["FL"],
        _xor 1 "DP_FPU.v:877" ["neg_flag"] ["neg_src1"] ["neg_src2"] ,
        _xor 32 "DP_FPU.v:901" ["TmP_105[31:0]"] ["negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ", "negativ"] ["divi_result[31:0]"] ,
        _xor 1 "DP_FPU.v:977" ["TmP_106"] ["SRCFLAGS[4]"] ["SRCFLAGS[5]"] ,
        DIVI_PREP [("instance", "prep_inst"), ("src", "DP_FPU.v:801")] [
                ("BWD[1:0]",["BWD[1:0]"]),
                ("DOUT[31:0]",["i_out[31:0]"]),
                ("EXTDATA",["TmP_59"]),
                ("MINUS",["i_out[37]"]),
                ("MSB[4:0]",["i_out[36:32]"]),
                ("NOT_DEI",["OPCODE[2]"]),
                ("NULL",["ist_null"]),
                ("SRC[31:0]",["i_in[31:0]"])],
        _buf 1 "DP_FPU.v:760" ["not_dei"] ["OPCODE[2]"]
    ] in
    PINST "draw_hier DFPU_DIV" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DFPU_MISC {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "START[1:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "MAN2[19:0]",
                 "SRCFLAGS[5:0]",
                 "MODE[3:0]" ] in
    let outs = [ "OUT[69:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[69:0]",
                 "TmP_1[63:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[10:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22[9:0]",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29[3:0]",
                 "TmP_3",
                 "TmP_30[3:0]",
                 "TmP_31[12:0]",
                 "TmP_32[12:0]",
                 "TmP_33[10:0]",
                 "TmP_34[10:0]",
                 "TmP_35[3:0]",
                 "TmP_36",
                 "TmP_37[10:0]",
                 "TmP_38[1:0]",
                 "TmP_39[69:0]",
                 "TmP_4",
                 "TmP_5[3:0]",
                 "TmP_6[10:0]",
                 "TmP_7",
                 "TmP_8[9:0]",
                 "TmP_9[12:0]",
                 "addexp[12:0]",
                 "calc_exp[4:0]",
                 "daten[63:0]",
                 "dexpo[10:0]",
                 "dvorz",
                 "finexp[12:0]",
                 "fl_lf[69:0]",
                 "huge",
                 "lexpo[12:0]",
                 "logb_exp[6:0]",
                 "logb_res[69:0]",
                 "nan",
                 "newexp[12:0]",
                 "posi_1",
                 "posi_2",
                 "posi_4",
                 "posi_8",
                 "rshift[3:0]",
                 "scalb_res[69:0]",
                 "sel_data[9:0]",
                 "sexpo[12:0]",
                 "shf_r0[10:0]",
                 "shf_r1[10:0]",
                 "shf_r2[10:0]",
                 "shf_r4[10:0]",
                 "shf_r8[10:0]",
                 "shift_l[8:0]",
                 "shift_l2[9:0]",
                 "shift_l4[9:0]",
                 "shift_l8[9:0]",
                 "sign",
                 "svorz",
                 "unbiased[9:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _mux 1 "DP_FPU.v:550" ["TmP_36"] ["TmP_13"] ["TmP_11"] ["MODE[1]"],
        _mux 11 "DP_FPU.v:553" ["TmP_37[10:0]"] ["SRC2[30:20]"] ["0b000", "SRC2[30:23]"] ["MODE[1]"],
        _mux 11 "DP_FPU.v:556" ["shf_r1[10:0]"] ["shf_r0[10:0]"] ["0b0", "shf_r0[10:1]"] ["rshift[0]"],
        _mux 11 "DP_FPU.v:557" ["shf_r2[10:0]"] ["shf_r1[10:0]"] ["0b00", "shf_r1[10:2]"] ["rshift[1]"],
        _mux 11 "DP_FPU.v:558" ["shf_r4[10:0]"] ["shf_r2[10:0]"] ["0b0000", "shf_r2[10:4]"] ["rshift[2]"],
        _mux 11 "DP_FPU.v:559" ["shf_r8[10:0]"] ["shf_r4[10:0]"] ["0b00000000", "shf_r4[10:8]"] ["rshift[3]"],
        _mux 13 "DP_FPU.v:561" ["addexp[12:0]"] ["TmP_9[12:0]"] ["TmP_31[12:0]"] ["svorz"],
        _mux 13 "DP_FPU.v:563" ["newexp[12:0]"] ["addexp[12:0]"] ["addexp[9:7]", "addexp[7]", "addexp[7]", "addexp[7:0]"] ["MODE[1]"],
        _mux 2 "DP_FPU.v:566" ["TmP_38[1:0]"] ["newexp[12:11]"] ["svorz", "0b1"] ["huge"],
        _mux 13 "DP_FPU.v:566" ["finexp[12:0]"] ["TmP_38[1:0]", "newexp[10:0]"] ["0b000", "newexp[9:0]"] ["SRCFLAGS[2]"],
        _mux 70 "DP_FPU.v:572" ["scalb_res[69:0]"] ["nan", "SRCFLAGS[2]", "dvorz", "finexp[12:0]", "MAN2[19:0]", "daten[31:0]", "0b00"] ["nan", "SRCFLAGS[2]", "daten[31]", "finexp[12:0]", "daten[22:0]", "daten[28:0]", "0b00"] ["MODE[1]"],
        _mux 70 "DP_FPU.v:576" ["TmP_39[69:0]"] ["scalb_res[69:0]"] ["SRCFLAGS[1]", "0b0", "logb_res[67]", "0b00", "logb_exp[6:0]", "calc_exp[3:0]", "shift_l[8:0]", "0b000000000000000000000000000000000000000000000"] ["MODE[2]"],
        _mux 70 "DP_FPU.v:576" ["TmP_0[69:0]"] ["fl_lf[69:0]"] ["TmP_39[69:0]"] ["MODE[3]"],
        _add 13 "DP_FPU.v:496" ["lexpo[12:0]"] ["0b00000", "daten[62:55]"] ["0b0001110000000"] ,
        _add 10 "DP_FPU.v:513" ["TmP_8[9:0]"] ["sel_data[9:0]"] ["0b0000000001"] ,
        _add 13 "DP_FPU.v:561" ["TmP_9[12:0]"] ["0b00", "dexpo[10:0]"] ["0b00", "shf_r8[10:0]"] ,
        _and 1 "DP_FPU.v:546" ["TmP_10"] ["TmP_14"] ["TmP_24"] ,
        _and 1 "DP_FPU.v:549" ["TmP_11"] ["SRC1[30]"] ["TmP_26"] ,
        _and 1 "DP_FPU.v:550" ["TmP_12"] ["SRC1[23]"] ["TmP_27"] ,
        _and 1 "DP_FPU.v:550" ["TmP_13"] ["SRC1[30]"] ["TmP_28"] ,
        _logic_not 8 "DP_FPU.v:516" ["posi_8"] ["unbiased[9:2]"],
        _logic_not 4 "DP_FPU.v:518" ["posi_4"] ["shift_l8[9:6]"],
        _logic_not 2 "DP_FPU.v:520" ["posi_2"] ["shift_l4[9:8]"],
        _eq 7 "DP_FPU.v:546" ["TmP_14"] ["SRC1[29:23]"] ["0b1111111"] ,
        _eq 3 "DP_FPU.v:546" ["TmP_15"] ["SRC1[22:20]"] ["0b111"] ,
        _eq 3 "DP_FPU.v:549" ["TmP_16"] ["SRC1[25:23]"] ["0b111"] ,
        _gt 11 "DP_FPU.v:498" ["TmP_17"] ["daten[62:52]"] ["0b10001111110"] ,
        _lt 11 "DP_FPU.v:499" ["TmP_18"] ["daten[62:52]"] ["0b01110000001"] ,
        _logic_reduce_bool 28 "DP_FPU.v:502" ["TmP_19"] ["daten[27:0]"],
        _logic_reduce_bool 4 "DP_FPU.v:549" ["TmP_20"] ["SRC1[29:26]"],
        _logic_reduce_bool 6 "DP_FPU.v:550" ["TmP_21"] ["SRC1[29:24]"],
        _not 10 "DP_FPU.v:513" ["TmP_22[9:0]"] ["sel_data[9:0]"],
        _not 1 "DP_FPU.v:522" ["posi_1"] ["shift_l2[9]"],
        _not 1 "DP_FPU.v:528" ["TmP_23"] ["calc_exp[4]"],
        _not 1 "DP_FPU.v:530" ["logb_res[67]"] ["daten[62]"],
        _or 1 "DP_FPU.v:546" ["TmP_24"] ["MODE[1]"] ["TmP_15"] ,
        _or 1 "DP_FPU.v:546" ["TmP_25"] ["SRC1[30]"] ["TmP_10"] ,
        _or 1 "DP_FPU.v:549" ["TmP_26"] ["TmP_20"] ["TmP_16"] ,
        _or 1 "DP_FPU.v:550" ["TmP_27"] ["SRC1[22]"] ["SRC1[21]"] ,
        _or 1 "DP_FPU.v:550" ["TmP_28"] ["TmP_21"] ["TmP_12"] ,
        _or 1 "DP_FPU.v:568" ["nan"] ["SRCFLAGS[3]"] ["SRCFLAGS[1]"] ,
        _dff 70 "DP_FPU.v:576" ["OUT[69:0]"] ["BCLK"] ["TmP_0[69:0]"],
        _dff 4 "DP_FPU.v:543" ["rshift[3:0]"] ["BCLK"] ["TmP_5[3:0]"],
        _dff 11 "DP_FPU.v:543" ["shf_r0[10:0]"] ["BCLK"] ["TmP_6[10:0]"],
        _dff 11 "DP_FPU.v:543" ["dexpo[10:0]"] ["BCLK"] ["TmP_2[10:0]"],
        _dff 1 "DP_FPU.v:543" ["huge"] ["BCLK"] ["TmP_4"],
        _dff 1 "DP_FPU.v:543" ["svorz"] ["BCLK"] ["TmP_7"],
        _dff 1 "DP_FPU.v:543" ["dvorz"] ["BCLK"] ["TmP_3"],
        _dff 64 "DP_FPU.v:491" ["daten[63:0]"] ["BCLK"] ["TmP_1[63:0]"],
        _mux 1 "DP_FPU.v:544" ["TmP_3"] ["dvorz"] ["SRC2[31]"] ["START[0]"],
        _mux 1 "DP_FPU.v:544" ["TmP_7"] ["svorz"] ["SRC1[31]"] ["START[0]"],
        _mux 1 "DP_FPU.v:544" ["TmP_4"] ["huge"] ["TmP_36"] ["START[0]"],
        _mux 11 "DP_FPU.v:544" ["TmP_2[10:0]"] ["dexpo[10:0]"] ["TmP_37[10:0]"] ["START[0]"],
        _mux 11 "DP_FPU.v:544" ["TmP_6[10:0]"] ["shf_r0[10:0]"] ["TmP_34[10:0]"] ["START[0]"],
        _mux 4 "DP_FPU.v:544" ["TmP_5[3:0]"] ["rshift[3:0]"] ["TmP_35[3:0]"] ["START[0]"],
        _mux 64 "DP_FPU.v:491" ["TmP_1[63:0]"] ["daten[63:0]"] ["SRC1[31:0]", "SRC2[31:0]"] ["START[1]"],
        _sub 5 "DP_FPU.v:525" ["calc_exp[4:0]"] ["0b01000"] ["0b0", "posi_8", "posi_4", "posi_2", "posi_1"] ,
        _sub 4 "DP_FPU.v:548" ["TmP_29[3:0]"] ["0b0110"] ["SRC1[26:23]"] ,
        _sub 4 "DP_FPU.v:548" ["TmP_30[3:0]"] ["0b1001"] ["SRC1[23:20]"] ,
        _sub 13 "DP_FPU.v:561" ["TmP_31[12:0]"] ["0b00", "dexpo[10:0]"] ["0b00", "shf_r8[10:0]"] ,
        _mux 13 "DP_FPU.v:499" ["TmP_32[12:0]"] ["0b00", "daten[62]", "daten[62]", "daten[62]", "daten[62]", "daten[58:52]"] ["0b0000000000000"] ["TmP_18"],
        _mux 13 "DP_FPU.v:499" ["sexpo[12:0]"] ["TmP_32[12:0]"] ["0b0111111111111"] ["TmP_17"],
        _mux 70 "DP_FPU.v:502" ["fl_lf[69:0]"] ["SRCFLAGS[1:0]", "daten[63]", "sexpo[12:0]", "daten[51:29]", "0b0000000000000000000000000000", "daten[29:28]", "TmP_19"] ["SRCFLAGS[1:0]", "daten[63]", "lexpo[12:0]", "daten[54:32]", "0b0000000000000000000000000000000"] ["MODE[0]"],
        _mux 10 "DP_FPU.v:512" ["sel_data[9:0]"] ["daten[61:52]"] ["logb_res[67]", "logb_res[67]", "logb_res[67]", "daten[61:55]"] ["MODE[1]"],
        _mux 10 "DP_FPU.v:513" ["unbiased[9:0]"] ["TmP_22[9:0]"] ["TmP_8[9:0]"] ["daten[62]"],
        _mux 10 "DP_FPU.v:517" ["shift_l8[9:0]"] ["unbiased[9:0]"] ["unbiased[1:0]", "0b00000000"] ["posi_8"],
        _mux 10 "DP_FPU.v:519" ["shift_l4[9:0]"] ["shift_l8[9:0]"] ["shift_l8[5:0]", "0b0000"] ["posi_4"],
        _mux 10 "DP_FPU.v:521" ["shift_l2[9:0]"] ["shift_l4[9:0]"] ["shift_l4[7:0]", "0b00"] ["posi_2"],
        _mux 9 "DP_FPU.v:523" ["shift_l[8:0]"] ["shift_l2[7:0]", "0b0"] ["shift_l2[8:0]"] ["shift_l2[9]"],
        _mux 7 "DP_FPU.v:528" ["logb_exp[6:0]"] ["TmP_23", "calc_exp[4]", "calc_exp[4]", "calc_exp[4]", "calc_exp[4]", "calc_exp[4]", "calc_exp[4]"] ["TmP_23", "TmP_23", "TmP_23", "TmP_23", "calc_exp[4]", "calc_exp[4]", "calc_exp[4]"] ["MODE[1]"],
        _mux 11 "DP_FPU.v:547" ["TmP_33[10:0]"] ["0b1", "SRC1[19:10]"] ["0b0001", "SRC1[22:16]"] ["MODE[1]"],
        _mux 11 "DP_FPU.v:547" ["TmP_34[10:0]"] ["0b00000000000"] ["TmP_33[10:0]"] ["TmP_25"],
        _mux 4 "DP_FPU.v:548" ["TmP_35[3:0]"] ["TmP_30[3:0]"] ["TmP_29[3:0]"] ["MODE[1]"],
        _buf 69 "" ["logb_res[69:68]", "logb_res[66:0]"] ["SRCFLAGS[1]", "0b000", "logb_exp[6:0]", "calc_exp[3:0]", "shift_l[8:0]", "0b000000000000000000000000000000000000000000000"],
        _buf 1 "DP_FPU.v:487" ["sign"] ["daten[63]"]
    ] in
    PINST "draw_hier DFPU_MISC" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DFPU_MUL {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "START",
                 "MRESULT[105:0]",
                 "SRCFLAGS[5:0]" ] in
    let outs = [ "OUT[69:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[69:0]",
                 "TmP_1[12:0]",
                 "TmP_2[12:0]",
                 "TmP_3",
                 "TmP_4",
                 "expoh[12:0]",
                 "expol[12:0]",
                 "exponent[12:0]",
                 "nan",
                 "orlow",
                 "resthigh[1:0]",
                 "restlow[1:0]",
                 "sign",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _or 1 "DP_FPU.v:602" ["nan"] ["SRCFLAGS[3]"] ["SRCFLAGS[1]"] ,
        _or 1 "DP_FPU.v:608" ["resthigh[0]"] ["MRESULT[51]"] ["orlow"] ,
        _dff 70 "DP_FPU.v:615" ["OUT[69:0]"] ["BCLK"] ["TmP_0[69:0]"],
        _dff 13 "DP_FPU.v:610" ["exponent[12:0]"] ["BCLK"] ["TmP_1[12:0]"],
        _mux 13 "DP_FPU.v:610" ["TmP_1[12:0]"] ["exponent[12:0]"] ["TmP_2[12:0]"] ["START"],
        _sub 13 "DP_FPU.v:612" ["expoh[12:0]"] ["exponent[12:0]"] ["0b0001111111110"] ,
        _sub 13 "DP_FPU.v:613" ["expol[12:0]"] ["exponent[12:0]"] ["0b0001111111111"] ,
        _mux 70 "DP_FPU.v:617" ["TmP_0[69:0]"] ["nan", "zero", "sign", "expol[12:0]", "MRESULT[103:51]", "orlow"] ["nan", "zero", "sign", "expoh[12:0]", "MRESULT[104:52]", "resthigh[0]"] ["MRESULT[105]"],
        _xor 1 "DP_FPU.v:603" ["TmP_4"] ["SRCFLAGS[5]"] ["SRCFLAGS[4]"] ,
        _add 13 "DP_FPU.v:610" ["TmP_2[12:0]"] ["0b00", "SRC1[30:20]"] ["0b00", "SRC2[30:20]"] ,
        _and 1 "DP_FPU.v:603" ["sign"] ["TmP_4"] ["TmP_3"] ,
        _logic_reduce_bool 51 "DP_FPU.v:605" ["orlow"] ["MRESULT[50:0]"],
        _not 1 "DP_FPU.v:603" ["TmP_3"] ["zero"],
        _or 1 "DP_FPU.v:601" ["zero"] ["SRCFLAGS[2]"] ["SRCFLAGS[0]"] ,
        _buf 1 "" ["resthigh[1]"] ["MRESULT[52]"],
        _buf 2 "DP_FPU.v:598" ["restlow[1:0]"] ["MRESULT[51]", "orlow"]
    ] in
    PINST "draw_hier DFPU_MUL" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DIVI_PREP {attrs::(string#string) list} conns =
    let inps = [ "SRC[31:0]",
                 "BWD[1:0]",
                 "NOT_DEI",
                 "EXTDATA" ] in
    let outs = [ "DOUT[31:0]",
                 "MSB[4:0]",
                 "NULL",
                 "MINUS" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12[31:0]",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "dnonz[7:0]",
                 "double[31:0]",
                 "lbits[7:0]",
                 "mbits[7:0]",
                 "modus[1:0]",
                 "select[2:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 32 "DP_FPU.v:671" ["DOUT[31:0]"] ["TmP_12[31:0]"] ["0b0000000000000000000000000000000", "MINUS"] ,
        _and 1 "DP_FPU.v:664" ["TmP_0"] ["SRC[7]"] ["NOT_DEI"] ,
        _and 1 "DP_FPU.v:665" ["TmP_1"] ["SRC[15]"] ["NOT_DEI"] ,
        _and 1 "DP_FPU.v:669" ["MINUS"] ["double[31]"] ["NOT_DEI"] ,
        _logic_not 8 "DP_FPU.v:696" ["NULL"] ["dnonz[7:0]"],
        _or 1 "DP_FPU.v:660" ["TmP_2"] ["NOT_DEI"] ["EXTDATA"] ,
        _or 1 "DP_FPU.v:660" ["TmP_3"] ["BWD[1]"] ["BWD[0]"] ,
        _pmux 3 7 "DP_FPU.v:692|DP_FPU.v:685" ["select[2:0]"] ["0b000"] ["0b111110101100011010001"] ["dnonz[7]", "TmP_9", "TmP_8", "TmP_7", "TmP_6", "TmP_5", "TmP_4"],
        _eq 7 "DP_FPU.v:692|DP_FPU.v:685" ["TmP_4"] ["dnonz[7:1]"] ["0b0000001"] ,
        _eq 6 "DP_FPU.v:691|DP_FPU.v:685" ["TmP_5"] ["dnonz[7:2]"] ["0b000001"] ,
        _eq 5 "DP_FPU.v:690|DP_FPU.v:685" ["TmP_6"] ["dnonz[7:3]"] ["0b00001"] ,
        _eq 4 "DP_FPU.v:689|DP_FPU.v:685" ["TmP_7"] ["dnonz[7:4]"] ["0b0001"] ,
        _eq 3 "DP_FPU.v:688|DP_FPU.v:685" ["TmP_8"] ["dnonz[7:5]"] ["0b001"] ,
        _eq 2 "DP_FPU.v:687|DP_FPU.v:685" ["TmP_9"] ["dnonz[7:6]"] ["0b01"] ,
        _pmux 32 3 "DP_FPU.v:666|DP_FPU.v:663" ["double[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "TmP_0", "SRC[7:0]", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "TmP_1", "SRC[15:0]", "SRC[31:0]"] ["TmP_11", "TmP_10", "modus[1]"],
        _eq 2 "DP_FPU.v:665|DP_FPU.v:663" ["TmP_10"] ["modus[1:0]"] ["0b01"] ,
        _logic_not 2 "DP_FPU.v:664|DP_FPU.v:663" ["TmP_11"] ["modus[1:0]"],
        _shr 1 8 3 "DP_FPU.v:698" ["MSB[0]"] ["lbits[7:0]"] ["select[2:0]"],
        _shr 1 8 3 "DP_FPU.v:698" ["MSB[1]"] ["mbits[7:0]"] ["select[2:0]"],
        _mux 2 "DP_FPU.v:660" ["modus[1:0]"] ["TmP_3", "0b1"] ["BWD[1:0]"] ["TmP_2"],
        _xor 32 "DP_FPU.v:671" ["TmP_12[31:0]"] ["MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS", "MINUS"] ["double[31:0]"] ,
        SCANDIG [("instance", "digit_0"), ("src", "DP_FPU.v:675")] [
                ("DIN[3:0]",["DOUT[3:0]"]),
                ("LBIT",["lbits[0]"]),
                ("MBIT",["mbits[0]"]),
                ("NONZ",["dnonz[0]"])],
        SCANDIG [("instance", "digit_1"), ("src", "DP_FPU.v:676")] [
                ("DIN[3:0]",["DOUT[7:4]"]),
                ("LBIT",["lbits[1]"]),
                ("MBIT",["mbits[1]"]),
                ("NONZ",["dnonz[1]"])],
        SCANDIG [("instance", "digit_2"), ("src", "DP_FPU.v:677")] [
                ("DIN[3:0]",["DOUT[11:8]"]),
                ("LBIT",["lbits[2]"]),
                ("MBIT",["mbits[2]"]),
                ("NONZ",["dnonz[2]"])],
        SCANDIG [("instance", "digit_3"), ("src", "DP_FPU.v:678")] [
                ("DIN[3:0]",["DOUT[15:12]"]),
                ("LBIT",["lbits[3]"]),
                ("MBIT",["mbits[3]"]),
                ("NONZ",["dnonz[3]"])],
        SCANDIG [("instance", "digit_4"), ("src", "DP_FPU.v:679")] [
                ("DIN[3:0]",["DOUT[19:16]"]),
                ("LBIT",["lbits[4]"]),
                ("MBIT",["mbits[4]"]),
                ("NONZ",["dnonz[4]"])],
        SCANDIG [("instance", "digit_5"), ("src", "DP_FPU.v:680")] [
                ("DIN[3:0]",["DOUT[23:20]"]),
                ("LBIT",["lbits[5]"]),
                ("MBIT",["mbits[5]"]),
                ("NONZ",["dnonz[5]"])],
        SCANDIG [("instance", "digit_6"), ("src", "DP_FPU.v:681")] [
                ("DIN[3:0]",["DOUT[27:24]"]),
                ("LBIT",["lbits[6]"]),
                ("MBIT",["mbits[6]"]),
                ("NONZ",["dnonz[6]"])],
        SCANDIG [("instance", "digit_7"), ("src", "DP_FPU.v:682")] [
                ("DIN[3:0]",["DOUT[31:28]"]),
                ("LBIT",["lbits[7]"]),
                ("MBIT",["mbits[7]"]),
                ("NONZ",["dnonz[7]"])],
        _buf 3 "" ["MSB[4:2]"] ["select[2:0]"]
    ] in
    PINST "draw_hier DIVI_PREP" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DMUX {attrs::(string#string) list} conns =
    let inps = [ "DRAM_Q[127:0]",
                 "ADDR[1:0]" ] in
    let outs = [ "CAP_Q[31:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _pmux 32 4 "ICACHE_SM.v:265|ICACHE_SM.v:261" ["CAP_Q[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["DRAM_Q[31:0]", "DRAM_Q[63:32]", "DRAM_Q[95:64]", "DRAM_Q[127:96]"] ["TmP_3", "TmP_2", "TmP_1", "TmP_0"],
        _eq 2 "ICACHE_SM.v:265|ICACHE_SM.v:261" ["TmP_0"] ["ADDR[1:0]"] ["0b11"] ,
        _eq 2 "ICACHE_SM.v:264|ICACHE_SM.v:261" ["TmP_1"] ["ADDR[1:0]"] ["0b10"] ,
        _eq 2 "ICACHE_SM.v:263|ICACHE_SM.v:261" ["TmP_2"] ["ADDR[1:0]"] ["0b01"] ,
        _logic_not 2 "ICACHE_SM.v:262|ICACHE_SM.v:261" ["TmP_3"] ["ADDR[1:0]"]
    ] in
    PINST "draw_hier DMUX" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DP_FPU {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "FL",
                 "BRESET",
                 "LD_OUT[1:0]",
                 "WR_REG",
                 "BWD[1:0]",
                 "FSR[5:0]",
                 "OPCODE[7:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "START[1:0]",
                 "CY_IN",
                 "COP_DONE",
                 "COP_OP[23:0]",
                 "COP_IN[63:0]" ] in
    let outs = [ "DONE",
                 "UP_DP",
                 "WREN_L",
                 "CLR_LSB",
                 "DVZ_TRAP",
                 "DP_CMP[2:0]",
                 "DP_OUT[31:0]",
                 "DP_Q[31:0]",
                 "TT_DP[4:0]",
                 "OVF_BCD[3:0]",
                 "COP_GO",
                 "COP_OUT[127:0]" ] in
    let ints = md_extract_vectors [ "DFLOAT",
                 "DOUT[63:0]",
                 "LOAD_LSD1",
                 "LOAD_LSD2",
                 "LOAD_MSD",
                 "LSD_1[31:0]",
                 "LSD_2[31:0]",
                 "MDA[52:0]",
                 "MDB[52:0]",
                 "MEI",
                 "MRESULT[105:0]",
                 "MSD_1[20:0]",
                 "MSD_2[20:0]",
                 "RCOPA[11:0]",
                 "RCOPB[11:0]",
                 "TmP_0[31:0]",
                 "TmP_1[31:0]",
                 "TmP_2[20:0]",
                 "TmP_3[31:0]",
                 "TmP_4[20:0]",
                 "TmP_5[11:0]",
                 "TmP_6[11:0]",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9[31:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        DP_LOGIK [("instance", "DOUBLE_U"), ("src", "DP_FPU.v:1394")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("BWD[1:0]",["BWD[1:0]"]),
                ("CLR_LSB",["CLR_LSB"]),
                ("COP_DONE",["COP_DONE"]),
                ("COP_GO",["COP_GO"]),
                ("COP_IN[63:0]",["COP_IN[63:0]"]),
                ("COP_OP[23:0]",["COP_OP[23:0]"]),
                ("CY_IN",["CY_IN"]),
                ("DFLOAT",["DFLOAT"]),
                ("DONE",["DONE"]),
                ("DOUT[63:0]",["DOUT[63:0]"]),
                ("DP_CMP[2:0]",["DP_CMP[2:0]"]),
                ("DVZ_TRAP",["DVZ_TRAP"]),
                ("FL",["FL"]),
                ("FSR[5:0]",["FSR[5:0]"]),
                ("MAN1[20:0]",["MDA[52:32]"]),
                ("MAN2[20:0]",["MDB[52:32]"]),
                ("MEI",["MEI"]),
                ("MRESULT[105:0]",["MRESULT[105:0]"]),
                ("OPCODE[7:0]",["OPCODE[7:0]"]),
                ("OVF_BCD[3:0]",["OVF_BCD[3:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("START[1:0]",["START[1:0]"]),
                ("TT_DP[4:0]",["TT_DP[4:0]"]),
                ("UP_DP",["UP_DP"]),
                ("WREN_L",["WREN_L"]),
                ("WR_REG",["WR_REG"])],
        PREPDATA [("instance", "DP_PREP"), ("src", "DP_FPU.v:1425")] [
                ("BWD[1:0]",["BWD[1:0]"]),
                ("DFLOAT",["DFLOAT"]),
                ("LOAD_LSD1",["LOAD_LSD1"]),
                ("LOAD_LSD2",["LOAD_LSD2"]),
                ("LOAD_MSD",["LOAD_MSD"]),
                ("LSD_1[31:0]",["LSD_1[31:0]"]),
                ("LSD_2[31:0]",["LSD_2[31:0]"]),
                ("MEI",["MEI"]),
                ("MSD_1[20:0]",["MSD_1[20:0]"]),
                ("MSD_2[20:0]",["MSD_2[20:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("START[1:0]",["START[1:0]"])],
        _lor 1 "DP_FPU.v:1444" ["TmP_7"] ["LD_OUT[1]"] ["LD_OUT[0]"],
        _lor 1 "DP_FPU.v:1444" ["TmP_8"] ["TmP_7"] ["WREN_L"],
        _mul 106 "DP_FPU.v:1440" ["MRESULT[105:0]"] (_SignExt 106 ["MDA[52:0]"]) (_SignExt 106 ["MDB[52:0]"]) ,
        _dff 21 "DP_FPU.v:1450" ["MDA[52:32]"] ["BCLK"] ["TmP_2[20:0]"],
        _dff 21 "DP_FPU.v:1450" ["MDB[52:32]"] ["BCLK"] ["TmP_4[20:0]"],
        _dff 12 "DP_FPU.v:1450" ["RCOPA[11:0]"] ["BCLK"] ["TmP_5[11:0]"],
        _dff 12 "DP_FPU.v:1450" ["RCOPB[11:0]"] ["BCLK"] ["TmP_6[11:0]"],
        _dff 32 "DP_FPU.v:1448" ["MDB[31:0]"] ["BCLK"] ["TmP_3[31:0]"],
        _dff 32 "DP_FPU.v:1446" ["MDA[31:0]"] ["BCLK"] ["TmP_1[31:0]"],
        _dff 32 "DP_FPU.v:1444" ["DP_Q[31:0]"] ["BCLK"] ["TmP_0[31:0]"],
        _mux 12 "DP_FPU.v:1451" ["TmP_6[11:0]"] ["RCOPB[11:0]"] ["SRC2[31:20]"] ["LOAD_MSD"],
        _mux 12 "DP_FPU.v:1451" ["TmP_5[11:0]"] ["RCOPA[11:0]"] ["SRC1[31:20]"] ["LOAD_MSD"],
        _mux 21 "DP_FPU.v:1451" ["TmP_4[20:0]"] ["MDB[52:32]"] ["MSD_2[20:0]"] ["LOAD_MSD"],
        _mux 21 "DP_FPU.v:1451" ["TmP_2[20:0]"] ["MDA[52:32]"] ["MSD_1[20:0]"] ["LOAD_MSD"],
        _mux 32 "DP_FPU.v:1448" ["TmP_3[31:0]"] ["MDB[31:0]"] ["LSD_2[31:0]"] ["LOAD_LSD2"],
        _mux 32 "DP_FPU.v:1446" ["TmP_1[31:0]"] ["MDA[31:0]"] ["LSD_1[31:0]"] ["LOAD_LSD1"],
        _mux 32 "DP_FPU.v:1444" ["TmP_0[31:0]"] ["DP_Q[31:0]"] ["TmP_9[31:0]"] ["TmP_8"],
        _mux 32 "DP_FPU.v:1442" ["DP_OUT[31:0]"] ["DOUT[63:32]"] ["DP_Q[31:0]"] ["CLR_LSB"],
        _mux 32 "DP_FPU.v:1444" ["TmP_9[31:0]"] ["DOUT[31:0]"] ["SRC2[31:0]"] ["LD_OUT[0]"],
        _buf 128 "DP_FPU.v:1374" ["COP_OUT[127:0]"] ["RCOPA[11:0]", "MDA[51:32]", "SRC1[31:0]", "RCOPB[11:0]", "MDB[51:32]", "SRC2[31:0]"]
    ] in
    PINST "draw_hier DP_FPU" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let DP_LOGIK {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "OPCODE[7:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "FSR[5:0]",
                 "START[1:0]",
                 "MRESULT[105:0]",
                 "BWD[1:0]",
                 "FL",
                 "MAN1[20:0]",
                 "MAN2[20:0]",
                 "WR_REG",
                 "CY_IN",
                 "COP_DONE",
                 "COP_OP[23:0]",
                 "COP_IN[63:0]" ] in
    let outs = [ "DOUT[63:0]",
                 "TT_DP[4:0]",
                 "DP_CMP[2:0]",
                 "OVF_BCD[3:0]",
                 "MEI",
                 "DFLOAT",
                 "DONE",
                 "UP_DP",
                 "CLR_LSB",
                 "WREN_L",
                 "DVZ_TRAP",
                 "COP_GO" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_100",
                 "TmP_101",
                 "TmP_102",
                 "TmP_103",
                 "TmP_104",
                 "TmP_105",
                 "TmP_106",
                 "TmP_107",
                 "TmP_108",
                 "TmP_109",
                 "TmP_11",
                 "TmP_110",
                 "TmP_111",
                 "TmP_112",
                 "TmP_113",
                 "TmP_114",
                 "TmP_115",
                 "TmP_116",
                 "TmP_117",
                 "TmP_118",
                 "TmP_119",
                 "TmP_12",
                 "TmP_120",
                 "TmP_121",
                 "TmP_122",
                 "TmP_123",
                 "TmP_124",
                 "TmP_125",
                 "TmP_126",
                 "TmP_127",
                 "TmP_128",
                 "TmP_129",
                 "TmP_13",
                 "TmP_130",
                 "TmP_131",
                 "TmP_132",
                 "TmP_133",
                 "TmP_134",
                 "TmP_135",
                 "TmP_136",
                 "TmP_137",
                 "TmP_138",
                 "TmP_139",
                 "TmP_14",
                 "TmP_140",
                 "TmP_141",
                 "TmP_142",
                 "TmP_143",
                 "TmP_144",
                 "TmP_145",
                 "TmP_146",
                 "TmP_147",
                 "TmP_148",
                 "TmP_149",
                 "TmP_15",
                 "TmP_150",
                 "TmP_151",
                 "TmP_152",
                 "TmP_153",
                 "TmP_154",
                 "TmP_155",
                 "TmP_156",
                 "TmP_157",
                 "TmP_158",
                 "TmP_159",
                 "TmP_16",
                 "TmP_160",
                 "TmP_161",
                 "TmP_162",
                 "TmP_163",
                 "TmP_164",
                 "TmP_165",
                 "TmP_166",
                 "TmP_167",
                 "TmP_168",
                 "TmP_169",
                 "TmP_17",
                 "TmP_170",
                 "TmP_171",
                 "TmP_172",
                 "TmP_173[7:0]",
                 "TmP_174[15:0]",
                 "TmP_175[31:0]",
                 "TmP_176[63:0]",
                 "TmP_177",
                 "TmP_178",
                 "TmP_179",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[2:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3[5:0]",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4[1:0]",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75",
                 "TmP_76",
                 "TmP_77",
                 "TmP_78",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82",
                 "TmP_83",
                 "TmP_84",
                 "TmP_85",
                 "TmP_86",
                 "TmP_87",
                 "TmP_88",
                 "TmP_89",
                 "TmP_9[1:0]",
                 "TmP_90",
                 "TmP_91",
                 "TmP_92",
                 "TmP_93",
                 "TmP_94",
                 "TmP_95",
                 "TmP_96",
                 "TmP_97",
                 "TmP_98",
                 "TmP_99",
                 "addout[69:0]",
                 "bcd_carry",
                 "bcd_done",
                 "bcd_ops",
                 "bcd_q[31:0]",
                 "car_ry",
                 "cmpres[1:0]",
                 "copop",
                 "copwr",
                 "cy_val[64:0]",
                 "dei_ovf[1:0]",
                 "div_done",
                 "div_zero",
                 "divi_ops",
                 "divi_out[63:0]",
                 "divout[69:0]",
                 "done_i",
                 "fp_out[63:0]",
                 "fp_res[63:0]",
                 "fpout[69:0]",
                 "go_divf",
                 "go_divi",
                 "i_out[31:0]",
                 "inexact",
                 "late_bcd_done",
                 "later",
                 "make_i",
                 "man_ops",
                 "misc_op",
                 "miscout[69:0]",
                 "mulout[69:0]",
                 "op_cmp",
                 "overflow",
                 "ovf_div",
                 "preflags[5:0]",
                 "quo_div",
                 "rund[64:0]",
                 "select[7:0]",
                 "sequ[1:0]",
                 "srcflags[5:0]",
                 "tt[2:0]",
                 "underflow",
                 "up_flag",
                 "wctrl[5:0]",
                 "wr_part1",
                 "wr_part2",
                 "zexp1",
                 "zexp2",
                 "zman1",
                 "zman2",
                 "znan1" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 65 "DP_FPU.v:1228" ["rund[64:0]"] ["fpout[66:2]"] ["0b00000000000000000000000000000000000", "cy_val[29]", "0b0000000000000000000000000000", "cy_val[0]"] ,
        _and 1 "DP_FPU.v:1119" ["go_divf"] ["TmP_46"] ["START[1]"] ,
        _and 1 "DP_FPU.v:1120" ["go_divi"] ["divi_ops"] ["TmP_172"] ,
        _and 1 "DP_FPU.v:1125" ["DFLOAT"] ["TmP_93"] ["TmP_73"] ,
        _and 1 "DP_FPU.v:1127" ["op_cmp"] ["TmP_54"] ["TmP_73"] ,
        _and 1 "DP_FPU.v:1131" ["TmP_12"] ["TmP_55"] ["TmP_56"] ,
        _and 1 "DP_FPU.v:1131" ["copwr"] ["TmP_12"] ["TmP_57"] ,
        _and 1 "DP_FPU.v:1157" ["TmP_13"] ["preflags[4]"] ["TmP_97"] ,
        _and 1 "DP_FPU.v:1158" ["TmP_14"] ["TmP_60"] ["TmP_99"] ,
        _and 1 "DP_FPU.v:1173" ["TmP_15"] ["zexp1"] ["TmP_103"] ,
        _and 1 "DP_FPU.v:1174" ["TmP_16"] ["preflags[1]"] ["TmP_107"] ,
        _and 1 "DP_FPU.v:1175" ["TmP_17"] ["TmP_62"] ["TmP_109"] ,
        _and 1 "DP_FPU.v:1220" ["TmP_18"] ["TmP_63"] ["fpout[2]"] ,
        _and 1 "DP_FPU.v:1221" ["TmP_19"] ["TmP_83"] ["inexact"] ,
        _and 1 "DP_FPU.v:1222" ["TmP_20"] ["fpout[67]"] ["inexact"] ,
        _and 1 "DP_FPU.v:1226" ["cy_val[0]"] ["TmP_73"] ["car_ry"] ,
        _and 1 "DP_FPU.v:1226" ["cy_val[29]"] ["FL"] ["car_ry"] ,
        _and 1 "DP_FPU.v:1231" ["div_zero"] ["TmP_65"] ["TmP_112"] ,
        _and 1 "DP_FPU.v:1232" ["overflow"] ["TmP_84"] ["TmP_113"] ,
        _and 1 "DP_FPU.v:1233" ["underflow"] ["TmP_114"] ["TmP_85"] ,
        _and 1 "DP_FPU.v:1246" ["TmP_21"] ["underflow"] ["TmP_86"] ,
        _and 1 "DP_FPU.v:1246" ["TmP_22"] ["inexact"] ["TmP_86"] ,
        _and 1 "DP_FPU.v:1273" ["TmP_4[0]"] ["START[1]"] ["TmP_87"] ,
        _and 1 "DP_FPU.v:1273" ["TmP_4[1]"] ["sequ[0]"] ["TmP_88"] ,
        _and 1 "DP_FPU.v:1307" ["later"] ["wctrl[3]"] ["WR_REG"] ,
        _and 1 "DP_FPU.v:1309" ["TmP_23"] ["TmP_89"] ["done_i"] ,
        _and 1 "DP_FPU.v:1311" ["wr_part1"] ["TmP_24"] ["wctrl[0]"] ,
        _and 1 "DP_FPU.v:1313" ["TmP_0"] ["TmP_24"] ["wctrl[2]"] ,
        _and 1 "DP_FPU.v:1314" ["TmP_24"] ["DONE"] ["WR_REG"] ,
        _and 1 "DP_FPU.v:1314" ["TmP_11"] ["TmP_24"] ["wctrl[1]"] ,
        _and 1 "DP_FPU.v:1318" ["TmP_10"] ["DONE"] ["TmP_90"] ,
        _and 1 "DP_FPU.v:1319" ["TmP_25"] ["select[2]"] ["TmP_179"] ,
        _and 1 "DP_FPU.v:1325" ["TmP_26"] ["divi_out[39]"] ["SRC1[7]"] ,
        _and 1 "DP_FPU.v:1325" ["TmP_27"] ["TmP_26"] ["SRC2[7]"] ,
        _and 1 "DP_FPU.v:1325" ["TmP_28"] ["TmP_27"] ["quo_div"] ,
        _and 1 "DP_FPU.v:1326" ["TmP_29"] ["divi_out[47]"] ["SRC1[15]"] ,
        _and 1 "DP_FPU.v:1326" ["TmP_30"] ["TmP_29"] ["SRC2[15]"] ,
        _and 1 "DP_FPU.v:1326" ["TmP_31"] ["TmP_30"] ["quo_div"] ,
        _and 1 "DP_FPU.v:1327" ["TmP_32"] ["divi_out[63]"] ["SRC1[31]"] ,
        _and 1 "DP_FPU.v:1327" ["TmP_33"] ["TmP_32"] ["SRC2[31]"] ,
        _and 1 "DP_FPU.v:1327" ["TmP_34"] ["TmP_33"] ["quo_div"] ,
        _and 1 "DP_FPU.v:1328" ["TmP_35"] ["dei_ovf[0]"] ["TmP_45"] ,
        _and 1 "DP_FPU.v:1335" ["TmP_1"] ["START[1]"] ["copop"] ,
        _logic_reduce_or 6 "" ["TmP_36"] ["TmP_141", "TmP_138", "TmP_131", "TmP_128", "TmP_124", "TmP_120"],
        _logic_reduce_or 5 "" ["TmP_37"] ["TmP_139", "TmP_137", "TmP_136", "TmP_135", "TmP_121"],
        _logic_reduce_or 2 "" ["TmP_38"] ["TmP_126", "TmP_44"],
        _logic_reduce_or 2 "" ["TmP_39"] ["TmP_125", "TmP_45"],
        _logic_reduce_or 8 "" ["TmP_40"] ["TmP_140", "TmP_134", "TmP_133", "TmP_132", "TmP_130", "TmP_127", "TmP_123", "TmP_122"],
        _logic_reduce_or 2 "" ["TmP_41"] ["TmP_167", "TmP_165"],
        _logic_reduce_or 2 "" ["TmP_42"] ["TmP_166", "TmP_54"],
        _logic_reduce_or 3 "" ["TmP_43"] ["TmP_170", "TmP_169", "TmP_168"],
        _eq 8 "DP_FPU.v:1121" ["TmP_47"] ["OPCODE[7:0]"] ["0b01110001"] ,
        _eq 8 "DP_FPU.v:1121" ["TmP_48"] ["OPCODE[7:0]"] ["0b01110000"] ,
        _eq 8 "DP_FPU.v:1123" ["TmP_49"] ["OPCODE[7:0]"] ["0b10110001"] ,
        _eq 8 "DP_FPU.v:1123" ["TmP_50"] ["OPCODE[7:0]"] ["0b10110101"] ,
        _eq 8 "DP_FPU.v:1123" ["TmP_51"] ["OPCODE[7:0]"] ["0b10111001"] ,
        _eq 8 "DP_FPU.v:1123" ["TmP_52"] ["OPCODE[7:0]"] ["0b10111101"] ,
        _eq 2 "DP_FPU.v:1126" ["TmP_53"] ["select[1:0]"] ["0b11"] ,
        _logic_not 2 "DP_FPU.v:1131" ["TmP_55"] ["COP_OP[18:17]"],
        _eq 3 "DP_FPU.v:1131" ["TmP_56"] ["COP_OP[13:11]"] ["0b111"] ,
        _eq 3 "DP_FPU.v:1131" ["TmP_57"] ["COP_OP[7:5]"] ["0b001"] ,
        _logic_not 11 "DP_FPU.v:1135" ["zexp2"] ["SRC2[30:20]"],
        _logic_not 20 "DP_FPU.v:1136" ["zman2"] ["SRC2[19:0]"],
        _logic_not 11 "DP_FPU.v:1137" ["zexp1"] ["SRC1[30:20]"],
        _logic_not 20 "DP_FPU.v:1138" ["zman1"] ["SRC1[19:0]"],
        _eq 11 "DP_FPU.v:1139" ["znan1"] ["SRC1[30:20]"] ["0b11111111111"] ,
        _eq 11 "DP_FPU.v:1146" ["TmP_58"] ["SRC2[30:20]"] ["0b11111111111"] ,
        _eq 8 "DP_FPU.v:1158" ["TmP_59"] ["SRC2[30:23]"] ["0b11111111"] ,
        _logic_not 8 "DP_FPU.v:1166" ["TmP_60"] ["SRC2[30:23]"],
        _eq 8 "DP_FPU.v:1175" ["TmP_61"] ["SRC1[30:23]"] ["0b11111111"] ,
        _logic_not 8 "DP_FPU.v:1184" ["TmP_62"] ["SRC1[30:23]"],
        _eq 2 "DP_FPU.v:1220" ["TmP_63"] ["fpout[1:0]"] ["0b10"] ,
        _eq 2 "DP_FPU.v:1220" ["TmP_64"] ["fpout[1:0]"] ["0b11"] ,
        _eq 4 "DP_FPU.v:1231" ["TmP_65"] ["srcflags[3:0]"] ["0b0001"] ,
        _eq 11 "DP_FPU.v:1232" ["TmP_67"] ["rund[62:52]"] ["0b11111111111"] ,
        _logic_not 12 "DP_FPU.v:1233" ["TmP_68"] ["rund[63:52]"],
        _eq 8 "DP_FPU.v:1322" ["TmP_69"] ["OPCODE[7:0]"] ["0b01111100"] ,
        _eq 8 "DP_FPU.v:1322" ["TmP_70"] ["OPCODE[7:0]"] ["0b01111111"] ,
        _logic_reduce_bool 3 "DP_FPU.v:1158" ["TmP_71"] ["SRC2[22:20]"],
        _logic_reduce_bool 3 "DP_FPU.v:1175" ["TmP_72"] ["SRC1[22:20]"],
        _logic_reduce_bool 2 "DP_FPU.v:1234" ["inexact"] ["fpout[1:0]"],
        _not 1 "DP_FPU.v:1157" ["TmP_74"] ["preflags[3]"],
        _not 1 "DP_FPU.v:1173" ["TmP_75"] ["zexp2"],
        _not 1 "DP_FPU.v:1173" ["TmP_76"] ["zman2"],
        _not 1 "DP_FPU.v:1174" ["TmP_78"] ["preflags[0]"],
        _not 1 "DP_FPU.v:1174" ["TmP_79"] ["zexp1"],
        _not 1 "DP_FPU.v:1175" ["TmP_77"] ["zman1"],
        _not 1 "DP_FPU.v:1191" ["TmP_80"] ["preflags[1]"],
        _not 1 "DP_FPU.v:1191" ["TmP_81"] ["preflags[4]"],
        _not 1 "DP_FPU.v:1206" ["TmP_82"] ["OPCODE[0]"],
        _not 1 "DP_FPU.v:1221" ["TmP_83"] ["fpout[67]"],
        _not 1 "DP_FPU.v:1226" ["TmP_73"] ["FL"],
        _not 1 "DP_FPU.v:1232" ["TmP_84"] ["rund[64]"],
        _not 1 "DP_FPU.v:1233" ["TmP_85"] ["fpout[68]"],
        _not 1 "DP_FPU.v:1246" ["TmP_86"] ["op_cmp"],
        _not 1 "DP_FPU.v:1273" ["TmP_87"] ["wctrl[5]"],
        _not 1 "DP_FPU.v:1273" ["TmP_88"] ["DONE"],
        _not 1 "DP_FPU.v:1309" ["TmP_89"] ["START[1]"],
        _not 1 "DP_FPU.v:1318" ["TmP_90"] ["later"],
        _or 1 "DP_FPU.v:1118" ["divi_ops"] ["TmP_44"] ["TmP_45"] ,
        _or 1 "DP_FPU.v:1121" ["bcd_ops"] ["TmP_47"] ["TmP_48"] ,
        _or 1 "DP_FPU.v:1123" ["TmP_91"] ["TmP_49"] ["TmP_50"] ,
        _or 1 "DP_FPU.v:1123" ["TmP_92"] ["TmP_91"] ["TmP_51"] ,
        _or 1 "DP_FPU.v:1123" ["man_ops"] ["TmP_92"] ["TmP_52"] ,
        _or 1 "DP_FPU.v:1125" ["TmP_93"] ["select[2]"] ["copop"] ,
        _or 1 "DP_FPU.v:1126" ["TmP_94"] ["TmP_53"] ["divi_ops"] ,
        _or 1 "DP_FPU.v:1126" ["make_i"] ["TmP_94"] ["bcd_ops"] ,
        _or 1 "DP_FPU.v:1157" ["TmP_95"] ["TmP_74"] ["SRC2[31]"] ,
        _or 1 "DP_FPU.v:1157" ["TmP_96"] ["TmP_95"] ["TmP_75"] ,
        _or 1 "DP_FPU.v:1157" ["TmP_97"] ["TmP_96"] ["TmP_76"] ,
        _or 1 "DP_FPU.v:1157" ["TmP_98"] ["preflags[5]"] ["TmP_13"] ,
        _or 1 "DP_FPU.v:1158" ["TmP_99"] ["TmP_71"] ["TmP_76"] ,
        _or 1 "DP_FPU.v:1158" ["TmP_100"] ["TmP_59"] ["TmP_14"] ,
        _or 1 "DP_FPU.v:1173" ["TmP_101"] ["TmP_77"] ["SRC2[31]"] ,
        _or 1 "DP_FPU.v:1173" ["TmP_102"] ["TmP_101"] ["TmP_75"] ,
        _or 1 "DP_FPU.v:1173" ["TmP_103"] ["TmP_102"] ["TmP_76"] ,
        _or 1 "DP_FPU.v:1173" ["TmP_104"] ["znan1"] ["TmP_15"] ,
        _or 1 "DP_FPU.v:1174" ["TmP_105"] ["TmP_78"] ["SRC1[31]"] ,
        _or 1 "DP_FPU.v:1174" ["TmP_106"] ["TmP_105"] ["TmP_79"] ,
        _or 1 "DP_FPU.v:1174" ["TmP_107"] ["TmP_106"] ["TmP_77"] ,
        _or 1 "DP_FPU.v:1174" ["TmP_108"] ["preflags[2]"] ["TmP_16"] ,
        _or 1 "DP_FPU.v:1175" ["TmP_109"] ["TmP_72"] ["TmP_77"] ,
        _or 1 "DP_FPU.v:1175" ["TmP_110"] ["TmP_61"] ["TmP_17"] ,
        _or 1 "DP_FPU.v:1220" ["TmP_111"] ["TmP_18"] ["TmP_64"] ,
        _or 1 "DP_FPU.v:1231" ["TmP_112"] ["TmP_46"] ["TmP_66"] ,
        _or 1 "DP_FPU.v:1232" ["TmP_113"] ["rund[63]"] ["TmP_67"] ,
        _or 1 "DP_FPU.v:1233" ["TmP_114"] ["rund[64]"] ["TmP_68"] ,
        _or 1 "DP_FPU.v:1252" ["TmP_115"] ["underflow"] ["fpout[68]"] ,
        _or 1 "DP_FPU.v:1266" ["TmP_2[2]"] ["srcflags[3]"] ["srcflags[1]"] ,
        _or 1 "DP_FPU.v:1308" ["TmP_116"] ["div_done"] ["COP_DONE"] ,
        _or 1 "DP_FPU.v:1316" ["WREN_L"] ["wr_part1"] ["wr_part2"] ,
        _or 1 "DP_FPU.v:1319" ["UP_DP"] ["TmP_25"] ["man_ops"] ,
        _or 1 "DP_FPU.v:1322" ["quo_div"] ["TmP_69"] ["TmP_70"] ,
        _dff 1 "DP_FPU.v:1335" ["COP_GO"] ["BCLK"] ["TmP_1"],
        _dff 1 "DP_FPU.v:1331" ["late_bcd_done"] ["BCLK"] ["bcd_done"],
        _dff 1 "DP_FPU.v:1318" ["up_flag"] ["BCLK"] ["TmP_10"],
        _dff 1 "DP_FPU.v:1314" ["wr_part2"] ["BCLK"] ["TmP_11"],
        _dff 1 "DP_FPU.v:1313" ["CLR_LSB"] ["BCLK"] ["TmP_0"],
        _adff 2 "DP_FPU.v:1270" ["sequ[1:0]"] ["BRESET"] ["BCLK"] ["TmP_4[1:0]"],
        _dff 3 "DP_FPU.v:1266" ["DP_CMP[2:0]"] ["BCLK"] ["TmP_2[2]", "cmpres[1:0]"],
        _dff 1 "DP_FPU.v:1179" ["srcflags[0]"] ["BCLK"] ["TmP_5"],
        _dff 1 "DP_FPU.v:1170" ["srcflags[1]"] ["BCLK"] ["TmP_6"],
        _dff 1 "DP_FPU.v:1162" ["srcflags[2]"] ["BCLK"] ["TmP_7"],
        _dff 1 "DP_FPU.v:1154" ["srcflags[3]"] ["BCLK"] ["TmP_8"],
        _dff 6 "DP_FPU.v:1141" ["preflags[5:0]"] ["BCLK"] ["TmP_3[5:0]"],
        _dff 2 "DP_FPU.v:1141" ["srcflags[5:4]"] ["BCLK"] ["TmP_9[1:0]"],
        _dff 1 "DP_FPU.v:1128" ["misc_op"] ["BCLK"] ["select[3]"],
        _pmux 1 3 "DP_FPU.v:1327|DP_FPU.v:1324" ["ovf_div"] ["TmP_35"] ["TmP_28", "TmP_31", "TmP_34"] ["TmP_119", "TmP_118", "TmP_117"],
        _eq 2 "DP_FPU.v:1327|DP_FPU.v:1324" ["TmP_117"] ["OPCODE[2]", "BWD[1]"] ["0b11"] ,
        _eq 3 "DP_FPU.v:1326|DP_FPU.v:1324" ["TmP_118"] ["OPCODE[2]", "BWD[1:0]"] ["0b101"] ,
        _eq 3 "DP_FPU.v:1325|DP_FPU.v:1324" ["TmP_119"] ["OPCODE[2]", "BWD[1:0]"] ["0b100"] ,
        _pmux 6 8 "DP_FPU.v:1303|DP_FPU.v:1276" ["wctrl[5:0]"] ["0b000000"] ["0b10000010001000011101011101000100001000111101000", "copwr"] ["TmP_129", "TmP_40", "MEI", "TmP_39", "TmP_38", "TmP_37", "TmP_36", "copop"],
        _eq 8 "DP_FPU.v:1303|DP_FPU.v:1276" ["copop"] ["OPCODE[7:0]"] ["0b11011101"] ,
        _eq 8 "DP_FPU.v:1302|DP_FPU.v:1276" ["TmP_120"] ["FL", "OPCODE[7:1]"] ["0b01011011"] ,
        _eq 8 "DP_FPU.v:1301|DP_FPU.v:1276" ["TmP_121"] ["FL", "OPCODE[7:1]"] ["0b11011011"] ,
        _eq 6 "DP_FPU.v:1300|DP_FPU.v:1276" ["TmP_44"] ["OPCODE[7:2]"] ["0b011111"] ,
        _eq 8 "DP_FPU.v:1299|DP_FPU.v:1276" ["TmP_45"] ["OPCODE[7:0]"] ["0b01111011"] ,
        _eq 8 "DP_FPU.v:1298|DP_FPU.v:1276" ["MEI"] ["OPCODE[7:0]"] ["0b01111001"] ,
        _eq 7 "DP_FPU.v:1297|DP_FPU.v:1276" ["TmP_122"] ["OPCODE[7:1]"] ["0b0111000"] ,
        _eq 9 "DP_FPU.v:1296|DP_FPU.v:1276" ["TmP_123"] ["FL", "OPCODE[7:0]"] ["0b110111100"] ,
        _eq 9 "DP_FPU.v:1295|DP_FPU.v:1276" ["TmP_124"] ["FL", "OPCODE[7:0]"] ["0b010111100"] ,
        _eq 9 "DP_FPU.v:1294|DP_FPU.v:1276" ["TmP_125"] ["FL", "OPCODE[7:0]"] ["0b010111000"] ,
        _eq 9 "DP_FPU.v:1293|DP_FPU.v:1276" ["TmP_126"] ["FL", "OPCODE[7:0]"] ["0b110111000"] ,
        _eq 9 "DP_FPU.v:1292|DP_FPU.v:1276" ["TmP_127"] ["FL", "OPCODE[7:0]"] ["0b110110100"] ,
        _eq 9 "DP_FPU.v:1291|DP_FPU.v:1276" ["TmP_128"] ["FL", "OPCODE[7:0]"] ["0b010110100"] ,
        _eq 9 "DP_FPU.v:1290|DP_FPU.v:1276" ["TmP_129"] ["FL", "OPCODE[7:0]"] ["0b110110010"] ,
        _eq 9 "DP_FPU.v:1288|DP_FPU.v:1276" ["TmP_130"] ["FL", "OPCODE[7:0]"] ["0b110110000"] ,
        _eq 9 "DP_FPU.v:1287|DP_FPU.v:1276" ["TmP_131"] ["FL", "OPCODE[7:0]"] ["0b010110000"] ,
        _eq 8 "DP_FPU.v:1286|DP_FPU.v:1276" ["TmP_132"] ["FL", "OPCODE[7:1]"] ["0b11001111"] ,
        _eq 8 "DP_FPU.v:1285|DP_FPU.v:1276" ["TmP_133"] ["FL", "OPCODE[7:1]"] ["0b11001101"] ,
        _eq 8 "DP_FPU.v:1284|DP_FPU.v:1276" ["TmP_134"] ["FL", "OPCODE[7:1]"] ["0b11001100"] ,
        _eq 8 "DP_FPU.v:1283|DP_FPU.v:1276" ["TmP_135"] ["FL", "OPCODE[7:1]"] ["0b01001111"] ,
        _eq 8 "DP_FPU.v:1282|DP_FPU.v:1276" ["TmP_136"] ["FL", "OPCODE[7:1]"] ["0b01001101"] ,
        _eq 8 "DP_FPU.v:1281|DP_FPU.v:1276" ["TmP_137"] ["FL", "OPCODE[7:1]"] ["0b01001100"] ,
        _eq 8 "DP_FPU.v:1278|DP_FPU.v:1276" ["TmP_140"] ["FL", "OPCODE[7:1]"] ["0b11001000"] ,
        _eq 8 "DP_FPU.v:1277|DP_FPU.v:1276" ["TmP_141"] ["FL", "OPCODE[7:1]"] ["0b01001000"] ,
        _pmux 64 5 "DP_FPU.v:1262|DP_FPU.v:1257" ["DOUT[63:0]"] ["fp_out[63:0]"] ["MRESULT[31:8]", "TmP_173[7:0]", "MRESULT[31:0]", "MRESULT[31:16]", "TmP_174[15:0]", "MRESULT[31:0]", "MRESULT[63:0]", "COP_IN[63:0]", "TmP_176[63:0]"] ["TmP_145", "TmP_144", "TmP_143", "TmP_142", "make_i"],
        _eq 2 "DP_FPU.v:1261|DP_FPU.v:1257" ["TmP_142"] ["make_i", "copop"] ["0b01"] ,
        _eq 4 "DP_FPU.v:1260|DP_FPU.v:1257" ["TmP_143"] ["make_i", "copop", "MEI", "BWD[1]"] ["0b0011"] ,
        _eq 5 "DP_FPU.v:1259|DP_FPU.v:1257" ["TmP_144"] ["make_i", "copop", "MEI", "BWD[1:0]"] ["0b00101"] ,
        _eq 5 "DP_FPU.v:1258|DP_FPU.v:1257" ["TmP_145"] ["make_i", "copop", "MEI", "BWD[1:0]"] ["0b00100"] ,
        _pmux 3 5 "DP_FPU.v:1242|DP_FPU.v:1237" ["tt[2:0]"] ["0b000"] ["0b101011010001110"] ["fpout[69]", "TmP_149", "TmP_148", "TmP_147", "TmP_146"],
        _eq 8 "DP_FPU.v:1242|DP_FPU.v:1237" ["TmP_146"] ["fpout[69]", "op_cmp", "div_zero", "overflow", "FSR[0]", "underflow", "FSR[2]", "inexact"] ["0b00000011"] ,
        _eq 6 "DP_FPU.v:1241|DP_FPU.v:1237" ["TmP_147"] ["fpout[69]", "op_cmp", "div_zero", "overflow", "FSR[0]", "underflow"] ["0b000011"] ,
        _eq 4 "DP_FPU.v:1240|DP_FPU.v:1237" ["TmP_148"] ["fpout[69]", "op_cmp", "div_zero", "overflow"] ["0b0001"] ,
        _eq 3 "DP_FPU.v:1239|DP_FPU.v:1237" ["TmP_149"] ["fpout[69]", "op_cmp", "div_zero"] ["0b001"] ,
        _pmux 1 3 "DP_FPU.v:1222|DP_FPU.v:1219" ["car_ry"] ["0b0"] ["TmP_111", "TmP_19", "TmP_20"] ["TmP_152", "TmP_151", "TmP_150"],
        _eq 2 "DP_FPU.v:1222|DP_FPU.v:1219" ["TmP_150"] ["FSR[5:4]"] ["0b11"] ,
        _eq 2 "DP_FPU.v:1221|DP_FPU.v:1219" ["TmP_151"] ["FSR[5:4]"] ["0b10"] ,
        _logic_not 2 "DP_FPU.v:1220|DP_FPU.v:1219" ["TmP_152"] ["FSR[5:4]"],
        _pmux 70 3 "DP_FPU.v:1214|DP_FPU.v:1211" ["fpout[69:0]"] ["addout[69:0]"] ["miscout[69:0]", "divout[69:0]", "mulout[69:0]"] ["misc_op", "TmP_154", "TmP_153"],
        _eq 4 "DP_FPU.v:1214|DP_FPU.v:1211" ["TmP_153"] ["misc_op", "OPCODE[5]", "OPCODE[3:2]"] ["0b0111"] ,
        _eq 4 "DP_FPU.v:1213|DP_FPU.v:1211" ["TmP_154"] ["misc_op", "OPCODE[5]", "OPCODE[3:2]"] ["0b0110"] ,
        _pmux 1 3 "DP_FPU.v:1184|DP_FPU.v:1181" ["TmP_155"] ["0b0"] ["zexp1", "preflags[1]", "TmP_62"] ["TmP_158", "TmP_157", "TmP_156"],
        _mux 1 "DP_FPU.v:1180" ["TmP_5"] ["srcflags[0]"] ["TmP_155"] ["START[1]"],
        _pmux 1 3 "DP_FPU.v:1175|DP_FPU.v:1172" ["TmP_159"] ["0b0"] ["TmP_104", "TmP_108", "TmP_110"] ["TmP_158", "TmP_157", "TmP_156"],
        _eq 2 "DP_FPU.v:1175|DP_FPU.v:1172" ["TmP_156"] ["select[5:4]"] ["0b11"] ,
        _eq 2 "DP_FPU.v:1174|DP_FPU.v:1172" ["TmP_157"] ["select[5:4]"] ["0b10"] ,
        _eq 2 "DP_FPU.v:1173|DP_FPU.v:1172" ["TmP_158"] ["select[5:4]"] ["0b01"] ,
        _mux 1 "DP_FPU.v:1171" ["TmP_6"] ["srcflags[1]"] ["TmP_159"] ["START[1]"],
        _pmux 1 2 "DP_FPU.v:1166|DP_FPU.v:1164" ["TmP_160"] ["0b0"] ["preflags[4]", "TmP_60"] ["TmP_162", "TmP_161"],
        _mux 1 "DP_FPU.v:1163" ["TmP_7"] ["srcflags[2]"] ["TmP_160"] ["START[1]"],
        _pmux 1 2 "DP_FPU.v:1158|DP_FPU.v:1156" ["TmP_163"] ["0b0"] ["TmP_98", "TmP_100"] ["TmP_162", "TmP_161"],
        _eq 2 "DP_FPU.v:1158|DP_FPU.v:1156" ["TmP_161"] ["select[7:6]"] ["0b11"] ,
        _eq 2 "DP_FPU.v:1157|DP_FPU.v:1156" ["TmP_162"] ["select[7:6]"] ["0b10"] ,
        _mux 1 "DP_FPU.v:1155" ["TmP_8"] ["srcflags[3]"] ["TmP_163"] ["START[1]"],
        _mux 1 "DP_FPU.v:1142" ["TmP_9[1]"] ["srcflags[5]"] ["SRC2[31]"] ["START[0]"],
        _mux 1 "DP_FPU.v:1142" ["TmP_9[0]"] ["srcflags[4]"] ["SRC1[31]"] ["START[0]"],
        _mux 6 "DP_FPU.v:1142" ["TmP_3[5:0]"] ["preflags[5:0]"] ["TmP_58", "zexp2", "zman2", "znan1", "zexp1", "zman1"] ["START[0]"],
        _pmux 8 9 "DP_FPU.v:1113|DP_FPU.v:1100" ["select[7:0]"] ["0b00000000"] ["0b00000", "TmP_73", "0b10000111000011110000010", "TmP_73", "0b1110100", "TmP_73", "0b011", "FL", "0b1", "FL", "0b010010100", "TmP_73", "0b001", "FL", "0b1", "FL", "0b110000", "FL", "0b11100"] ["TmP_171", "TmP_139", "TmP_138", "TmP_43", "TmP_42", "TmP_46", "TmP_41", "TmP_164", "TmP_66"],
        _eq 8 "DP_FPU.v:1113|DP_FPU.v:1100" ["TmP_66"] ["OPCODE[7:0]"] ["0b10110111"] ,
        _eq 8 "DP_FPU.v:1112|DP_FPU.v:1100" ["TmP_164"] ["OPCODE[7:0]"] ["0b10110110"] ,
        _eq 8 "DP_FPU.v:1111|DP_FPU.v:1100" ["TmP_165"] ["OPCODE[7:0]"] ["0b10111100"] ,
        _eq 8 "DP_FPU.v:1110|DP_FPU.v:1100" ["TmP_46"] ["OPCODE[7:0]"] ["0b10111000"] ,
        _eq 8 "DP_FPU.v:1109|DP_FPU.v:1100" ["TmP_166"] ["OPCODE[7:0]"] ["0b10110100"] ,
        _eq 8 "DP_FPU.v:1108|DP_FPU.v:1100" ["TmP_54"] ["OPCODE[7:0]"] ["0b10110010"] ,
        _eq 8 "DP_FPU.v:1107|DP_FPU.v:1100" ["TmP_167"] ["OPCODE[7:0]"] ["0b10110000"] ,
        _eq 7 "DP_FPU.v:1106|DP_FPU.v:1100" ["TmP_168"] ["OPCODE[7:1]"] ["0b1001111"] ,
        _eq 7 "DP_FPU.v:1105|DP_FPU.v:1100" ["TmP_169"] ["OPCODE[7:1]"] ["0b1001101"] ,
        _eq 7 "DP_FPU.v:1104|DP_FPU.v:1100" ["TmP_170"] ["OPCODE[7:1]"] ["0b1001100"] ,
        _eq 7 "DP_FPU.v:1103|DP_FPU.v:1100" ["TmP_138"] ["OPCODE[7:1]"] ["0b1001011"] ,
        _eq 7 "DP_FPU.v:1102|DP_FPU.v:1100" ["TmP_139"] ["OPCODE[7:1]"] ["0b1001010"] ,
        _eq 7 "DP_FPU.v:1101|DP_FPU.v:1100" ["TmP_171"] ["OPCODE[7:1]"] ["0b1001000"] ,
        _mux 1 "DP_FPU.v:1120" ["TmP_172"] ["START[0]"] ["START[1]"] ["OPCODE[2]"],
        _mux 5 "DP_FPU.v:1246" ["TT_DP[4:0]"] ["TmP_22", "TmP_21", "tt[2:0]"] ["0b00000"] ["man_ops"],
        _mux 64 "DP_FPU.v:1249" ["fp_res[63:0]"] ["fpout[67]", "rund[62:0]"] ["fpout[67]", "rund[59:29]", "rund[31:0]"] ["FL"],
        _mux 64 "DP_FPU.v:1252" ["fp_out[63:0]"] ["fp_res[63:0]"] ["0b0000000000000000000000000000000000000000000000000000000000000000"] ["TmP_115"],
        _mux 8 "DP_FPU.v:1258" ["TmP_173[7:0]"] ["MRESULT[7:0]"] ["MRESULT[15:8]"] ["WR_REG"],
        _mux 16 "DP_FPU.v:1259" ["TmP_174[15:0]"] ["MRESULT[15:0]"] ["MRESULT[31:16]"] ["WR_REG"],
        _mux 32 "DP_FPU.v:1262" ["TmP_175[31:0]"] ["i_out[31:0]"] ["bcd_q[31:0]"] ["bcd_ops"],
        _mux 64 "DP_FPU.v:1262" ["TmP_176[63:0]"] ["TmP_175[31:0]", "fp_out[31:0]"] ["divi_out[63:0]"] ["divi_ops"],
        _mux 1 "DP_FPU.v:1308" ["TmP_177"] ["sequ[0]"] ["sequ[1]"] ["later"],
        _mux 1 "DP_FPU.v:1308" ["done_i"] ["TmP_177"] ["TmP_116"] ["wctrl[4]"],
        _mux 1 "DP_FPU.v:1309" ["TmP_178"] ["START[1]"] ["bcd_done"] ["bcd_ops"],
        _mux 1 "DP_FPU.v:1309" ["DONE"] ["TmP_23"] ["TmP_178"] ["wctrl[5]"],
        _mux 1 "DP_FPU.v:1319" ["TmP_179"] ["up_flag"] ["DONE"] ["later"],
        DFPU_ADDSUB [("instance", "as_inst"), ("src", "DP_FPU.v:1190")] [
                ("BCLK",["BCLK"]),
                ("BWD[1:0]",["BWD[1:0]"]),
                ("CMPRES[1:0]",["cmpres[1:0]"]),
                ("IOUT[31:0]",["i_out[31:0]"]),
                ("MAN1[20:0]",["TmP_80", "MAN1[19:0]"]),
                ("MAN2[20:0]",["TmP_81", "MAN2[19:0]"]),
                ("OUT[69:0]",["addout[69:0]"]),
                ("SELECT[3:0]",["OPCODE[2:1]", "select[1:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("SRCFLAGS[5:0]",["srcflags[5:0]"]),
                ("START[1:0]",["START[1:0]"])],
        DFPU_BCD [("instance", "bcd_inst"), ("src", "DP_FPU.v:1205")] [
                ("BCD_DONE",["bcd_done"]),
                ("BCD_Q[31:0]",["bcd_q[31:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("BWD[1:0]",["BWD[1:0]"]),
                ("CY_IN",["CY_IN"]),
                ("CY_OUT",["bcd_carry"]),
                ("DO_BCD",["bcd_ops"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("START",["START[1]"]),
                ("SUBP",["TmP_82"])],
        DFPU_DIV [("instance", "div_inst"), ("src", "DP_FPU.v:1198")] [
                ("BCLK",["BCLK"]),
                ("BRST",["BRESET"]),
                ("BWD[1:0]",["BWD[1:0]"]),
                ("DEI_OVF[1:0]",["dei_ovf[1:0]"]),
                ("DIVI_OUT[63:0]",["divi_out[63:0]"]),
                ("DONE",["div_done"]),
                ("DVZ_TRAP",["DVZ_TRAP"]),
                ("FL",["FL"]),
                ("MAN1[20:0]",["MAN1[20:0]"]),
                ("MAN2[20:0]",["MAN2[20:0]"]),
                ("OPCODE[2:0]",["OPCODE[2:0]"]),
                ("OUT[69:0]",["divout[69:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("SRCFLAGS[5:0]",["srcflags[5:0]"]),
                ("START[3:0]",["go_divi", "go_divf", "START[1:0]"])],
        DFPU_MISC [("instance", "misc_inst"), ("src", "DP_FPU.v:1202")] [
                ("BCLK",["BCLK"]),
                ("MAN2[19:0]",["MAN2[19:0]"]),
                ("MODE[3:0]",["OPCODE[5]", "OPCODE[0]", "FL", "OPCODE[1]"]),
                ("OUT[69:0]",["miscout[69:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("SRCFLAGS[5:0]",["srcflags[5:0]"]),
                ("START[1:0]",["START[1:0]"])],
        DFPU_MUL [("instance", "mul_inst"), ("src", "DP_FPU.v:1195")] [
                ("BCLK",["BCLK"]),
                ("MRESULT[105:0]",["MRESULT[105:0]"]),
                ("OUT[69:0]",["mulout[69:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"]),
                ("SRCFLAGS[5:0]",["srcflags[5:0]"]),
                ("START",["START[0]"])],
        _buf 4 "DP_FPU.v:1051" ["OVF_BCD[3:0]"] ["dei_ovf[1]", "ovf_div", "late_bcd_done", "bcd_carry"],
        _buf 2 "" ["TmP_2[1:0]"] ["cmpres[1:0]"],
        _buf 63 "" ["cy_val[64:30]", "cy_val[28:1]"] ["0b000000000000000000000000000000000000000000000000000000000000000"]
    ] in
    PINST "draw_hier DP_LOGIK" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let FFS_LOGIK {attrs::(string#string) list} conns =
    let inps = [ "SRC1[31:0]",
                 "SRC2[4:0]",
                 "BWD[1:0]" ] in
    let outs = [ "FLAG",
                 "DOUT[4:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[6:0]",
                 "TmP_1[6:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[6:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_3[6:0]",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "byte_0[7:0]",
                 "byte_1[7:0]",
                 "byte_2[7:0]",
                 "byte_3[7:0]",
                 "maske[6:0]",
                 "mdat_0[15:0]",
                 "mdat_1[7:0]",
                 "mdat_2[3:0]",
                 "obits[4:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 7 "I_PFAD.v:248" ["TmP_0[6:0]"] ["SRC1[6:0]"] ["maske[6:0]"] ,
        _and 7 "I_PFAD.v:253" ["TmP_1[6:0]"] ["SRC1[14:8]"] ["maske[6:0]"] ,
        _and 7 "I_PFAD.v:260" ["TmP_2[6:0]"] ["SRC1[22:16]"] ["maske[6:0]"] ,
        _and 7 "I_PFAD.v:264" ["TmP_3[6:0]"] ["SRC1[30:24]"] ["maske[6:0]"] ,
        _logic_reduce_or 3 "" ["TmP_4"] ["TmP_12", "TmP_11", "TmP_10"],
        _logic_not 16 "I_PFAD.v:266" ["obits[4]"] ["byte_1[7:0]", "byte_0[7:0]"],
        _logic_not 8 "I_PFAD.v:269" ["obits[3]"] ["mdat_0[7:0]"],
        _logic_not 4 "I_PFAD.v:272" ["obits[2]"] ["mdat_1[3:0]"],
        _logic_not 2 "I_PFAD.v:275" ["obits[1]"] ["mdat_2[1:0]"],
        _eq 2 "I_PFAD.v:276" ["TmP_7"] ["mdat_2[2:1]"] ["0b10"] ,
        _logic_not 4 "I_PFAD.v:283" ["TmP_8"] ["mdat_2[3:0]"],
        _not 1 "I_PFAD.v:276" ["obits[0]"] ["TmP_9"],
        _or 1 "I_PFAD.v:276" ["TmP_9"] ["TmP_7"] ["mdat_2[0]"] ,
        _mux 1 "I_PFAD.v:282|I_PFAD.v:279" ["FLAG"] ["TmP_8"] ["0b1"] ["TmP_4"],
        _eq 3 "I_PFAD.v:282|I_PFAD.v:279" ["TmP_10"] ["BWD[1:0]", "obits[4]"] ["0b011"] ,
        _eq 4 "I_PFAD.v:281|I_PFAD.v:279" ["TmP_11"] ["BWD[1:0]", "obits[4:3]"] ["0b0010"] ,
        _eq 3 "I_PFAD.v:280|I_PFAD.v:279" ["TmP_12"] ["BWD[1:0]", "obits[3]"] ["0b001"] ,
        _pmux 8 3 "I_PFAD.v:261|I_PFAD.v:258" ["byte_2[7:0]"] ["0bxxxxxxxx"] ["SRC1[23:16]", "SRC1[23]", "TmP_2[6:0]", "0b00000000"] ["TmP_14", "TmP_13", "TmP_6"],
        _eq 2 "I_PFAD.v:261|I_PFAD.v:258" ["TmP_6"] ["SRC2[4:3]"] ["0b11"] ,
        _eq 2 "I_PFAD.v:260|I_PFAD.v:258" ["TmP_13"] ["SRC2[4:3]"] ["0b10"] ,
        _not 1 "I_PFAD.v:259|I_PFAD.v:258" ["TmP_14"] ["SRC2[4]"],
        _pmux 8 3 "I_PFAD.v:254|I_PFAD.v:251" ["byte_1[7:0]"] ["0bxxxxxxxx"] ["SRC1[15:8]", "SRC1[15]", "TmP_1[6:0]", "0b00000000"] ["TmP_5", "TmP_15", "SRC2[4]"],
        _eq 2 "I_PFAD.v:253|I_PFAD.v:251" ["TmP_15"] ["SRC2[4:3]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:252|I_PFAD.v:251" ["TmP_5"] ["SRC2[4:3]"],
        _pmux 7 8 "I_PFAD.v:245|I_PFAD.v:237" ["maske[6:0]"] ["0bxxxxxxx"] ["0b11111111111110111110011110001110000110000010000000000000"] ["TmP_23", "TmP_22", "TmP_21", "TmP_20", "TmP_19", "TmP_18", "TmP_17", "TmP_16"],
        _eq 3 "I_PFAD.v:245|I_PFAD.v:237" ["TmP_16"] ["SRC2[2:0]"] ["0b111"] ,
        _eq 3 "I_PFAD.v:244|I_PFAD.v:237" ["TmP_17"] ["SRC2[2:0]"] ["0b110"] ,
        _eq 3 "I_PFAD.v:243|I_PFAD.v:237" ["TmP_18"] ["SRC2[2:0]"] ["0b101"] ,
        _eq 3 "I_PFAD.v:242|I_PFAD.v:237" ["TmP_19"] ["SRC2[2:0]"] ["0b100"] ,
        _eq 3 "I_PFAD.v:241|I_PFAD.v:237" ["TmP_20"] ["SRC2[2:0]"] ["0b011"] ,
        _eq 3 "I_PFAD.v:240|I_PFAD.v:237" ["TmP_21"] ["SRC2[2:0]"] ["0b010"] ,
        _eq 3 "I_PFAD.v:239|I_PFAD.v:237" ["TmP_22"] ["SRC2[2:0]"] ["0b001"] ,
        _logic_not 3 "I_PFAD.v:238|I_PFAD.v:237" ["TmP_23"] ["SRC2[2:0]"],
        _mux 8 "I_PFAD.v:248" ["byte_0[7:0]"] ["0b00000000"] ["SRC1[7]", "TmP_0[6:0]"] ["TmP_5"],
        _mux 8 "I_PFAD.v:264" ["byte_3[7:0]"] ["SRC1[31:24]"] ["SRC1[31]", "TmP_3[6:0]"] ["TmP_6"],
        _mux 16 "I_PFAD.v:267" ["mdat_0[15:0]"] ["byte_1[7:0]", "byte_0[7:0]"] ["byte_3[7:0]", "byte_2[7:0]"] ["obits[4]"],
        _mux 8 "I_PFAD.v:270" ["mdat_1[7:0]"] ["mdat_0[7:0]"] ["mdat_0[15:8]"] ["obits[3]"],
        _mux 4 "I_PFAD.v:273" ["mdat_2[3:0]"] ["mdat_1[3:0]"] ["mdat_1[7:4]"] ["obits[2]"],
        _mux 5 "I_PFAD.v:286" ["DOUT[4:0]"] ["obits[4:0]"] ["0b00000"] ["FLAG"]
    ] in
    PINST "draw_hier FFS_LOGIK" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let FILTCMP {attrs::(string#string) list} conns =
    let inps = [ "DRAMSZ[2:0]",
                 "RADR[24:0]",
                 "DRAM_A[24:0]" ] in
    let outs = [ "ADR_EQU",
                 "TAGDAT[16:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "adram[5:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _eq 2 "CACHE_LOGIK.v:498|CACHE_LOGIK.v:491" ["TmP_0"] ["DRAMSZ[2:1]"] ["0b11"] ,
        _eq 3 "CACHE_LOGIK.v:497|CACHE_LOGIK.v:491" ["TmP_1"] ["DRAMSZ[2:0]"] ["0b101"] ,
        _eq 3 "CACHE_LOGIK.v:496|CACHE_LOGIK.v:491" ["TmP_2"] ["DRAMSZ[2:0]"] ["0b100"] ,
        _eq 3 "CACHE_LOGIK.v:495|CACHE_LOGIK.v:491" ["TmP_3"] ["DRAMSZ[2:0]"] ["0b011"] ,
        _eq 3 "CACHE_LOGIK.v:494|CACHE_LOGIK.v:491" ["TmP_4"] ["DRAMSZ[2:0]"] ["0b010"] ,
        _eq 3 "CACHE_LOGIK.v:493|CACHE_LOGIK.v:491" ["TmP_5"] ["DRAMSZ[2:0]"] ["0b001"] ,
        _logic_not 3 "CACHE_LOGIK.v:492|CACHE_LOGIK.v:491" ["TmP_6"] ["DRAMSZ[2:0]"],
        _eq 25 "CACHE_LOGIK.v:512" ["ADR_EQU"] ["TAGDAT[16:0]", "RADR[7:0]"] ["adram[5:0]", "DRAM_A[18:0]"] ,
        _pmux 6 7 "CACHE_LOGIK.v:509|CACHE_LOGIK.v:502" ["adram[5:0]"] ["0bxxxxxx"] ["0b00000000000", "DRAM_A[19]", "0b0000", "DRAM_A[20:19]", "0b000", "DRAM_A[21:19]", "0b00", "DRAM_A[22:19]", "0b0", "DRAM_A[23:19]", "DRAM_A[24:19]"] ["TmP_6", "TmP_5", "TmP_4", "TmP_3", "TmP_2", "TmP_1", "TmP_0"],
        _pmux 17 7 "CACHE_LOGIK.v:498|CACHE_LOGIK.v:491" ["TAGDAT[16:0]"] ["0bxxxxxxxxxxxxxxxxx"] ["0b000000", "RADR[18:8]", "0b00000", "RADR[19:8]", "0b0000", "RADR[20:8]", "0b000", "RADR[21:8]", "0b00", "RADR[22:8]", "0b0", "RADR[23:8]", "RADR[24:8]"] ["TmP_6", "TmP_5", "TmP_4", "TmP_3", "TmP_2", "TmP_1", "TmP_0"]
    ] in
    PINST "draw_hier FILTCMP" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let FP_STAT_REG {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "LFSR",
                 "UP_SP",
                 "UP_DP",
                 "TT_SP[4:0]",
                 "TT_DP[4:0]",
                 "WREN",
                 "WRADR[1:0]",
                 "DIN[16:0]" ] in
    let outs = [ "FSR[31:0]",
                 "TWREN",
                 "FPU_TRAP",
                 "SAVE_PC" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1[2:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18[2:0]",
                 "TmP_19[1:0]",
                 "TmP_2[1:0]",
                 "TmP_3",
                 "TmP_4[10:0]",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "flags[4:0]",
                 "iflag",
                 "load_fsr",
                 "rm_bit",
                 "rmflag",
                 "set_bits[10:0]",
                 "set_rm_d",
                 "trap[4:0]",
                 "trap_d[1:0]",
                 "uflag",
                 "update",
                 "update_d",
                 "update_i" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "REGISTERS.v:206" ["load_fsr"] ["LFSR"] ["WREN"] ,
        _and 1 "REGISTERS.v:211" ["TmP_6"] ["UP_SP"] ["TmP_12"] ,
        _and 1 "REGISTERS.v:211" ["TmP_7"] ["UP_DP"] ["TmP_13"] ,
        _and 1 "REGISTERS.v:215" ["TmP_0"] ["TmP_14"] ["TmP_15"] ,
        _and 1 "REGISTERS.v:220" ["TmP_5"] ["WREN"] ["TmP_11"] ,
        _and 1 "REGISTERS.v:221" ["update"] ["update_d"] ["TmP_14"] ,
        _and 1 "REGISTERS.v:224" ["TmP_8"] ["update"] ["trap_d[1]"] ,
        _and 1 "REGISTERS.v:225" ["TmP_9"] ["update"] ["trap_d[0]"] ,
        _and 1 "REGISTERS.v:252" ["TmP_10"] ["set_rm_d"] ["TmP_14"] ,
        _and 1 "REGISTERS.v:262" ["SAVE_PC"] ["TmP_16"] ["TmP_14"] ,
        _eq 2 "REGISTERS.v:220" ["TmP_11"] ["WRADR[1:0]"] ["0b10"] ,
        _logic_reduce_bool 3 "REGISTERS.v:211" ["TmP_12"] ["TT_SP[2:0]"],
        _logic_reduce_bool 3 "REGISTERS.v:211" ["TmP_13"] ["TT_DP[2:0]"],
        _not 1 "REGISTERS.v:211" ["TWREN"] ["TmP_15"],
        _not 1 "REGISTERS.v:262" ["TmP_14"] ["FPU_TRAP"],
        _or 1 "REGISTERS.v:211" ["TmP_15"] ["TmP_6"] ["TmP_7"] ,
        _or 1 "REGISTERS.v:224" ["iflag"] ["TmP_8"] ["flags[4]"] ,
        _or 1 "REGISTERS.v:225" ["uflag"] ["TmP_9"] ["flags[3]"] ,
        _or 1 "REGISTERS.v:226" ["rmflag"] ["TmP_10"] ["rm_bit"] ,
        _or 1 "REGISTERS.v:262" ["TmP_16"] ["UP_SP"] ["UP_DP"] ,
        _adff 11 "REGISTERS.v:255" ["set_bits[10:0]"] ["BRESET"] ["BCLK"] ["TmP_4[10:0]"],
        _adff 1 "REGISTERS.v:246" ["rm_bit"] ["BRESET"] ["BCLK"] ["TmP_3"],
        _adff 3 "REGISTERS.v:237" ["flags[2:0]"] ["BRESET"] ["BCLK"] ["TmP_1[2:0]"],
        _adff 2 "REGISTERS.v:228" ["flags[4:3]"] ["BRESET"] ["BCLK"] ["TmP_2[1:0]"],
        _dff 1 "REGISTERS.v:220" ["set_rm_d"] ["BCLK"] ["TmP_5"],
        _dff 2 "REGISTERS.v:219" ["trap_d[1:0]"] ["BCLK"] ["trap[4:3]"],
        _dff 1 "REGISTERS.v:218" ["update_d"] ["BCLK"] ["SAVE_PC"],
        _adff 1 "REGISTERS.v:213" ["FPU_TRAP"] ["BRESET"] ["BCLK"] ["TmP_0"],
        _mux 11 "REGISTERS.v:258" ["TmP_4[10:0]"] ["set_bits[10:0]"] ["DIN[15:7]", "DIN[5]", "DIN[3]"] ["load_fsr"],
        _mux 1 "REGISTERS.v:252" ["TmP_17"] ["rm_bit"] ["0b1"] ["TmP_10"],
        _mux 1 "REGISTERS.v:250" ["TmP_3"] ["TmP_17"] ["DIN[16]"] ["load_fsr"],
        _mux 3 "REGISTERS.v:243" ["TmP_18[2:0]"] ["flags[2:0]"] ["trap[2:0]"] ["SAVE_PC"],
        _mux 3 "REGISTERS.v:241" ["TmP_1[2:0]"] ["TmP_18[2:0]"] ["DIN[2:0]"] ["load_fsr"],
        _mux 2 "REGISTERS.v:234" ["TmP_19[1:0]"] ["flags[4:3]"] ["iflag", "uflag"] ["update"],
        _mux 2 "REGISTERS.v:232" ["TmP_2[1:0]"] ["TmP_19[1:0]"] ["DIN[6]", "DIN[4]"] ["load_fsr"],
        _mux 5 "REGISTERS.v:208" ["trap[4:0]"] ["TT_DP[4:0]"] ["TT_SP[4:0]"] ["UP_SP"],
        _buf 32 "REGISTERS.v:189" ["FSR[31:0]"] ["0b000000000000000", "rmflag", "set_bits[10:2]", "iflag", "set_bits[1]", "uflag", "set_bits[0]", "flags[2:0]"],
        _buf 1 "REGISTERS.v:202" ["update_i"] ["SAVE_PC"]
    ] in
    PINST "draw_hier FP_STAT_REG" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let GRUPPE_2 {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "PHASE_0",
                 "OPREG[18:0]",
                 "PHASE[3:0]",
                 "SRC_1[6:0]",
                 "SRC_2[6:0]",
                 "REGA1[6:0]",
                 "REGA2[6:0]",
                 "IRRW1[6:0]",
                 "IRRW2[6:0]",
                 "ADRD1[18:0]",
                 "ADRD2[18:0]",
                 "EXR12[18:0]",
                 "EXR22[18:0]",
                 "PHRD1[3:0]",
                 "PHRD2[3:0]",
                 "NXRD1[3:0]",
                 "NXRW2[3:0]",
                 "ACCA[3:0]",
                 "OPERA[10:0]" ] in
    let outs = [ "STATE_0[66:0]",
                 "STATE_GROUP_50[66:0]",
                 "STATE_GROUP_60[66:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[5:0]",
                 "TmP_1",
                 "TmP_10",
                 "TmP_100[66:0]",
                 "TmP_101[66:0]",
                 "TmP_102[66:0]",
                 "TmP_103[66:0]",
                 "TmP_104[66:0]",
                 "TmP_105[66:0]",
                 "TmP_106[66:0]",
                 "TmP_107[6:0]",
                 "TmP_108[6:0]",
                 "TmP_109[6:0]",
                 "TmP_11",
                 "TmP_110[66:0]",
                 "TmP_111[66:0]",
                 "TmP_112[66:0]",
                 "TmP_113[6:0]",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75[66:0]",
                 "TmP_76[66:0]",
                 "TmP_77[66:0]",
                 "TmP_78[66:0]",
                 "TmP_79[66:0]",
                 "TmP_8",
                 "TmP_80[66:0]",
                 "TmP_81[66:0]",
                 "TmP_82[6:0]",
                 "TmP_83[66:0]",
                 "TmP_84[66:0]",
                 "TmP_85[66:0]",
                 "TmP_86[66:0]",
                 "TmP_87[66:0]",
                 "TmP_88[66:0]",
                 "TmP_89[66:0]",
                 "TmP_9",
                 "TmP_90[66:0]",
                 "TmP_91[66:0]",
                 "TmP_92[6:0]",
                 "TmP_93[66:0]",
                 "TmP_94[66:0]",
                 "TmP_95[66:0]",
                 "TmP_96[6:0]",
                 "TmP_97[66:0]",
                 "TmP_98[66:0]",
                 "TmP_99[6:0]",
                 "bwdreg[1:0]",
                 "chkreg[5:0]",
                 "dest_2[5:0]",
                 "exoffset[18:0]",
                 "ext_tos",
                 "get8b_d[3:0]",
                 "get8b_s[3:0]",
                 "imdi[3:0]",
                 "inss_flag",
                 "op_bwd[10:0]",
                 "op_code[4:0]",
                 "op_kust[10:0]",
                 "op_reg[4:0]",
                 "op_reg_reg[4:0]",
                 "op_zext[10:0]",
                 "phchk[7:0]",
                 "phsrc1[7:0]",
                 "phsrc2[7:0]",
                 "rd_reg[6:0]",
                 "re_wr[18:0]",
                 "rexwr[18:0]",
                 "size_dw",
                 "src_1l[6:0]",
                 "src_2l[6:0]",
                 "state_50[66:0]",
                 "state_53[66:0]",
                 "state_54[66:0]",
                 "state_55[66:0]",
                 "state_58[66:0]",
                 "state_59[66:0]",
                 "state_5A[66:0]",
                 "tbit_flag" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "STEUER_MISC.v:848" ["TmP_4"] ["TmP_18"] ["TmP_17"] ,
        _logic_reduce_or 2 "" ["TmP_5"] ["TmP_43", "TmP_33"],
        _logic_reduce_or 6 "" ["TmP_6"] ["TmP_49", "TmP_48", "TmP_47", "TmP_45", "TmP_42", "TmP_34"],
        _logic_reduce_or 7 "" ["TmP_7"] ["TmP_49", "TmP_48", "TmP_47", "TmP_46", "TmP_45", "TmP_42", "TmP_34"],
        _logic_reduce_or 2 "" ["TmP_8"] ["TmP_60", "TmP_59"],
        _logic_reduce_or 4 "" ["TmP_9"] ["TmP_68", "TmP_67", "TmP_66", "TmP_65"],
        _logic_reduce_or 2 "" ["TmP_10"] ["TmP_73", "TmP_72"],
        _logic_reduce_or 3 "" ["TmP_11"] ["TmP_41", "TmP_40", "TmP_39"],
        _logic_reduce_or 2 "" ["TmP_12"] ["TmP_36", "TmP_35"],
        _logic_reduce_or 4 "" ["TmP_13"] ["TmP_41", "TmP_40", "TmP_39", "TmP_37"],
        _eq 4 "STEUER_MISC.v:538" ["TmP_14"] ["PHRD1[3:0]"] ["0b1011"] ,
        _eq 4 "STEUER_MISC.v:548" ["TmP_15"] ["PHRD2[3:0]"] ["0b1011"] ,
        _eq 5 "STEUER_MISC.v:561" ["TmP_16"] ["OPREG[18:14]"] ["0b10111"] ,
        _not 1 "STEUER_MISC.v:551" ["src_2l[0]"] ["SRC_2[0]"],
        _not 1 "STEUER_MISC.v:564" ["TmP_3"] ["OPERA[1]"],
        _not 1 "STEUER_MISC.v:848" ["TmP_18"] ["ACCA[3]"],
        _not 1 "STEUER_MISC.v:848" ["TmP_17"] ["ACCA[1]"],
        _dff 1 "STEUER_MISC.v:573" ["inss_flag"] ["BCLK"] ["TmP_2"],
        _dff 2 "STEUER_MISC.v:570" ["bwdreg[1:0]"] ["BCLK"] ["op_zext[9:8]"],
        _dff 6 "STEUER_MISC.v:567" ["chkreg[5:0]"] ["BCLK"] ["TmP_0[5:0]"],
        _dff 1 "STEUER_MISC.v:565" ["size_dw"] ["BCLK"] ["OPERA[9]"],
        _dff 1 "STEUER_MISC.v:564" ["tbit_flag"] ["BCLK"] ["TmP_3"],
        _dff 1 "STEUER_MISC.v:561" ["ext_tos"] ["BCLK"] ["TmP_1"],
        _dff 5 "STEUER_MISC.v:527" ["op_reg_reg[4:0]"] ["BCLK"] ["op_reg[4:0]"],
        _pmux 67 14 "STEUER_MISC.v:919|STEUER_MISC.v:900" ["STATE_GROUP_60[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["0b000000000000000000000000000xxxxxxxxxxxxxx1", "chkreg[5:0]", "0bx1x010010010000000000000000000000000000110001001111000100000110000101x1011000010000000000000000000000000000000000xxxxxxxxxxxxxx010000101x1011000000000000000000000000000000001101111xxxxxxxxxxxxxx111110111x1011110000000000000000000000000000001101110011110101000000xxxxxx11x1011000011000000000000000000000000000000000xxxxxxxxxxxxxx110000011x1011000000000000", "TmP_112[66:0]", "0b000000000000000000001011001xxxxxxxxxxxxxx1111100x", "OPERA[9:8]", "0b01111010000000000000000000000000000000000010111101xxxxxxx0xxxxxxx1x0100010100000000000000000000000000011000000", "TmP_113[6:0]", "0bxxxxxxx0xxxxxx", "OPERA[10:0]", "0b00100000000000000000000000001101001", "rd_reg[6:0]", "0b011110111111010110110010100000000000000000000000000001011001", "rd_reg[6:0]", "0b01111100xxxxxx01101100101000000000000000000000000000010110101xxxxxxxxxxxxx1111100x1x010001010000", "imdi[3:0]", "0b0000000000000000000001110011xxxxxxxxxxxxx1111100x1x0100010100000000"] ["TmP_32", "TmP_31", "TmP_30", "TmP_29", "TmP_28", "TmP_27", "TmP_26", "TmP_25", "TmP_24", "TmP_23", "TmP_22", "TmP_21", "TmP_20", "TmP_19"],
        _eq 4 "STEUER_MISC.v:919|STEUER_MISC.v:900" ["TmP_19"] ["PHASE[3:0]"] ["0b1011"] ,
        _eq 4 "STEUER_MISC.v:906|STEUER_MISC.v:900" ["TmP_27"] ["PHASE[3:0]"] ["0b1110"] ,
        _eq 4 "STEUER_MISC.v:905|STEUER_MISC.v:900" ["TmP_28"] ["PHASE[3:0]"] ["0b1111"] ,
        _pmux 67 11 "STEUER_MISC.v:895|STEUER_MISC.v:880" ["STATE_GROUP_50[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["state_50[66:0]", "0b101011000001000000001010010xxxxxxx1xxxxxx0xxxxxxx1x0100010100001111", "EXR12[18:0]", "0b01010011", "IRRW1[6:0]", "0b1xxxxxx0xxxxxxx1x0100010100001111", "state_53[66:0]", "state_54[66:0]", "state_55[66:0]", "0b101011000001000000001010111xxxxxxx1xxxxxx0xxxxxxx1x0100010100001111", "EXR22[18:0]", "0b01011000", "IRRW2[6:0]", "0b1xxxxxx0xxxxxxx1x0100010100001111", "state_58[66:0]", "state_59[66:0]", "state_5A[66:0]"] ["TmP_32", "TmP_31", "TmP_30", "TmP_29", "TmP_26", "TmP_25", "TmP_24", "TmP_23", "TmP_22", "TmP_21", "TmP_20"],
        _eq 4 "STEUER_MISC.v:895|STEUER_MISC.v:880" ["TmP_20"] ["PHASE[3:0]"] ["0b1010"] ,
        _eq 4 "STEUER_MISC.v:894|STEUER_MISC.v:880" ["TmP_21"] ["PHASE[3:0]"] ["0b1001"] ,
        _eq 4 "STEUER_MISC.v:893|STEUER_MISC.v:880" ["TmP_22"] ["PHASE[3:0]"] ["0b1000"] ,
        _eq 4 "STEUER_MISC.v:892|STEUER_MISC.v:880" ["TmP_23"] ["PHASE[3:0]"] ["0b0111"] ,
        _eq 4 "STEUER_MISC.v:890|STEUER_MISC.v:880" ["TmP_24"] ["PHASE[3:0]"] ["0b0110"] ,
        _eq 4 "STEUER_MISC.v:888|STEUER_MISC.v:880" ["TmP_25"] ["PHASE[3:0]"] ["0b0101"] ,
        _eq 4 "STEUER_MISC.v:887|STEUER_MISC.v:880" ["TmP_26"] ["PHASE[3:0]"] ["0b0100"] ,
        _eq 4 "STEUER_MISC.v:886|STEUER_MISC.v:880" ["TmP_29"] ["PHASE[3:0]"] ["0b0011"] ,
        _eq 4 "STEUER_MISC.v:885|STEUER_MISC.v:880" ["TmP_30"] ["PHASE[3:0]"] ["0b0010"] ,
        _eq 4 "STEUER_MISC.v:883|STEUER_MISC.v:880" ["TmP_31"] ["PHASE[3:0]"] ["0b0001"] ,
        _logic_not 4 "STEUER_MISC.v:881|STEUER_MISC.v:880" ["TmP_32"] ["PHASE[3:0]"],
        _pmux 67 5 "STEUER_MISC.v:825|STEUER_MISC.v:579" ["state_5A[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]", "0b0000000000000000000011010001xxxxxxxxxxxxx11111100111000000000000000xx0010010000000000001011001", "rd_reg[6:0]", "0b01111010xxxxxxx1x01000101000000000000000000000000000000000000111101", "TmP_96[6:0]", "0b1", "chkreg[5:0]", "OPERA[10:0]", "0b0010000000000000000000000000110000101111010100001011110101x1011110001000000"] ["TmP_37", "TmP_36", "TmP_35", "TmP_34", "TmP_33"],
        _pmux 67 10 "STEUER_MISC.v:825|STEUER_MISC.v:579" ["state_59[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["0b000000000000000000001100111011110101111100xxxxxx11x0101010000000000", "TmP_78[66:0]", "TmP_80[66:0]", "TmP_84[66:0]", "TmP_88[66:0]", "0bxx00100100000000011011000000111100xxxxxxx0xxxxxxx1x0100010100000000000000000000000000000011111xxxxxxx", "TmP_92[6:0]", "TmP_17", "SRC_2[5:0]", "OPERA[10:0]", "0b10000000000000000000000000001011010011111001111000xxxxxx", "OPERA[10:0]", "0b00100000000000000000000000001100010", "TmP_92[6:0]", "0b0111100110000101x1011000010000000000000000000000000001011010", "TmP_109[6:0]", "TmP_92[6:0]", "0b111110101x1011110010000000"] ["TmP_42", "TmP_41", "TmP_40", "TmP_37", "TmP_36", "TmP_35", "TmP_39", "TmP_34", "TmP_38", "TmP_33"],
        _pmux 67 12 "STEUER_MISC.v:846|STEUER_MISC.v:579" ["state_58[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["0bxx0010000000000001001100101xxxxxxxxxxxxxx1111110x1x010010010000111000101111xx000000011010110010111101xxxxxxx0xxxxxxx", "OPERA[9:8]", "0b0100010100000001000000000000000000001011001xxxxxxxxxxxxxx0xxxxxxx1x0100010100001000000000000000000000001011001", "rd_reg[6:0]", "0b011110111111010110110010100001110000000000000000000001010101xxxxxxxxxxxxxx0xxxxxxx1x01000101000000000000000000000000000010101011xxxxxxxxxxxxx1111100x", "op_zext[9:8]", "0b0111011000000000", "TmP_91[66:0]", "TmP_95[66:0]", "0b0000000000000000000010110011xxxxxx01111010xxxxxx01x101100000100", "get8b_d[3:0]", "0b00000000000000000000110111001111011xxxxxx0xxxxxx11x1011000011000000000000000000000000001011001", "TmP_107[6:0]", "0b1xxxxxx0xxxxxx01x101111000100", "get8b_d[3:0]", "0b000000000000000000001100011", "TmP_107[6:0]", "0b1xxxxxx0xxxxxx11x1011110011000000"] ["TmP_42", "TmP_41", "TmP_40", "TmP_37", "TmP_36", "TmP_35", "TmP_39", "TmP_34", "TmP_38", "TmP_44", "TmP_33", "TmP_43"],
        _pmux 67 6 "STEUER_MISC.v:846|STEUER_MISC.v:579" ["state_55[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["exoffset[18:0]", "0b01010100", "rd_reg[6:0]", "0bxxxxxxx0xxxxxxx1x0100010100000001", "exoffset[18:0]", "0b01101010", "rd_reg[6:0]", "0bxxxxxxx0xxxxxxx1x0100010100000001000000000000000000001011010", "rd_reg[6:0]", "0b0111101111110101101111000000000000000000000000000000010101001xxxxxxxxxxxxx1111100x1x0100010100000000000000000000000000001010100xxxxxxxxxxxxxx111110111x1011110000000000", "ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["TmP_37", "TmP_36", "TmP_35", "TmP_34", "TmP_44", "TmP_5"],
        _pmux 67 12 "STEUER_MISC.v:825|STEUER_MISC.v:579" ["state_54[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["0b000000000000000000001100110xxxxxxxxxxxxxx1111101x1x0100100100000000", "ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]", "TmP_79[66:0]", "TmP_83[66:0]", "TmP_87[66:0]", "TmP_89[66:0]", "TmP_90[66:0]", "TmP_94[66:0]", "0bxx00100111000000000011100110111101", "rd_reg[6:0]", "0b0xxxxxxx1x0100010100000000000000000000000000001100100", "TmP_99[6:0]", "0b0100000111110101x1011110010000000", "TmP_102[66:0]", "0b0000000000000000000010101011xxxxxxxxxxxxx1111100x1x0100010100000000"] ["TmP_46", "TmP_41", "TmP_40", "TmP_37", "TmP_36", "TmP_35", "TmP_39", "TmP_34", "TmP_45", "TmP_38", "TmP_44", "TmP_33"],
        _pmux 67 14 "STEUER_MISC.v:846|STEUER_MISC.v:579" ["state_53[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b1111101x1x010010010000", "NXRW2[3:0]", "0b000000000000000000001100110xxxxxxxxxxxxxx1111101x1x01001001000000000000000000000000000011010111xxxxxxxxxxxxx1111101x1x0100010100000000000000000000000000000000000xxxxxxxxxxxxxx0xxxxxxx1x1110000000100000xx00101000000000001010101001xxxxxxxxxxxxx0xxxxxxx", "OPERA[9:8]", "0b0100010100000000000000000000000000001010101xxxxxxxxxxxxxx0xxxxxxx1x01000101000000000000000000000000000010101001xxxxxxxxxxxxx1111101x", "op_zext[9:8]", "0b01110110000000000000000000000000000010101001xxxxxxxxxxxxx1111101x1x010001010000000000000000000000000000101010", "size_dw", "0b1xxxxxxxxxxxxx1111101x1x0100010100000000000000000000000000001010100xxxxxxxxxxxxxx1111101x1x01001001000000000000000000000000000010101001xxxxxx0100001011110101x101111000100", "get8b_s[3:0]", "0b0000000000000000000010101011xxxxxx01000000xxxxxx11x1011110011000000", "TmP_106[66:0]", "TmP_111[66:0]"] ["TmP_42", "TmP_49", "TmP_48", "TmP_47", "TmP_46", "TmP_37", "TmP_12", "TmP_11", "TmP_34", "TmP_45", "TmP_38", "TmP_44", "TmP_33", "TmP_43"],
        _pmux 67 6 "STEUER_MISC.v:846|STEUER_MISC.v:579" ["state_50[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["TmP_86[66:0]", "TmP_77[66:0]", "ADRD1[18:0]", "phsrc1[7:0]", "IRRW1[6:0]", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]", "TmP_98[66:0]", "TmP_101[66:0]", "TmP_105[66:0]"] ["TmP_12", "TmP_13", "TmP_7", "TmP_38", "TmP_44", "TmP_5"],
        _pmux 67 9 "STEUER_MISC.v:846|STEUER_MISC.v:579" ["STATE_0[66:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["0b000000000000000000001100111000000100000100xxxxxx11x0101010000000000", "TmP_75[66:0]", "TmP_85[66:0]", "TmP_76[66:0]", "ADRD1[18:0]", "phsrc1[7:0]", "0bxxxxxxx", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]", "TmP_97[66:0]", "TmP_100[66:0]", "TmP_104[66:0]", "TmP_110[66:0]"] ["TmP_50", "TmP_46", "TmP_12", "TmP_13", "TmP_6", "TmP_38", "TmP_44", "TmP_33", "TmP_43"],
        _eq 5 "STEUER_MISC.v:846|STEUER_MISC.v:579" ["TmP_43"] ["op_reg[4:0]"] ["0b01111"] ,
        _eq 5 "STEUER_MISC.v:825|STEUER_MISC.v:579" ["TmP_33"] ["op_reg[4:0]"] ["0b01110"] ,
        _eq 5 "STEUER_MISC.v:808|STEUER_MISC.v:579" ["TmP_44"] ["op_reg[4:0]"] ["0b01101"] ,
        _eq 5 "STEUER_MISC.v:791|STEUER_MISC.v:579" ["TmP_38"] ["op_reg[4:0]"] ["0b01100"] ,
        _eq 5 "STEUER_MISC.v:780|STEUER_MISC.v:579" ["TmP_45"] ["op_reg[4:0]"] ["0b11100"] ,
        _eq 5 "STEUER_MISC.v:762|STEUER_MISC.v:579" ["TmP_34"] ["op_reg[4:0]"] ["0b11000"] ,
        _eq 5 "STEUER_MISC.v:742|STEUER_MISC.v:579" ["TmP_39"] ["op_reg[4:0]"] ["0b10111"] ,
        _eq 5 "STEUER_MISC.v:725|STEUER_MISC.v:579" ["TmP_35"] ["op_reg[4:0]"] ["0b11101"] ,
        _eq 5 "STEUER_MISC.v:706|STEUER_MISC.v:579" ["TmP_36"] ["op_reg[4:0]"] ["0b11011"] ,
        _eq 5 "STEUER_MISC.v:684|STEUER_MISC.v:579" ["TmP_37"] ["op_reg[4:0]"] ["0b11010"] ,
        _eq 5 "STEUER_MISC.v:665|STEUER_MISC.v:579" ["TmP_40"] ["op_reg[4:0]"] ["0b10101"] ,
        _eq 5 "STEUER_MISC.v:648|STEUER_MISC.v:579" ["TmP_41"] ["op_reg[4:0]"] ["0b10100"] ,
        _eq 5 "STEUER_MISC.v:635|STEUER_MISC.v:579" ["TmP_46"] ["op_reg[4:0]"] ["0b10011"] ,
        _eq 5 "STEUER_MISC.v:624|STEUER_MISC.v:579" ["TmP_47"] ["op_reg[4:0]"] ["0b11111"] ,
        _eq 5 "STEUER_MISC.v:613|STEUER_MISC.v:579" ["TmP_48"] ["op_reg[4:0]"] ["0b11110"] ,
        _eq 5 "STEUER_MISC.v:602|STEUER_MISC.v:579" ["TmP_49"] ["op_reg[4:0]"] ["0b10010"] ,
        _eq 5 "STEUER_MISC.v:591|STEUER_MISC.v:579" ["TmP_42"] ["op_reg[4:0]"] ["0b10001"] ,
        _eq 5 "STEUER_MISC.v:580|STEUER_MISC.v:579" ["TmP_50"] ["op_reg[4:0]"] ["0b10000"] ,
        _mux 1 "STEUER_MISC.v:573" ["TmP_2"] ["inss_flag"] ["OPREG[6]"] ["PHASE_0"],
        _mux 2 "STEUER_MISC.v:570" ["op_zext[9:8]"] ["bwdreg[1:0]"] ["OPREG[9:8]"] ["PHASE_0"],
        _mux 6 "STEUER_MISC.v:567" ["TmP_0[5:0]"] ["chkreg[5:0]"] ["0b000", "OPREG[13:11]"] ["PHASE_0"],
        _mux 1 "STEUER_MISC.v:561" ["TmP_1"] ["ext_tos"] ["TmP_16"] ["PHASE_0"],
        _pmux 8 2 "STEUER_MISC.v:543|STEUER_MISC.v:541" ["phsrc2[7:0]"] ["0b01011000"] ["0b0101011001010111"] ["TmP_52", "TmP_51"],
        _eq 4 "STEUER_MISC.v:543|STEUER_MISC.v:541" ["TmP_51"] ["PHRD2[3:0]"] ["0b0110"] ,
        _eq 4 "STEUER_MISC.v:542|STEUER_MISC.v:541" ["TmP_52"] ["PHRD2[3:0]"] ["0b0101"] ,
        _pmux 8 2 "STEUER_MISC.v:533|STEUER_MISC.v:531" ["phsrc1[7:0]"] ["0b01010011"] ["0b0101000101010010"] ["TmP_54", "TmP_53"],
        _eq 4 "STEUER_MISC.v:533|STEUER_MISC.v:531" ["TmP_53"] ["PHRD1[3:0]"] ["0b0110"] ,
        _eq 4 "STEUER_MISC.v:532|STEUER_MISC.v:531" ["TmP_54"] ["PHRD1[3:0]"] ["0b0101"] ,
        _mux 5 "STEUER_MISC.v:527" ["op_reg[4:0]"] ["op_reg_reg[4:0]"] ["op_code[4:0]"] ["PHASE_0"],
        _pmux 5 15 "STEUER_MISC.v:523|STEUER_MISC.v:503" ["op_code[4:0]"] ["0b00xxx"] ["0b011", "OPREG[10]", "OPREG[8]", "0b1000010001100101001110100101011011111000110101101111100111011111011111"] ["TmP_74", "TmP_10", "TmP_71", "TmP_70", "TmP_69", "TmP_9", "TmP_64", "TmP_63", "TmP_62", "TmP_61", "TmP_8", "TmP_58", "TmP_57", "TmP_56", "TmP_55"],
        _eq 11 "STEUER_MISC.v:523|STEUER_MISC.v:503" ["TmP_55"] ["OPREG[13:11]", "OPREG[7:0]"] ["0b00000011110"] ,
        _eq 9 "STEUER_MISC.v:522|STEUER_MISC.v:503" ["TmP_56"] ["OPREG[10:2]"] ["0b000011111"] ,
        _eq 9 "STEUER_MISC.v:521|STEUER_MISC.v:503" ["TmP_57"] ["OPREG[10]", "OPREG[7:0]"] ["0b100101110"] ,
        _eq 9 "STEUER_MISC.v:520|STEUER_MISC.v:503" ["TmP_58"] ["OPREG[10]", "OPREG[7:0]"] ["0b001101110"] ,
        _eq 12 "STEUER_MISC.v:519|STEUER_MISC.v:503" ["TmP_59"] ["OPREG[13:10]", "OPREG[7:0]"] ["0b001011001110"] ,
        _eq 9 "STEUER_MISC.v:518|STEUER_MISC.v:503" ["TmP_60"] ["OPREG[10]", "OPREG[7:0]"] ["0b010101110"] ,
        _eq 9 "STEUER_MISC.v:517|STEUER_MISC.v:503" ["TmP_61"] ["OPREG[10]", "OPREG[7:0]"] ["0b000101110"] ,
        _eq 9 "STEUER_MISC.v:516|STEUER_MISC.v:503" ["TmP_62"] ["OPREG[10]", "OPREG[7:0]"] ["0b011101110"] ,
        _eq 11 "STEUER_MISC.v:515|STEUER_MISC.v:503" ["TmP_63"] ["OPREG[13:12]", "OPREG[10]", "OPREG[7:0]"] ["0b10111001110"] ,
        _eq 12 "STEUER_MISC.v:514|STEUER_MISC.v:503" ["TmP_64"] ["OPREG[13:10]", "OPREG[7:0]"] ["0b001111001110"] ,
        _eq 12 "STEUER_MISC.v:513|STEUER_MISC.v:503" ["TmP_65"] ["OPREG[13:10]", "OPREG[7:0]"] ["0b111001001110"] ,
        _eq 10 "STEUER_MISC.v:512|STEUER_MISC.v:503" ["TmP_66"] ["OPREG[13]", "OPREG[11]", "OPREG[7:0]"] ["0b0101001110"] ,
        _eq 6 "STEUER_MISC.v:511|STEUER_MISC.v:503" ["TmP_67"] ["OPREG[5:0]"] ["0b110111"] ,
        _eq 5 "STEUER_MISC.v:510|STEUER_MISC.v:503" ["TmP_68"] ["OPREG[5:1]"] ["0b11010"] ,
        _eq 9 "STEUER_MISC.v:509|STEUER_MISC.v:503" ["TmP_69"] ["OPREG[10:2]"] ["0b111011111"] ,
        _eq 8 "STEUER_MISC.v:508|STEUER_MISC.v:503" ["TmP_70"] ["OPREG[9:2]"] ["0b10011111"] ,
        _eq 11 "STEUER_MISC.v:507|STEUER_MISC.v:503" ["TmP_71"] ["OPREG[13:11]", "OPREG[7:0]"] ["0b00011001110"] ,
        _eq 12 "STEUER_MISC.v:506|STEUER_MISC.v:503" ["TmP_72"] ["OPREG[13:10]", "OPREG[7:0]"] ["0b001100001110"] ,
        _eq 11 "STEUER_MISC.v:505|STEUER_MISC.v:503" ["TmP_73"] ["OPREG[13:11]", "OPREG[7:0]"] ["0b00000001110"] ,
        _eq 8 "STEUER_MISC.v:504|STEUER_MISC.v:503" ["TmP_74"] ["OPREG[7:0]"] ["0b11111110"] ,
        _mux 4 "STEUER_MISC.v:538" ["get8b_s[3:0]"] ["0b0000"] ["0b1100"] ["TmP_14"],
        _mux 4 "STEUER_MISC.v:548" ["get8b_d[3:0]"] ["0b0000"] ["0b1100"] ["TmP_15"],
        _mux 7 "STEUER_MISC.v:568" ["rd_reg[6:0]"] ["0b0", "chkreg[5:0]"] ["0b0000", "OPREG[13:11]"] ["PHASE_0"],
        _mux 4 "STEUER_MISC.v:574" ["imdi[3:0]"] ["0b1110"] ["0b1000"] ["inss_flag"],
        _mux 19 "STEUER_MISC.v:576" ["exoffset[18:0]"] ["0b1010111100000000011"] ["0b1010110000000000011"] ["inss_flag"],
        _mux 67 "STEUER_MISC.v:639" ["TmP_75[66:0]"] ["0bxx0010100000000000101010100", "SRC_1[6:0]", "0bxxxxxxx0xxxxxxx", "OPERA[9:8]", "0b0100010100000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "0bxxxxxxx", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:662" ["TmP_78[66:0]"] ["EXR22[18:17]", "0b0101000000000001100100111xxxxxxx1xxxxxx0xxxxxx", "OPERA[10:0]", "0b00100001"] ["0b000000000000000000000000000xxxxxxx1xxxxxx0xxxxxx", "OPERA[10:0]", "0b00100000"] ["tbit_flag"],
        _mux 67 "STEUER_MISC.v:676" ["TmP_79[66:0]"] ["0b000000000000000000001011001xxxxxxxxxxxxxx0xxxxxxx1x0100010100001000"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:681" ["TmP_80[66:0]"] ["0b0000000000000000000000000001xxxxxx01111011", "SRC_2[5:0]", "OPERA[10:0]", "0b00000000"] ["EXR22[18:17]", "0b01010000", "ext_tos", "0b00000011001001111xxxxxx01111010xxxxxx", "OPERA[10:0]", "0b00100001"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:696" ["TmP_81[66:0]"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["0b0000000000000000000010110101xxxxxxxxxxxxx1111101x1x0100010100000000"] ["ACCA[3]"],
        _mux 7 "STEUER_MISC.v:697" ["TmP_82[6:0]"] ["0b0111101"] ["0b1xxxxxx"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:698" ["TmP_83[66:0]"] ["0b000000000000000000001011001", "rd_reg[6:0]", "TmP_82[6:0]", "0b11111010110110010100001110"] ["TmP_81[66:0]"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:703" ["TmP_84[66:0]"] ["0b000000000000000000000000000xxxxxxx01111011", "SRC_2[5:0]", "OPERA[10:0]", "0b00000000"] ["EXR22[18:17]", "0b01010000", "ext_tos", "0b0000001100100111xxxxxxx01111010xxxxxx", "OPERA[10:0]", "0b00100001"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:717" ["TmP_87[66:0]"] ["0b000000000000000000001011010", "SRC_2[6:0]", "0bxxxxxxx1111100x1x010001010000", "imdi[3:0]"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:722" ["TmP_88[66:0]"] ["0b000000000000000000000000000011110101111001", "SRC_2[5:0]", "OPERA[10:0]", "0b00000000"] ["EXR22[18:17]", "0b0101000000000001100100111011110101111000xxxxxx", "OPERA[10:0]", "0b00100001"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:729" ["TmP_85[66:0]"] ["0b000000000000000000001010100", "SRC_1[6:0]", "0bxxxxxxx1111101x", "op_zext[9:8]", "0b0111011000000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "0bxxxxxxx", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:732" ["TmP_86[66:0]"] ["0b000000000000000000001010100", "SRC_1[6:0]", "0bxxxxxxx1111101x", "op_zext[9:8]", "0b0111011000000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "IRRW1[6:0]", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:736" ["TmP_89[66:0]"] ["0b000000000000000000001010101", "SRC_2[6:0]", "0bxxxxxxx1111100x", "op_zext[9:8]", "0b0111011000000000"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:746" ["TmP_76[66:0]"] ["0b000000000000000000001010100", "SRC_1[6:0]", "0bxxxxxxx1111101x1x0100010100000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "0bxxxxxxx", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:749" ["TmP_77[66:0]"] ["0b000000000000000000001010100", "SRC_1[6:0]", "0bxxxxxxx1111101x1x0100010100000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "IRRW1[6:0]", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:753" ["TmP_90[66:0]"] ["0b0000000000000000000010110010111101", "SRC_2[6:0]", "0b0xxxxxx", "OPERA[10:0]", "0b01000000"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:757" ["TmP_91[66:0]"] ["0b00000000000000000000001111101111011xxxxxx0xxxxxx", "OPERA[10:0]", "0b11000000"] ["0b00000000000000000000101100101111011xxxxxx0xxxxxx", "OPERA[10:0]", "0b01000000"] ["size_dw"],
        _mux 67 "STEUER_MISC.v:771" ["TmP_93[66:0]"] ["0b0000000000000000000000000000111101", "SRC_2[6:0]", "0b1", "chkreg[5:0]", "OPERA[10:0]", "0b00100000"] ["0b000000000000000000001011010", "SRC_2[6:0]", "0b01111000xxxxxx", "OPERA[10:0]", "0b00100000"] ["size_dw"],
        _mux 67 "STEUER_MISC.v:771" ["TmP_94[66:0]"] ["TmP_93[66:0]"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:775" ["TmP_95[66:0]"] ["0b00000000000000000000000000001111011xxxxxx1", "chkreg[5:0]", "OPERA[10:0]", "0b00100000"] ["0b0000000000000000000010110011xxxxxxxxxxxxx1111110x1x0100010100000000"] ["size_dw"],
        _mux 7 "STEUER_MISC.v:777" ["TmP_96[6:0]"] ["SRC_2[6:0]"] ["0b0111110"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:795" ["TmP_97[66:0]"] ["0b000000000000000000001010100", "SRC_1[6:0]", "0b0100001011110101x1011110001000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "0bxxxxxxx", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:798" ["TmP_98[66:0]"] ["0b000000000000000000001010100", "SRC_1[6:0]", "0b0100001011110101x1011110001000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "IRRW1[6:0]", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 7 "STEUER_MISC.v:800" ["TmP_99[6:0]"] ["SRC_1[6:1]", "0b0"] ["0b1xxxxxx"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:812" ["TmP_100[66:0]"] ["0b000000000000000000001010101", "SRC_1[6:0]", "0b01000000xxxxxx11x1011110011000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "0bxxxxxxx", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:815" ["TmP_101[66:0]"] ["0b000000000000000000001010101", "SRC_1[6:0]", "0b01000000xxxxxx11x1011110011000000"] ["ADRD1[18:0]", "phsrc1[7:0]", "IRRW1[6:0]", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:819" ["TmP_102[66:0]"] ["0b0000000000000000000011011100111101", "SRC_2[6:0]", "0b0xxxxxx11x1011000011000000"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ACCA[1]"],
        _mux 67 "STEUER_MISC.v:831" ["TmP_104[66:0]"] ["TmP_103[66:0]"] ["0b000000000000000000001011001", "SRC_1[6:0]", "SRC_2[6:0]", "0b0xxxxxx01x1011110001000000"] ["TmP_4"],
        _mux 67 "STEUER_MISC.v:837" ["TmP_106[66:0]"] ["0b0000000000000000000010110011xxxxxx", "SRC_2[6:0]", "0b0xxxxxx01x101111000100", "get8b_s[3:0]"] ["0b0000000000000000000010101001xxxxxxxxxxxxx1111101x1x010001010000", "get8b_s[3:0]"] ["ACCA[1]"],
        _mux 7 "STEUER_MISC.v:842" ["TmP_92[6:0]"] ["SRC_2[6:1]", "src_2l[0]"] ["0b1xxxxxx"] ["ACCA[1]"],
        _mux 7 "STEUER_MISC.v:842" ["TmP_108[6:0]"] ["0b1xxxxxx"] ["0b0111100"] ["ACCA[1]"],
        _mux 7 "STEUER_MISC.v:842" ["TmP_109[6:0]"] ["SRC_1[6:1]", "0b0"] ["TmP_108[6:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:852" ["TmP_103[66:0]"] ["ADRD2[18:0]", "phsrc2[7:0]", "0bxxxxxxx", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ADRD1[18:0]", "phsrc1[7:0]", "0bxxxxxxx", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:852" ["TmP_110[66:0]"] ["TmP_103[66:0]"] ["0b000000000000000000001100011", "SRC_1[6:0]", "SRC_2[6:0]", "0b0xxxxxx11x1011110011000000"] ["TmP_4"],
        _mux 67 "STEUER_MISC.v:855" ["TmP_105[66:0]"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b0xxxxxxx1x010001010000", "NXRW2[3:0]"] ["ADRD1[18:0]", "phsrc1[7:0]", "IRRW1[6:0]", "REGA1[6:0]", "0b0xxxxxxx1x010001010000", "NXRD1[3:0]"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:858" ["TmP_111[66:0]"] ["0b0000000000000000000011000111xxxxxx", "SRC_2[6:0]", "0b0xxxxxx11x1011110011000000"] ["0b0000000000000000000010101011xxxxxxxxxxxxx1111101x1x0100010100000000"] ["ACCA[1]"],
        _mux 7 "STEUER_MISC.v:861" ["TmP_107[6:0]"] ["SRC_1[6:0]"] ["0b0111101"] ["ACCA[3]"],
        _mux 67 "STEUER_MISC.v:909" ["TmP_112[66:0]"] ["0b000000000000000000001011001", "SRC_2[6:0]", "0b0111101011110101x1011000001000000"] ["ADRD2[18:0]", "phsrc2[7:0]", "IRRW2[6:0]", "REGA2[6:0]", "0b011110101x101111000000", "NXRW2[3:0]"] ["ACCA[1]"],
        _mux 7 "STEUER_MISC.v:912" ["TmP_113[6:0]"] ["0b0000000"] ["0b0111100"] ["op_reg_reg[0]"],
        _buf 6 "STEUER_MISC.v:461" ["dest_2[5:0]"] ["SRC_2[5:0]"],
        _buf 11 "STEUER_MISC.v:457" ["op_bwd[10:0]"] ["0bx", "OPERA[9:8]", "0b01000101"],
        _buf 11 "STEUER_MISC.v:457" ["op_kust[10:0]"] ["0bx", "OPERA[9:8]", "0b01111010"],
        _buf 9 "" ["op_zext[10]", "op_zext[7:0]"] ["0bx01110110"],
        _buf 8 "STEUER_MISC.v:458" ["phchk[7:0]"] ["0b0101010", "size_dw"],
        _buf 19 "STEUER_MISC.v:456" ["re_wr[18:0]"] ["EXR22[18:17]", "0b01010000000000011"],
        _buf 19 "STEUER_MISC.v:456" ["rexwr[18:0]"] ["EXR22[18:17]", "0b01010000", "ext_tos", "0b00000011"],
        _buf 7 "STEUER_MISC.v:460" ["src_1l[6:0]"] ["SRC_1[6:1]", "0b0"],
        _buf 6 "" ["src_2l[6:1]"] ["SRC_2[6:1]"]
    ] in
    PINST "draw_hier GRUPPE_2" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let ICACHE {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "DRAMSZ[2:0]",
                 "MDONE",
                 "BRESET",
                 "READ_I",
                 "IO_READY",
                 "PSR_USER",
                 "DATA_HOLD",
                 "PTB_WR",
                 "PTB_SEL",
                 "DRAM_WR",
                 "KDET",
                 "HOLD",
                 "CFG[1:0]",
                 "DRAM_Q[127:0]",
                 "CINVAL[1:0]",
                 "IC_SIGS[1:0]",
                 "IO_Q[31:0]",
                 "IVAR[1:0]",
                 "IVAR_MUX",
                 "VADR_D[19:0]",
                 "KOLLI_A[24:0]",
                 "MCR_FLAGS[3:0]",
                 "MMU_DIN[23:0]",
                 "VADR_I[31:0]",
                 "INHIBIT",
                 "ENA_HK",
                 "ENDRAM" ] in
    let outs = [ "IO_RD",
                 "DRAM_ACC",
                 "INIT_RUN",
                 "PROT_ERROR",
                 "ACC_OK",
                 "IC_PREQ",
                 "KOLLISION",
                 "STOP_CINV",
                 "DRAM_A[28:0]",
                 "IC_DQ[31:0]",
                 "IC_VA[19:0]",
                 "ICTODC[3:0]",
                 "IO_A[31:0]" ] in
    let ints = md_extract_vectors [ "ACOK",
                 "ACV[4:0]",
                 "ALT_DAT[31:0]",
                 "AUX_ALT",
                 "AUX_DAT",
                 "A_CV[4:0]",
                 "CAPDAT[31:0]",
                 "CAP_Q[31:0]",
                 "CA_HIT",
                 "CA_SET",
                 "CI",
                 "CUPDATE",
                 "CVALID[23:0]",
                 "DAT_MV[31:0]",
                 "DFFE_IOR[31:0]",
                 "DFF_HDFF1",
                 "DFF_IRD_REG",
                 "D_CV[23:0]",
                 "HIT_ALL",
                 "HOLD_ON",
                 "INIT_CA_RUN",
                 "IO_ACC",
                 "IO_SPACE",
                 "KCVALID[23:0]",
                 "KILL",
                 "KILLADR[4:0]",
                 "KILL_C",
                 "KILL_K",
                 "KTAG0[16:0]",
                 "KTAG1[16:0]",
                 "LAST_MUX",
                 "LD_DRAM_A",
                 "MMU_HIT",
                 "MMU_Q[35:0]",
                 "MVALID[31:0]",
                 "NEWCVAL[23:0]",
                 "NEW_PTB",
                 "NEW_PTB_RUN",
                 "PTB_ONE",
                 "RADR[19:0]",
                 "RADR_MV[3:0]",
                 "RDDATA0[127:0]",
                 "RDDATA1[127:0]",
                 "READ",
                 "RMW",
                 "RUN_ICRD",
                 "SET_DAT[31:0]",
                 "SET_DAT0[31:0]",
                 "SET_DAT1[31:0]",
                 "STOP_ICRD",
                 "TAG0[16:0]",
                 "TAG1[16:0]",
                 "TAGDAT[16:0]",
                 "TmP_0[7:0]",
                 "TmP_1[127:0]",
                 "TmP_10[16:0]",
                 "TmP_11[16:0]",
                 "TmP_12[7:0]",
                 "TmP_13[35:0]",
                 "TmP_14[35:0]",
                 "TmP_15[3:0]",
                 "TmP_16[31:0]",
                 "TmP_17[31:0]",
                 "TmP_18[31:0]",
                 "TmP_19[31:0]",
                 "TmP_2[127:0]",
                 "TmP_20[28:0]",
                 "TmP_21",
                 "TmP_22[31:0]",
                 "TmP_23[16:0]",
                 "TmP_24[16:0]",
                 "TmP_25[35:0]",
                 "TmP_26[31:0]",
                 "TmP_27[127:0]",
                 "TmP_28[127:0]",
                 "TmP_29[16:0]",
                 "TmP_3[7:0]",
                 "TmP_30[16:0]",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34[7:0]",
                 "TmP_35[127:0]",
                 "TmP_36[127:0]",
                 "TmP_37[7:0]",
                 "TmP_38[127:0]",
                 "TmP_39[127:0]",
                 "TmP_4[127:0]",
                 "TmP_40[7:0]",
                 "TmP_41[16:0]",
                 "TmP_42[16:0]",
                 "TmP_43[7:0]",
                 "TmP_44[16:0]",
                 "TmP_45[16:0]",
                 "TmP_46[7:0]",
                 "TmP_47[35:0]",
                 "TmP_48[35:0]",
                 "TmP_49[3:0]",
                 "TmP_5[127:0]",
                 "TmP_50[31:0]",
                 "TmP_51[31:0]",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6[7:0]",
                 "TmP_7[16:0]",
                 "TmP_8[16:0]",
                 "TmP_9[7:0]",
                 "UPCD[23:0]",
                 "UPDATE_C[23:0]",
                 "UPDATE_M[31:0]",
                 "USER",
                 "USE_CA",
                 "VADR[31:0]",
                 "VADR_R[31:0]",
                 "VIRTUELL",
                 "VIRT_A",
                 "V_ADR[4:0]",
                 "WADR_MV[3:0]",
                 "WEMV",
                 "WE_CV",
                 "WRCRAM0",
                 "WRCRAM1",
                 "WRITE",
                 "WRSET0",
                 "WRSET1",
                "DATA0[255:0][127:0]",
                "DATA1[255:0][127:0]",
                "KTAGSET_0[255:0][16:0]",
                "KTAGSET_1[255:0][16:0]",
                "MMU_TAGS[255:0][35:0]",
                "MMU_VALID[15:0][31:0]",
                "TAGSET_0[255:0][16:0]",
                "TAGSET_1[255:0][16:0]" ] in
    let DATA0 = "DATA0[255:0][127:0]" in
    let DATA1 = "DATA1[255:0][127:0]" in
    let KTAGSET_0 = "KTAGSET_0[255:0][16:0]" in
    let KTAGSET_1 = "KTAGSET_1[255:0][16:0]" in
    let MMU_TAGS = "MMU_TAGS[255:0][35:0]" in
    let MMU_VALID = "MMU_VALID[15:0][31:0]" in
    let TAGSET_0 = "TAGSET_0[255:0][16:0]" in
    let TAGSET_1 = "TAGSET_1[255:0][16:0]" in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        CA_MATCH [("instance", "DCA_COMPARE"), ("src", "ICACHE.v:304")] [
                ("ADDR[27:0]",["RADR[19:0]", "VADR_R[11:4]"]),
                ("CA_HIT",["CA_HIT"]),
                ("CA_SET",["CA_SET"]),
                ("CFG[1:0]",["CFG[1:0]"]),
                ("CI",["CI"]),
                ("CVALID[23:0]",["CVALID[23:0]"]),
                ("DC_ILO",["0b0"]),
                ("DRAMSZ[2:0]",["DRAMSZ[2:0]"]),
                ("ENDRAM",["ENDRAM"]),
                ("INVAL_L",["CINVAL[0]"]),
                ("IO_SPACE",["IO_SPACE"]),
                ("KDET",["0b0"]),
                ("KILL",["KILL_C"]),
                ("MMU_HIT",["MMU_HIT"]),
                ("TAG0[16:0]",["TAG0[16:0]"]),
                ("TAG1[16:0]",["TAG1[16:0]"]),
                ("UPDATE[23:0]",["UPDATE_C[23:0]"]),
                ("USE_CA",["USE_CA"]),
                ("--WB_ACC[7:0]",[]),
                ("WRITE",["0b0"])],
        DCA_CONTROL [("instance", "DCA_CTRL"), ("src", "ICACHE.v:326")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CA_SET",["CA_SET"]),
                ("CUPDATE",["CUPDATE"]),
                ("DAT_CV[23:0]",["D_CV[23:0]"]),
                ("DRAM_ACC",["DRAM_ACC"]),
                ("HIT_ALL",["HIT_ALL"]),
                ("INHIBIT",["INHIBIT"]),
                ("INIT_CA_RUN",["INIT_CA_RUN"]),
                ("INVAL_A",["CINVAL[1]"]),
                ("KILL",["KILL"]),
                ("MDONE",["MDONE"]),
                ("UPDATE[23:0]",["UPCD[23:0]"]),
                ("USE_CA",["DRAM_A[1]"]),
                ("VADR_R[4:0]",["VADR_R[11:7]"]),
                ("WADR_CV[4:0]",["A_CV[4:0]"]),
                ("WE_CV",["WE_CV"]),
                ("WRCRAM0",["WRCRAM0"]),
                ("WRCRAM1",["WRCRAM1"]),
                ("WRITE",["0b0"]),
                ("WRSET0",["WRSET0"]),
                ("WRSET1",["WRSET1"])],
        DMUX [("instance", "DMUX_4TO1"), ("src", "ICACHE.v:240")] [
                ("ADDR[1:0]",["VADR_R[3:2]"]),
                ("CAP_Q[31:0]",["CAP_Q[31:0]"]),
                ("DRAM_Q[127:0]",["DRAM_Q[127:0]"])],
        FILTCMP [("instance", "FILT_CMP"), ("src", "ICACHE.v:247")] [
                ("--ADR_EQU[8:0]",[]),
                ("DRAMSZ[2:0]",["DRAMSZ[2:0]"]),
                ("DRAM_A[24:0]",["0b0000000000000000000000000"]),
                ("RADR[24:0]",["RADR[16:0]", "VADR_R[11:4]"]),
                ("TAGDAT[16:0]",["TAGDAT[16:0]"])],
        ICACHE_SM [("instance", "IC_SM"), ("src", "ICACHE.v:350")] [
                ("ACC_OK",["ACOK"]),
                ("AUX_DAT",["AUX_DAT"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CA_HIT",["CA_HIT"]),
                ("CUPDATE",["CUPDATE"]),
                ("DRAM_ACC",["DRAM_ACC"]),
                ("HIT_ALL",["HIT_ALL"]),
                ("IC_PREQ",["IC_PREQ"]),
                ("IO_ACC",["IO_ACC"]),
                ("IO_RD",["IO_RD"]),
                ("IO_READY",["IO_READY"]),
                ("IO_SPACE",["IO_SPACE"]),
                ("MDONE",["MDONE"]),
                ("MMU_HIT",["MMU_HIT"]),
                ("NEW_PTB",["NEW_PTB"]),
                ("PROT_ERROR",["PROT_ERROR"]),
                ("PTB_ONE",["PTB_ONE"]),
                ("PTB_SEL",["PTB_SEL"]),
                ("PTB_WR",["PTB_WR"]),
                ("PTE_ACC",["IC_SIGS[1]"]),
                ("READ",["READ"]),
                ("USER",["USER"]),
                ("USE_CA",["USE_CA"])],
        KOLDETECT [("instance", "KOLLOGIK"), ("src", "ICACHE.v:398")] [
                ("ACC_OK",["ACC_OK"]),
                ("ADDR[24:0]",["KOLLI_A[24:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CFG[1:0]",["CFG[1:0]"]),
                ("CVALID[23:0]",["CVALID[23:0]"]),
                ("C_VALID[23:0]",["KCVALID[23:0]"]),
                ("DRAM_WR",["DRAM_WR"]),
                ("ENA_HK",["ENA_HK"]),
                ("HOLD",["HOLD"]),
                ("ICTODC[2:0]",["ICTODC[2:0]"]),
                ("INVAL_A",["CINVAL[1]"]),
                ("KDET",["KDET"]),
                ("KILL",["KILL_K"]),
                ("KILLADR[4:0]",["KILLADR[4:0]"]),
                ("KOLLISION",["KOLLISION"]),
                ("NEWCVAL[23:0]",["NEWCVAL[23:0]"]),
                ("READ_I",["READ_I"]),
                ("RUN_ICRD",["RUN_ICRD"]),
                ("STOP_CINV",["STOP_CINV"]),
                ("STOP_ICRD",["STOP_ICRD"]),
                ("TAG0[16:0]",["KTAG0[16:0]"]),
                ("TAG1[16:0]",["KTAG1[16:0]"])],
        NEU_VALID [("instance", "KOL_VAL"), ("src", "ICACHE.v:378")] [
                ("BCLK",["BCLK"]),
                ("RADR[4:0]",["KOLLI_A[7:3]"]),
                ("VALIN[23:0]",["D_CV[23:0]"]),
                ("VALOUT[23:0]",["KCVALID[23:0]"]),
                ("WADR[4:0]",["ACV[4:0]"]),
                ("WREN",["WE_CV"])],
        MMU_MATCH [("instance", "MMU_COMPARE"), ("src", "ICACHE.v:423")] [
                ("CI",["CI"]),
                ("IVAR[1:0]",["IVAR[1:0]"]),
                ("MCR_FLAGS[2:0]",["MCR_FLAGS[2:0]"]),
                ("MMU_HIT",["MMU_HIT"]),
                ("MMU_VA[15:0]",["MMU_Q[35:20]"]),
                ("MVALID[31:0]",["MVALID[31:0]"]),
                ("PROT_ERROR",["PROT_ERROR"]),
                ("READ",["READ"]),
                ("RMW",["0b0"]),
                ("--SEL_PTB1[9:0]",[]),
                ("UPDATE[31:0]",["UPDATE_M[31:0]"]),
                ("USER",["USER"]),
                ("VADR_R[19:0]",["VADR_R[31:12]"]),
                ("VIRTUELL",["VIRTUELL"]),
                ("WRITE",["0b0"])],
        MMU_UP [("instance", "MMU_CTRL"), ("src", "ICACHE.v:440")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("DAT_MV[31:0]",["DAT_MV[31:0]"]),
                ("IVAR",["IVAR[1]"]),
                ("MVALID[31:0]",["MVALID[31:0]"]),
                ("NEW_PTB",["NEW_PTB"]),
                ("NEW_PTB_RUN",["NEW_PTB_RUN"]),
                ("PTB1",["PTB_ONE"]),
                ("RADR_MV[3:0]",["RADR_MV[3:0]"]),
                ("UPDATE[31:0]",["UPDATE_M[31:0]"]),
                ("VADR[3:0]",["VADR[19:16]"]),
                ("VADR_R[3:0]",["VADR_R[19:16]"]),
                ("WADR_MV[3:0]",["WADR_MV[3:0]"]),
                ("WE_MV",["WEMV"]),
                ("WR_MRAM",["IC_SIGS[0]"])],
        _dff 32 "ICACHE.v:459" ["MVALID[31:0]"] ["BCLK"] ["TmP_26[31:0]"],
        _dff 17 "ICACHE.v:394" ["KTAG1[16:0]"] ["BCLK"] ["TmP_24[16:0]"],
        _dff 17 "ICACHE.v:390" ["TmP_42[16:0]"] ["BCLK"] ["TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]"],
        _dff 17 "ICACHE.v:388" ["KTAG0[16:0]"] ["BCLK"] ["TmP_23[16:0]"],
        _dff 8 "ICACHE.v:302" ["TmP_37[7:0]"] ["BCLK"] ["TmP_3[7:0]"],
        _dff 128 "ICACHE.v:302" ["TmP_38[127:0]"] ["BCLK"] ["TmP_4[127:0]"],
        _dff 128 "ICACHE.v:302" ["TmP_39[127:0]"] ["BCLK"] ["TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]"],
        _dff 128 "ICACHE.v:292" ["RDDATA1[127:0]"] ["BCLK"] ["TmP_28[127:0]"],
        _dff 8 "ICACHE.v:288" ["TmP_34[7:0]"] ["BCLK"] ["TmP_0[7:0]"],
        _dff 128 "ICACHE.v:288" ["TmP_35[127:0]"] ["BCLK"] ["TmP_1[127:0]"],
        _dff 128 "ICACHE.v:288" ["TmP_36[127:0]"] ["BCLK"] ["TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]"],
        _dff 128 "ICACHE.v:278" ["RDDATA0[127:0]"] ["BCLK"] ["TmP_27[127:0]"],
        _dff 8 "ICACHE.v:274" ["TmP_43[7:0]"] ["BCLK"] ["TmP_9[7:0]"],
        _dff 17 "ICACHE.v:274" ["TmP_44[16:0]"] ["BCLK"] ["TmP_10[16:0]"],
        _dff 17 "ICACHE.v:274" ["TmP_45[16:0]"] ["BCLK"] ["TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]"],
        _dff 17 "ICACHE.v:272" ["TAG1[16:0]"] ["BCLK"] ["TmP_30[16:0]"],
        _dff 8 "ICACHE.v:268" ["TmP_40[7:0]"] ["BCLK"] ["TmP_6[7:0]"],
        _dff 17 "ICACHE.v:268" ["TmP_41[16:0]"] ["BCLK"] ["TmP_7[16:0]"],
        _dff 17 "ICACHE.v:266" ["TAG0[16:0]"] ["BCLK"] ["TmP_29[16:0]"],
        _dff 32 "ICACHE.v:245" ["CAPDAT[31:0]"] ["BCLK"] ["TmP_18[31:0]"],
        _adff 1 "ICACHE.v:236" ["HOLD_ON"] ["BRESET"] ["BCLK"] ["TmP_21"],
        _dff 32 "ICACHE.v:234" ["DFFE_IOR[31:0]"] ["BCLK"] ["TmP_19[31:0]"],
        _dff 32 "ICACHE.v:232" ["IO_A[31:0]"] ["BCLK"] ["TmP_22[31:0]"],
        _dff 29 "ICACHE.v:230" ["DRAM_A[28:0]"] ["BCLK"] ["TmP_20[28:0]"],
        _dff 1 "ICACHE.v:228" ["DFF_HDFF1"] ["BCLK"] ["IO_READY"],
        _dff 1 "ICACHE.v:226" ["DFF_IRD_REG"] ["BCLK"] ["IO_RD"],
        _dff 32 "ICACHE.v:224" ["VADR_R[31:0]"] ["BCLK"] ["VADR[31:12]", "VADR_I[11:0]"],
        _mux 1 "ICACHE.v:467" ["TmP_14[35]"] ["0b0"] ["0b1"] ["IC_SIGS[0]"],
        _mux 36 "ICACHE.v:467" ["TmP_13[35:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["VADR_R[31:20]", "MMU_DIN[23:0]"] ["IC_SIGS[0]"],
        _mux 8 "ICACHE.v:467" ["TmP_12[7:0]"] ["0bxxxxxxxx"] ["VADR_R[19:12]"] ["IC_SIGS[0]"],
        _mux 1 "ICACHE.v:461" ["TmP_17[31]"] ["0b0"] ["0b1"] ["WEMV"],
        _mux 32 "ICACHE.v:461" ["TmP_16[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["DAT_MV[31:0]"] ["WEMV"],
        _mux 4 "ICACHE.v:461" ["TmP_15[3:0]"] ["0bxxxx"] ["WADR_MV[3:0]"] ["WEMV"],
        _mux 1 "ICACHE.v:302" ["TmP_5[127]"] ["0b0"] ["0b1"] ["WRSET1"],
        _mux 128 "ICACHE.v:302" ["TmP_4[127:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["DRAM_Q[127:0]"] ["WRSET1"],
        _mux 8 "ICACHE.v:302" ["TmP_3[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["WRSET1"],
        _pmux 32 4 "ICACHE.v:299|ICACHE.v:295" ["SET_DAT1[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["RDDATA1[31:0]", "RDDATA1[63:32]", "RDDATA1[95:64]", "RDDATA1[127:96]"] ["TmP_59", "TmP_58", "TmP_57", "TmP_56"],
        _mux 1 "ICACHE.v:288" ["TmP_2[127]"] ["0b0"] ["0b1"] ["WRSET0"],
        _mux 128 "ICACHE.v:288" ["TmP_1[127:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["DRAM_Q[127:0]"] ["WRSET0"],
        _mux 8 "ICACHE.v:288" ["TmP_0[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["WRSET0"],
        _pmux 32 4 "ICACHE.v:285|ICACHE.v:281" ["SET_DAT0[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["RDDATA0[31:0]", "RDDATA0[63:32]", "RDDATA0[95:64]", "RDDATA0[127:96]"] ["TmP_59", "TmP_58", "TmP_57", "TmP_56"],
        _eq 2 "ICACHE.v:285|ICACHE.v:281" ["TmP_56"] ["VADR_R[3:2]"] ["0b11"] ,
        _eq 2 "ICACHE.v:284|ICACHE.v:281" ["TmP_57"] ["VADR_R[3:2]"] ["0b10"] ,
        _eq 2 "ICACHE.v:283|ICACHE.v:281" ["TmP_58"] ["VADR_R[3:2]"] ["0b01"] ,
        _logic_not 2 "ICACHE.v:282|ICACHE.v:281" ["TmP_59"] ["VADR_R[3:2]"],
        _mux 1 "ICACHE.v:274" ["TmP_11[16]"] ["0b0"] ["0b1"] ["WRCRAM1"],
        _mux 17 "ICACHE.v:274" ["TmP_10[16:0]"] ["0bxxxxxxxxxxxxxxxxx"] ["TAGDAT[16:0]"] ["WRCRAM1"],
        _mux 8 "ICACHE.v:274" ["TmP_9[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["WRCRAM1"],
        _mux 1 "ICACHE.v:268" ["TmP_8[16]"] ["0b0"] ["0b1"] ["WRCRAM0"],
        _mux 17 "ICACHE.v:268" ["TmP_7[16:0]"] ["0bxxxxxxxxxxxxxxxxx"] ["TAGDAT[16:0]"] ["WRCRAM0"],
        _mux 8 "ICACHE.v:268" ["TmP_6[7:0]"] ["0bxxxxxxxx"] ["VADR_R[11:4]"] ["WRCRAM0"],
        _mux 32 "ICACHE.v:245" ["TmP_18[31:0]"] ["CAPDAT[31:0]"] ["CAP_Q[31:0]"] ["MDONE"],
        _mux 32 "ICACHE.v:234" ["TmP_19[31:0]"] ["DFFE_IOR[31:0]"] ["IO_Q[31:0]"] ["IO_RD"],
        _mux 32 "ICACHE.v:232" ["TmP_22[31:0]"] ["IO_A[31:0]"] ["RADR[19:0]", "VADR_R[11:0]"] ["IO_ACC"],
        _mux 29 "ICACHE.v:230" ["TmP_20[28:0]"] ["DRAM_A[28:0]"] ["RADR[16:0]", "VADR_R[11:2]", "USE_CA", "CA_SET"] ["LD_DRAM_A"],
        _mux 32 "ICACHE.v:189" ["ALT_DAT[31:0]"] ["CAPDAT[31:0]"] ["DFFE_IOR[31:0]"] ["AUX_ALT"],
        _mux 20 "ICACHE.v:191" ["RADR[19:0]"] ["VADR_R[31:12]"] ["MMU_Q[19:0]"] ["VIRT_A"],
        _mux 5 "ICACHE.v:193" ["V_ADR[4:0]"] ["VADR_I[11:7]"] ["KILLADR[4:0]"] ["STOP_ICRD"],
        _mux 5 "ICACHE.v:194" ["ACV[4:0]"] ["A_CV[4:0]"] ["KILLADR[4:0]"] ["STOP_ICRD"],
        _mux 24 "ICACHE.v:195" ["UPCD[23:0]"] ["UPDATE_C[23:0]"] ["NEWCVAL[23:0]"] ["STOP_ICRD"],
        _mux 32 "ICACHE.v:197" ["IC_DQ[31:0]"] ["SET_DAT[31:0]"] ["ALT_DAT[31:0]"] ["LAST_MUX"],
        _mux 32 "ICACHE.v:199" ["SET_DAT[31:0]"] ["SET_DAT0[31:0]"] ["SET_DAT1[31:0]"] ["CA_SET"],
        _mux 20 "ICACHE.v:221" ["VADR[31:12]"] ["VADR_I[31:12]"] ["VADR_D[19:0]"] ["IVAR_MUX"],
        _and 1 "ICACHE.v:185" ["TmP_31"] ["READ_I"] ["TmP_52"] ,
        _and 1 "ICACHE.v:185" ["READ"] ["TmP_31"] ["RUN_ICRD"] ,
        _and 1 "ICACHE.v:205" ["VIRT_A"] ["TmP_53"] ["VIRTUELL"] ,
        _and 1 "ICACHE.v:209" ["USER"] ["TmP_54"] ["PSR_USER"] ,
        _and 1 "ICACHE.v:238" ["TmP_32"] ["DATA_HOLD"] ["DFF_HDFF1"] ,
        _and 1 "ICACHE.v:238" ["TmP_33"] ["HOLD_ON"] ["DATA_HOLD"] ,
        _memrd "ICACHE.v:278" 128 8 DATA0 ["0bx"] ["VADR_I[11:4]"] ["TmP_27[127:0]"],
        _memrd "ICACHE.v:292" 128 8 DATA1 ["0bx"] ["VADR_I[11:4]"] ["TmP_28[127:0]"],
        _memrd "ICACHE.v:388" 17 8 KTAGSET_0 ["0bx"] ["KOLLI_A[7:0]"] ["TmP_23[16:0]"],
        _memrd "ICACHE.v:394" 17 8 KTAGSET_1 ["0bx"] ["KOLLI_A[7:0]"] ["TmP_24[16:0]"],
        _memrd "ICACHE.v:465" 36 8 MMU_TAGS ["0bx"] ["VADR[19:12]"] ["TmP_25[35:0]"],
        _memrd "ICACHE.v:459" 32 4 MMU_VALID ["0bx"] ["RADR_MV[3:0]"] ["TmP_26[31:0]"],
        _memrd "ICACHE.v:266" 17 8 TAGSET_0 ["0bx"] ["VADR_I[11:4]"] ["TmP_29[16:0]"],
        _memrd "ICACHE.v:272" 17 8 TAGSET_1 ["0bx"] ["VADR_I[11:4]"] ["TmP_30[16:0]"],
        _memwr "ICACHE.v:288" 128 8 DATA0 ["TmP_36[127:0]"] ["TmP_34[7:0]"] ["TmP_35[127:0]"],
        _memwr "ICACHE.v:302" 128 8 DATA1 ["TmP_39[127:0]"] ["TmP_37[7:0]"] ["TmP_38[127:0]"],
        _memwr "ICACHE.v:390" 17 8 KTAGSET_0 ["TmP_42[16:0]"] ["TmP_40[7:0]"] ["TmP_41[16:0]"],
        _memwr "ICACHE.v:396" 17 8 KTAGSET_1 ["TmP_45[16:0]"] ["TmP_43[7:0]"] ["TmP_44[16:0]"],
        _memwr "ICACHE.v:467" 36 8 MMU_TAGS ["TmP_48[35:0]"] ["TmP_46[7:0]"] ["TmP_47[35:0]"],
        _memwr "ICACHE.v:461" 32 4 MMU_VALID ["TmP_51[31:0]"] ["TmP_49[3:0]"] ["TmP_50[31:0]"],
        _memwr "ICACHE.v:268" 17 8 TAGSET_0 ["TmP_42[16:0]"] ["TmP_40[7:0]"] ["TmP_41[16:0]"],
        _memwr "ICACHE.v:274" 17 8 TAGSET_1 ["TmP_45[16:0]"] ["TmP_43[7:0]"] ["TmP_44[16:0]"],
        _not 1 "ICACHE.v:185" ["TmP_52"] ["HOLD_ON"],
        _not 1 "ICACHE.v:205" ["TmP_53"] ["CINVAL[0]"],
        _not 1 "ICACHE.v:209" ["TmP_54"] ["MCR_FLAGS[3]"],
        _not 1 "ICACHE.v:217" ["TmP_55"] ["DRAM_ACC"],
        _or 1 "ICACHE.v:201" ["KILL"] ["KILL_C"] ["KILL_K"] ,
        _or 1 "ICACHE.v:207" ["ACC_OK"] ["HOLD_ON"] ["ACOK"] ,
        _or 1 "ICACHE.v:211" ["AUX_ALT"] ["HOLD_ON"] ["DFF_IRD_REG"] ,
        _or 1 "ICACHE.v:213" ["LAST_MUX"] ["AUX_ALT"] ["AUX_DAT"] ,
        _or 1 "ICACHE.v:215" ["INIT_RUN"] ["NEW_PTB_RUN"] ["INIT_CA_RUN"] ,
        _or 1 "ICACHE.v:217" ["LD_DRAM_A"] ["TmP_55"] ["MDONE"] ,
        _or 1 "ICACHE.v:238" ["TmP_21"] ["TmP_32"] ["TmP_33"] ,
        _dff 8 "ICACHE.v:467" ["TmP_46[7:0]"] ["BCLK"] ["TmP_12[7:0]"],
        _dff 36 "ICACHE.v:467" ["TmP_47[35:0]"] ["BCLK"] ["TmP_13[35:0]"],
        _dff 36 "ICACHE.v:467" ["TmP_48[35:0]"] ["BCLK"] ["TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]"],
        _dff 36 "ICACHE.v:465" ["MMU_Q[35:0]"] ["BCLK"] ["TmP_25[35:0]"],
        _dff 4 "ICACHE.v:461" ["TmP_49[3:0]"] ["BCLK"] ["TmP_15[3:0]"],
        _dff 32 "ICACHE.v:461" ["TmP_50[31:0]"] ["BCLK"] ["TmP_16[31:0]"],
        _dff 32 "ICACHE.v:461" ["TmP_51[31:0]"] ["BCLK"] ["TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]"],
        NEU_VALID [("instance", "VALID_RAM"), ("src", "ICACHE.v:256")] [
                ("BCLK",["BCLK"]),
                ("RADR[4:0]",["V_ADR[4:0]"]),
                ("VALIN[23:0]",["D_CV[23:0]"]),
                ("VALOUT[23:0]",["CVALID[23:0]"]),
                ("WADR[4:0]",["ACV[4:0]"]),
                ("WREN",["WE_CV"])],
        _buf 1 "" ["ICTODC[3]"] ["USER"],
        _buf 20 "ICACHE.v:88" ["IC_VA[19:0]"] ["VADR_R[31:12]"],
        _buf 1 "ICACHE.v:149" ["RMW"] ["0b0"],
        _buf 16 "" ["TmP_11[15:0]"] ["TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]", "TmP_11[16]"],
        _buf 35 "" ["TmP_14[34:0]"] ["TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]", "TmP_14[35]"],
        _buf 31 "" ["TmP_17[30:0]"] ["TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]", "TmP_17[31]"],
        _buf 127 "" ["TmP_2[126:0]"] ["TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]", "TmP_2[127]"],
        _buf 127 "" ["TmP_5[126:0]"] ["TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]", "TmP_5[127]"],
        _buf 16 "" ["TmP_8[15:0]"] ["TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]", "TmP_8[16]"],
        _buf 12 "" ["VADR[11:0]"] ["VADR_I[11:0]"],
        _buf 1 "ICACHE.v:131" ["WRITE"] ["0b0"]
    ] in
    PINST "draw_hier ICACHE" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let ICACHE_SM {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "IO_SPACE",
                 "MDONE",
                 "IO_READY",
                 "MMU_HIT",
                 "CA_HIT",
                 "READ",
                 "PTE_ACC",
                 "USE_CA",
                 "PTB_WR",
                 "PTB_SEL",
                 "USER",
                 "PROT_ERROR" ] in
    let outs = [ "DRAM_ACC",
                 "IO_RD",
                 "IO_ACC",
                 "IC_PREQ",
                 "ACC_OK",
                 "HIT_ALL",
                 "CUPDATE",
                 "AUX_DAT",
                 "NEW_PTB",
                 "PTB_ONE" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "card_flag",
                 "do_ca_rd",
                 "dram_go",
                 "io_busy",
                 "new_state[3:0]",
                 "rd_done",
                 "rd_ende",
                 "rd_rdy" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "ICACHE_SM.v:345" ["HIT_ALL"] ["MMU_HIT"] ["CA_HIT"] ,
        _and 1 "ICACHE_SM.v:349" ["TmP_6"] ["new_state[3]"] ["TmP_15"] ,
        _and 1 "ICACHE_SM.v:349" ["TmP_7"] ["card_flag"] ["TmP_16"] ,
        _and 1 "ICACHE_SM.v:351" ["TmP_8"] ["card_flag"] ["USE_CA"] ,
        _and 1 "ICACHE_SM.v:351" ["CUPDATE"] ["TmP_8"] ["MDONE"] ,
        _and 1 "ICACHE_SM.v:353" ["TmP_5"] ["card_flag"] ["MDONE"] ,
        _and 1 "ICACHE_SM.v:362" ["TmP_9"] ["DRAM_ACC"] ["TmP_16"] ,
        _and 1 "ICACHE_SM.v:362" ["TmP_10"] ["TmP_9"] ["BRESET"] ,
        _and 1 "ICACHE_SM.v:367" ["TmP_11"] ["IO_RD"] ["TmP_17"] ,
        _and 1 "ICACHE_SM.v:367" ["TmP_12"] ["TmP_11"] ["BRESET"] ,
        _and 1 "ICACHE_SM.v:372" ["TmP_4"] ["READ"] ["IO_READY"] ,
        _and 1 "ICACHE_SM.v:376" ["TmP_13"] ["READ"] ["MMU_HIT"] ,
        _and 1 "ICACHE_SM.v:376" ["TmP_14"] ["TmP_13"] ["rd_ende"] ,
        _not 1 "ICACHE_SM.v:349" ["TmP_15"] ["rd_rdy"],
        _not 1 "ICACHE_SM.v:362" ["TmP_16"] ["MDONE"],
        _not 1 "ICACHE_SM.v:367" ["TmP_17"] ["IO_READY"],
        _or 1 "ICACHE_SM.v:316" ["rd_ende"] ["CA_HIT"] ["rd_rdy"] ,
        _or 1 "ICACHE_SM.v:349" ["TmP_3"] ["TmP_6"] ["TmP_7"] ,
        _or 1 "ICACHE_SM.v:370" ["io_busy"] ["IO_RD"] ["rd_done"] ,
        _dff 1 "ICACHE_SM.v:381" ["PTB_ONE"] ["BCLK"] ["TmP_2"],
        _dff 1 "ICACHE_SM.v:380" ["NEW_PTB"] ["BCLK"] ["PTB_WR"],
        _dff 1 "ICACHE_SM.v:372" ["rd_done"] ["BCLK"] ["TmP_4"],
        _dff 1 "ICACHE_SM.v:365" ["IO_RD"] ["BCLK"] ["TmP_1"],
        _dff 1 "ICACHE_SM.v:360" ["DRAM_ACC"] ["BCLK"] ["TmP_0"],
        _dff 1 "ICACHE_SM.v:353" ["rd_rdy"] ["BCLK"] ["TmP_5"],
        _adff 1 "ICACHE_SM.v:347" ["card_flag"] ["BRESET"] ["BCLK"] ["TmP_3"],
        _mux 1 "ICACHE_SM.v:381" ["TmP_2"] ["PTB_ONE"] ["PTB_SEL"] ["PTB_WR"],
        _mux 1 "ICACHE_SM.v:367" ["TmP_1"] ["TmP_12"] ["READ"] ["new_state[0]"],
        _mux 1 "ICACHE_SM.v:360" ["TmP_0"] ["TmP_10"] ["0b1"] ["new_state[1]"],
        _pmux 4 3 "ICACHE_SM.v:336|ICACHE_SM.v:330" ["new_state[3:0]"] ["0b0000"] ["0b010000011010"] ["TmP_20", "TmP_19", "TmP_18"],
        _eq 6 "ICACHE_SM.v:336|ICACHE_SM.v:330" ["TmP_18"] ["READ", "PROT_ERROR", "IO_SPACE", "MMU_HIT", "rd_ende", "DRAM_ACC"] ["0b100100"] ,
        _eq 5 "ICACHE_SM.v:334|ICACHE_SM.v:330" ["TmP_19"] ["READ", "PROT_ERROR", "IO_SPACE", "io_busy", "MMU_HIT"] ["0b10101"] ,
        _eq 4 "ICACHE_SM.v:332|ICACHE_SM.v:330" ["TmP_20"] ["READ", "PROT_ERROR", "MMU_HIT", "PTE_ACC"] ["0b1000"] ,
        _mux 1 "ICACHE_SM.v:376" ["ACC_OK"] ["TmP_14"] ["rd_done"] ["IO_SPACE"],
        _buf 1 "ICACHE_SM.v:298" ["AUX_DAT"] ["rd_rdy"],
        _buf 1 "ICACHE_SM.v:294" ["IC_PREQ"] ["new_state[2]"],
        _buf 1 "ICACHE_SM.v:293" ["IO_ACC"] ["new_state[0]"],
        _buf 1 "ICACHE_SM.v:309" ["do_ca_rd"] ["new_state[3]"],
        _buf 1 "ICACHE_SM.v:307" ["dram_go"] ["new_state[1]"]
    ] in
    PINST "draw_hier ICACHE_SM" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let ILL_UNDEF {attrs::(string#string) list} conns =
    let inps = [ "OPREG[23:0]",
                 "ANZ_VAL[2:0]",
                 "USER",
                 "CFG[2:0]" ] in
    let outs = [ "ILL",
                 "UNDEF" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75",
                 "TmP_76",
                 "TmP_77",
                 "TmP_78",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80",
                 "TmP_9",
                 "gen12",
                 "gen13",
                 "gen22",
                 "gen23",
                 "igen12",
                 "igen13",
                 "igen22",
                 "igen23",
                 "lsbes",
                 "undef_am",
                 "undef_im",
                 "undef_opc",
                 "valid[2:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _eq 5 "STEUER_MISC.v:376" ["gen22"] ["OPREG[10:6]"] ["0b10011"] ,
        _eq 5 "STEUER_MISC.v:377" ["gen13"] ["OPREG[23:19]"] ["0b10011"] ,
        _eq 5 "STEUER_MISC.v:378" ["gen23"] ["OPREG[18:14]"] ["0b10011"] ,
        _eq 4 "STEUER_MISC.v:381" ["TmP_17"] ["OPREG[3:0]"] ["0b1110"] ,
        _eq 5 "STEUER_MISC.v:387" ["igen12"] ["OPREG[15:11]"] ["0b10100"] ,
        _eq 5 "STEUER_MISC.v:388" ["igen22"] ["OPREG[10:6]"] ["0b10100"] ,
        _eq 5 "STEUER_MISC.v:389" ["igen13"] ["OPREG[23:19]"] ["0b10100"] ,
        _eq 5 "STEUER_MISC.v:390" ["igen23"] ["OPREG[18:14]"] ["0b10100"] ,
        _eq 2 "STEUER_MISC.v:398" ["TmP_18"] ["OPREG[5:4]"] ["0b10"] ,
        _land 1 "STEUER_MISC.v:381" ["TmP_19"] ["valid[2]"] ["TmP_21"],
        _land 1 "STEUER_MISC.v:381" ["TmP_20"] ["TmP_19"] ["TmP_17"],
        _logic_reduce_bool 3 "STEUER_MISC.v:326" ["valid[0]"] ["ANZ_VAL[2:0]"],
        _logic_reduce_bool 2 "STEUER_MISC.v:326" ["valid[1]"] ["ANZ_VAL[2:1]"],
        _logic_reduce_bool 3 "STEUER_MISC.v:381" ["TmP_21"] ["OPREG[7:5]"],
        _ne 2 "STEUER_MISC.v:383" ["TmP_22"] ["OPREG[1:0]"] ["0b10"] ,
        _ne 2 "STEUER_MISC.v:383" ["TmP_23"] ["OPREG[3:2]"] ["0b11"] ,
        _ne 2 "STEUER_MISC.v:394" ["TmP_24"] ["OPREG[5:4]"] ["0b01"] ,
        _logic_reduce_bool 2 "STEUER_MISC.v:399" ["TmP_25"] ["OPREG[5:4]"],
        _ne 4 "STEUER_MISC.v:407" ["TmP_26"] ["OPREG[13:10]"] ["0b0010"] ,
        _not 1 "STEUER_MISC.v:356" ["TmP_27"] ["CFG[0]"],
        _not 1 "STEUER_MISC.v:360" ["TmP_28"] ["CFG[1]"],
        _not 1 "STEUER_MISC.v:360" ["TmP_29"] ["OPREG[18]"],
        _not 1 "STEUER_MISC.v:361" ["TmP_30"] ["CFG[2]"],
        _or 1 "STEUER_MISC.v:326" ["valid[2]"] ["ANZ_VAL[2]"] ["TmP_16"] ,
        _or 1 "STEUER_MISC.v:360" ["TmP_31"] ["TmP_28"] ["TmP_29"] ,
        _or 1 "STEUER_MISC.v:381" ["TmP_32"] ["gen13"] ["gen23"] ,
        _or 1 "STEUER_MISC.v:399" ["TmP_33"] ["TmP_6"] ["TmP_7"] ,
        _or 1 "STEUER_MISC.v:404" ["TmP_34"] ["igen13"] ["igen23"] ,
        _or 1 "STEUER_MISC.v:416" ["TmP_35"] ["undef_opc"] ["undef_am"] ,
        _or 1 "STEUER_MISC.v:416" ["UNDEF"] ["TmP_35"] ["undef_im"] ,
        _pmux 1 8 "STEUER_MISC.v:410|STEUER_MISC.v:393" ["undef_im"] ["0b0"] ["TmP_5", "igen12", "igen22", "TmP_33", "TmP_34", "TmP_8", "igen23", "igen13"] ["TmP_51", "TmP_15", "TmP_48", "TmP_47", "TmP_14", "TmP_39", "TmP_13", "TmP_12"],
        _eq 12 "STEUER_MISC.v:410|STEUER_MISC.v:393" ["TmP_36"] ["valid[2]", "OPREG[13:10]", "OPREG[7:2]", "lsbes"] ["0b100110001111"] ,
        _eq 11 "STEUER_MISC.v:409|STEUER_MISC.v:393" ["TmP_37"] ["valid[2]", "OPREG[13:11]", "OPREG[7:2]", "lsbes"] ["0b10000001111"] ,
        _eq 11 "STEUER_MISC.v:408|STEUER_MISC.v:393" ["TmP_38"] ["valid[2]", "OPREG[13:11]", "OPREG[7:2]", "lsbes"] ["0b10101111111"] ,
        _eq 8 "STEUER_MISC.v:407|STEUER_MISC.v:393" ["TmP_39"] ["valid[2]", "OPREG[7:2]", "lsbes"] ["0b11011111"] ,
        _eq 8 "STEUER_MISC.v:406|STEUER_MISC.v:393" ["TmP_40"] ["valid[2]", "OPREG[7:2]", "lsbes"] ["0b10011111"] ,
        _eq 9 "STEUER_MISC.v:405|STEUER_MISC.v:393" ["TmP_41"] ["valid[2]", "OPREG[10]", "OPREG[7:2]", "lsbes"] ["0b110110111"] ,
        _eq 9 "STEUER_MISC.v:404|STEUER_MISC.v:393" ["TmP_42"] ["valid[2]", "OPREG[10]", "OPREG[7:2]", "lsbes"] ["0b111010111"] ,
        _eq 9 "STEUER_MISC.v:403|STEUER_MISC.v:393" ["TmP_43"] ["valid[2]", "OPREG[10]", "OPREG[7:2]", "lsbes"] ["0b101110111"] ,
        _eq 9 "STEUER_MISC.v:402|STEUER_MISC.v:393" ["TmP_44"] ["valid[2]", "OPREG[10]", "OPREG[7:2]", "lsbes"] ["0b101010111"] ,
        _eq 8 "STEUER_MISC.v:401|STEUER_MISC.v:393" ["TmP_45"] ["valid[2]", "OPREG[10]", "OPREG[7]", "OPREG[5:2]", "lsbes"] ["0b10010111"] ,
        _eq 7 "STEUER_MISC.v:400|STEUER_MISC.v:393" ["TmP_46"] ["valid[2]", "OPREG[6:2]", "lsbes"] ["0b1100111"] ,
        _eq 4 "STEUER_MISC.v:398|STEUER_MISC.v:393" ["TmP_47"] ["valid[1]", "OPREG[3:2]", "lsbes"] ["0b1010"] ,
        _eq 3 "STEUER_MISC.v:397|STEUER_MISC.v:393" ["TmP_48"] ["valid[1]", "OPREG[2]", "lsbes"] ["0b100"] ,
        _eq 9 "STEUER_MISC.v:396|STEUER_MISC.v:393" ["TmP_49"] ["valid[1]", "OPREG[8:2]", "lsbes"] ["0b100111110"] ,
        _eq 7 "STEUER_MISC.v:395|STEUER_MISC.v:393" ["TmP_50"] ["valid[1]", "OPREG[6:2]", "lsbes"] ["0b1101110"] ,
        _eq 5 "STEUER_MISC.v:394|STEUER_MISC.v:393" ["TmP_51"] ["valid[1]", "OPREG[6]", "OPREG[3:2]", "lsbes"] ["0b10110"] ,
        _mux 1 "STEUER_MISC.v:381" ["undef_am"] ["TmP_4"] ["TmP_32"] ["TmP_20"],
        _pmux 1 4 "STEUER_MISC.v:369|STEUER_MISC.v:348" ["undef_opc"] ["0b0"] ["TmP_27", "TmP_31", "TmP_30", "0b1"] ["TmP_11", "TmP_60", "TmP_59", "TmP_10"],
        _eq 5 "STEUER_MISC.v:369|STEUER_MISC.v:348" ["TmP_52"] ["valid[0]", "OPREG[4:2]", "lsbes"] ["0b10011"] ,
        _eq 7 "STEUER_MISC.v:368|STEUER_MISC.v:348" ["TmP_53"] ["valid[0]", "OPREG[6:2]", "lsbes"] ["0b1101111"] ,
        _eq 7 "STEUER_MISC.v:367|STEUER_MISC.v:348" ["TmP_54"] ["valid[0]", "OPREG[7:5]", "OPREG[3:2]", "lsbes"] ["0b1100111"] ,
        _eq 8 "STEUER_MISC.v:366|STEUER_MISC.v:348" ["TmP_55"] ["valid[0]", "OPREG[7:2]", "lsbes"] ["0b10111111"] ,
        _eq 8 "STEUER_MISC.v:364|STEUER_MISC.v:348" ["TmP_56"] ["valid[2]", "OPREG[7:2]", "lsbes"] ["0b11001011"] ,
        _eq 6 "STEUER_MISC.v:363|STEUER_MISC.v:348" ["TmP_57"] ["valid[2]", "OPREG[6]", "OPREG[4:2]", "lsbes"] ["0b111011"] ,
        _eq 8 "STEUER_MISC.v:362|STEUER_MISC.v:348" ["TmP_58"] ["valid[2]", "OPREG[7:2]", "lsbes"] ["0b10001011"] ,
        _eq 7 "STEUER_MISC.v:361|STEUER_MISC.v:348" ["TmP_59"] ["valid[2]", "OPREG[6:2]", "lsbes"] ["0b1011011"] ,
        _eq 11 "STEUER_MISC.v:360|STEUER_MISC.v:348" ["TmP_60"] ["valid[2]", "OPREG[13:11]", "OPREG[7:2]", "lsbes"] ["0b10010001111"] ,
        _eq 11 "STEUER_MISC.v:359|STEUER_MISC.v:348" ["TmP_61"] ["valid[2]", "OPREG[13:11]", "OPREG[7:2]", "lsbes"] ["0b11010001111"] ,
        _eq 12 "STEUER_MISC.v:358|STEUER_MISC.v:348" ["TmP_62"] ["valid[2]", "OPREG[13:10]", "OPREG[7:2]", "lsbes"] ["0b110000001111"] ,
        _eq 9 "STEUER_MISC.v:357|STEUER_MISC.v:348" ["TmP_63"] ["valid[2]", "OPREG[12]", "OPREG[7:2]", "lsbes"] ["0b110001111"] ,
        _eq 8 "STEUER_MISC.v:356|STEUER_MISC.v:348" ["TmP_64"] ["valid[2]", "OPREG[7:2]", "lsbes"] ["0b11111111"] ,
        _eq 7 "STEUER_MISC.v:355|STEUER_MISC.v:348" ["TmP_65"] ["valid[2]", "OPREG[6:2]", "lsbes"] ["0b1011111"] ,
        _eq 11 "STEUER_MISC.v:354|STEUER_MISC.v:348" ["TmP_66"] ["valid[2]", "OPREG[13:10]", "OPREG[6:2]", "lsbes"] ["0b11010100111"] ,
        _eq 12 "STEUER_MISC.v:353|STEUER_MISC.v:348" ["TmP_67"] ["valid[2]", "OPREG[13:10]", "OPREG[7:2]", "lsbes"] ["0b101000100111"] ,
        _eq 10 "STEUER_MISC.v:352|STEUER_MISC.v:348" ["TmP_68"] ["valid[2]", "OPREG[13:12]", "OPREG[7:2]", "lsbes"] ["0b1010000111"] ,
        _eq 9 "STEUER_MISC.v:351|STEUER_MISC.v:348" ["TmP_69"] ["valid[2]", "OPREG[13]", "OPREG[7:2]", "lsbes"] ["0b110000111"] ,
        _eq 11 "STEUER_MISC.v:350|STEUER_MISC.v:348" ["TmP_70"] ["valid[1]", "OPREG[10:2]", "lsbes"] ["0b11000111110"] ,
        _eq 8 "STEUER_MISC.v:349|STEUER_MISC.v:348" ["TmP_71"] ["valid[1]", "OPREG[7:2]", "lsbes"] ["0b11111110"] ,
        _pmux 1 2 "STEUER_MISC.v:341|STEUER_MISC.v:332" ["ILL"] ["0b0"] ["TmP_0", "USER"] ["TmP_75", "TmP_9"],
        _eq 12 "STEUER_MISC.v:341|STEUER_MISC.v:332" ["TmP_72"] ["valid[2]", "OPREG[13:10]", "OPREG[7:2]", "lsbes"] ["0b110010001111"] ,
        _eq 10 "STEUER_MISC.v:340|STEUER_MISC.v:332" ["TmP_73"] ["valid[2]", "OPREG[13:12]", "OPREG[7:2]", "lsbes"] ["0b1000001111"] ,
        _eq 12 "STEUER_MISC.v:339|STEUER_MISC.v:332" ["TmP_74"] ["valid[1]", "OPREG[13:10]", "OPREG[7:2]", "lsbes"] ["0b100100000111"] ,
        _eq 9 "STEUER_MISC.v:338|STEUER_MISC.v:332" ["TmP_75"] ["valid[1]", "OPREG[10]", "OPREG[8:2]"] ["0b101011111"] ,
        _eq 10 "STEUER_MISC.v:337|STEUER_MISC.v:332" ["TmP_76"] ["valid[1]", "OPREG[10:7]", "OPREG[5:2]", "lsbes"] ["0b1111010110"] ,
        _eq 10 "STEUER_MISC.v:336|STEUER_MISC.v:332" ["TmP_77"] ["valid[1]", "OPREG[10:7]", "OPREG[5:2]", "lsbes"] ["0b1101110110"] ,
        _eq 8 "STEUER_MISC.v:335|STEUER_MISC.v:332" ["TmP_78"] ["valid[1]", "OPREG[9:8]", "OPREG[5:2]", "lsbes"] ["0b11010110"] ,
        _eq 9 "STEUER_MISC.v:334|STEUER_MISC.v:332" ["TmP_79"] ["valid[1]", "OPREG[10:8]", "OPREG[5:2]", "lsbes"] ["0b100110110"] ,
        _eq 10 "STEUER_MISC.v:333|STEUER_MISC.v:332" ["TmP_80"] ["valid[1]", "OPREG[10:7]", "OPREG[5:2]", "lsbes"] ["0b1000110110"] ,
        _and 1 "STEUER_MISC.v:338" ["TmP_0"] ["USER"] ["OPREG[0]"] ,
        _and 1 "STEUER_MISC.v:383" ["TmP_1"] ["valid[1]"] ["gen12"] ,
        _and 1 "STEUER_MISC.v:383" ["TmP_2"] ["TmP_1"] ["TmP_22"] ,
        _and 1 "STEUER_MISC.v:383" ["TmP_3"] ["TmP_23"] ["gen22"] ,
        _and 1 "STEUER_MISC.v:383" ["TmP_4"] ["TmP_2"] ["TmP_3"] ,
        _and 1 "STEUER_MISC.v:394" ["TmP_5"] ["igen12"] ["TmP_24"] ,
        _and 1 "STEUER_MISC.v:398" ["TmP_6"] ["igen12"] ["TmP_18"] ,
        _and 1 "STEUER_MISC.v:399" ["TmP_7"] ["igen22"] ["TmP_25"] ,
        _and 1 "STEUER_MISC.v:407" ["TmP_8"] ["igen23"] ["TmP_26"] ,
        _logic_reduce_or 8 "" ["TmP_9"] ["TmP_80", "TmP_79", "TmP_78", "TmP_77", "TmP_76", "TmP_74", "TmP_73", "TmP_72"],
        _logic_reduce_or 16 "" ["TmP_10"] ["TmP_71", "TmP_70", "TmP_69", "TmP_68", "TmP_67", "TmP_66", "TmP_63", "TmP_62", "TmP_61", "TmP_58", "TmP_57", "TmP_56", "TmP_55", "TmP_54", "TmP_53", "TmP_52"],
        _logic_reduce_or 2 "" ["TmP_11"] ["TmP_65", "TmP_64"],
        _logic_reduce_or 3 "" ["TmP_12"] ["TmP_43", "TmP_37", "TmP_36"],
        _logic_reduce_or 5 "" ["TmP_13"] ["TmP_46", "TmP_44", "TmP_41", "TmP_40", "TmP_38"],
        _logic_reduce_or 2 "" ["TmP_14"] ["TmP_45", "TmP_42"],
        _logic_reduce_or 2 "" ["TmP_15"] ["TmP_50", "TmP_49"],
        _eq 2 "STEUER_MISC.v:326" ["TmP_16"] ["ANZ_VAL[1:0]"] ["0b11"] ,
        _eq 2 "STEUER_MISC.v:327" ["lsbes"] ["OPREG[1:0]"] ["0b10"] ,
        _eq 5 "STEUER_MISC.v:375" ["gen12"] ["OPREG[15:11]"] ["0b10011"] 
    ] in
    PINST "draw_hier ILL_UNDEF" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let IO_SWITCH {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "I_IOA[31:0]",
                 "D_IOA[31:0]",
                 "I_IORD",
                 "D_IORD",
                 "D_IOWR",
                 "IO_READY",
                 "GENSTAT[2:0]",
                 "D_IOBE[3:0]",
                 "ILO_SIG",
                 "DCWACC[1:0]" ] in
    let outs = [ "IO_A[31:0]",
                 "IO_RD",
                 "IO_WR",
                 "IO_BE[3:0]",
                 "I_IORDY",
                 "D_IORDY",
                 "STATUS[3:0]",
                 "ILO" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1[1:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27[3:0]",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "daten",
                 "ilo_flag",
                 "ilo_keep",
                 "interrupt",
                 "sel_dp",
                 "select[1:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "TOP_MISC.v:102" ["TmP_2"] ["TmP_9"] ["daten"] ,
        _and 1 "TOP_MISC.v:109" ["D_IORDY"] ["sel_dp"] ["IO_READY"] ,
        _and 1 "TOP_MISC.v:110" ["TmP_3"] ["TmP_10"] ["IO_READY"] ,
        _and 1 "TOP_MISC.v:110" ["I_IORDY"] ["TmP_3"] ["I_IORD"] ,
        _and 1 "TOP_MISC.v:128" ["TmP_5"] ["ilo_flag"] ["TmP_11"] ,
        _and 1 "TOP_MISC.v:128" ["ilo_keep"] ["TmP_5"] ["TmP_12"] ,
        _and 1 "TOP_MISC.v:130" ["TmP_4"] ["D_IORD"] ["sel_dp"] ,
        _and 1 "TOP_MISC.v:130" ["ILO"] ["ILO_SIG"] ["TmP_17"] ,
        _logic_reduce_or 2 "" ["TmP_6"] ["TmP_26", "TmP_21"],
        _logic_reduce_or 4 "" ["TmP_7"] ["TmP_25", "TmP_24", "TmP_23", "TmP_22"],
        _eq 2 "TOP_MISC.v:102" ["TmP_8"] ["select[1:0]"] ["0b10"] ,
        _logic_not 2 "TOP_MISC.v:102" ["TmP_9"] ["select[1:0]"],
        _not 1 "TOP_MISC.v:110" ["TmP_10"] ["sel_dp"],
        _not 1 "TOP_MISC.v:128" ["TmP_11"] ["D_IOWR"],
        _not 1 "TOP_MISC.v:128" ["TmP_12"] ["DCWACC[1]"],
        _or 1 "TOP_MISC.v:102" ["sel_dp"] ["TmP_8"] ["TmP_2"] ,
        _or 1 "TOP_MISC.v:112" ["interrupt"] ["GENSTAT[1]"] ["GENSTAT[0]"] ,
        _or 1 "TOP_MISC.v:126" ["TmP_14"] ["TmP_13"] ["ilo_keep"] ,
        _or 1 "TOP_MISC.v:130" ["TmP_13"] ["TmP_4"] ["DCWACC[0]"] ,
        _or 1 "TOP_MISC.v:130" ["TmP_15"] ["TmP_13"] ["ilo_flag"] ,
        _or 1 "TOP_MISC.v:130" ["TmP_16"] ["TmP_15"] ["D_IOWR"] ,
        _or 1 "TOP_MISC.v:130" ["TmP_17"] ["TmP_16"] ["DCWACC[1]"] ,
        _or 1 "TOP_MISC.v:77" ["daten"] ["D_IORD"] ["D_IOWR"] ,
        _dff 1 "TOP_MISC.v:124" ["ilo_flag"] ["BCLK"] ["TmP_0"],
        _adff 2 "TOP_MISC.v:80" ["select[1:0]"] ["BRESET"] ["BCLK"] ["TmP_1[1:0]"],
        _mux 1 "TOP_MISC.v:125" ["TmP_0"] ["0b0"] ["TmP_14"] ["ILO_SIG"],
        _pmux 4 3 "TOP_MISC.v:118|TOP_MISC.v:115" ["STATUS[3:0]"] ["0b000", "GENSTAT[2]"] ["0b1010", "TmP_27[3:0]", "0b1000"] ["TmP_20", "TmP_19", "TmP_18"],
        _eq 2 "TOP_MISC.v:118|TOP_MISC.v:115" ["TmP_18"] ["sel_dp", "I_IORD"] ["0b01"] ,
        _eq 3 "TOP_MISC.v:117|TOP_MISC.v:115" ["TmP_19"] ["sel_dp", "daten", "interrupt"] ["0b111"] ,
        _eq 3 "TOP_MISC.v:116|TOP_MISC.v:115" ["TmP_20"] ["sel_dp", "daten", "interrupt"] ["0b110"] ,
        _pmux 2 2 "TOP_MISC.v:97|TOP_MISC.v:83" ["TmP_1[1:0]"] ["0b00"] ["0b1011"] ["TmP_7", "TmP_6"],
        _eq 3 "TOP_MISC.v:97|TOP_MISC.v:83" ["TmP_21"] ["IO_READY", "select[1:0]"] ["0b011"] ,
        _eq 4 "TOP_MISC.v:94|TOP_MISC.v:83" ["TmP_22"] ["IO_READY", "ilo_keep", "select[1:0]"] ["0b1110"] ,
        _eq 3 "TOP_MISC.v:93|TOP_MISC.v:83" ["TmP_23"] ["IO_READY", "select[1:0]"] ["0b010"] ,
        _eq 4 "TOP_MISC.v:87|TOP_MISC.v:83" ["TmP_24"] ["D_IOWR", "IO_READY", "select[1:0]"] ["0b1000"] ,
        _eq 5 "TOP_MISC.v:86|TOP_MISC.v:83" ["TmP_25"] ["D_IORD", "D_IOWR", "IO_READY", "select[1:0]"] ["0b10000"] ,
        _eq 6 "TOP_MISC.v:85|TOP_MISC.v:83" ["TmP_26"] ["I_IORD", "D_IORD", "D_IOWR", "IO_READY", "select[1:0]"] ["0b100000"] ,
        _mux 1 "TOP_MISC.v:104" ["IO_RD"] ["I_IORD"] ["D_IORD"] ["sel_dp"],
        _mux 1 "TOP_MISC.v:105" ["IO_WR"] ["0b0"] ["D_IOWR"] ["sel_dp"],
        _mux 32 "TOP_MISC.v:106" ["IO_A[31:0]"] ["I_IOA[31:0]"] ["D_IOA[31:0]"] ["sel_dp"],
        _mux 4 "TOP_MISC.v:107" ["IO_BE[3:0]"] ["0b1111"] ["D_IOBE[3:0]"] ["sel_dp"],
        _mux 4 "TOP_MISC.v:117" ["TmP_27[3:0]"] ["0b0110"] ["0b0100"] ["GENSTAT[1]"]
    ] in
    PINST "draw_hier IO_SWITCH" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let I_PFAD {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "SFP_DAT[31:0]",
                 "FSR[31:0]",
                 "DP_OUT[31:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "BMASKE[31:0]",
                 "ADDR[31:0]",
                 "MRESULT[32:0]",
                 "OPCODE[7:0]",
                 "BWD[1:0]",
                 "FL",
                 "SP_CMP[2:0]",
                 "DP_CMP[2:0]",
                 "LD_OUT",
                 "WREN",
                 "WRADR[5:0]",
                 "RDAA[7:0]",
                 "DETOIP[11:0]",
                 "BITSEL[2:0]",
                 "OVF_BCD[3:0]",
                 "DISP[4:0]",
                 "RWVFLAG",
                 "DSR[3:0]" ] in
    let outs = [ "I_OUT[31:0]",
                 "PSR[11:0]",
                 "BMCODE[6:0]",
                 "OV_FLAG",
                 "ACB_ZERO",
                 "STRING[4:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_100",
                 "TmP_101",
                 "TmP_102[31:0]",
                 "TmP_103",
                 "TmP_104[31:0]",
                 "TmP_105",
                 "TmP_106",
                 "TmP_107",
                 "TmP_108",
                 "TmP_109",
                 "TmP_11",
                 "TmP_110[31:0]",
                 "TmP_111",
                 "TmP_112",
                 "TmP_113",
                 "TmP_114",
                 "TmP_115",
                 "TmP_116",
                 "TmP_117",
                 "TmP_118",
                 "TmP_119",
                 "TmP_12[11:0]",
                 "TmP_120",
                 "TmP_121",
                 "TmP_122[11:0]",
                 "TmP_123",
                 "TmP_124[31:0]",
                 "TmP_125",
                 "TmP_126",
                 "TmP_127",
                 "TmP_128",
                 "TmP_129",
                 "TmP_13[5:0]",
                 "TmP_130",
                 "TmP_131",
                 "TmP_132",
                 "TmP_133",
                 "TmP_134",
                 "TmP_135",
                 "TmP_136[31:0]",
                 "TmP_137",
                 "TmP_138",
                 "TmP_139",
                 "TmP_14[11:0]",
                 "TmP_140",
                 "TmP_141[31:0]",
                 "TmP_142",
                 "TmP_143",
                 "TmP_144",
                 "TmP_145",
                 "TmP_146",
                 "TmP_147",
                 "TmP_148",
                 "TmP_149",
                 "TmP_15[11:0]",
                 "TmP_150",
                 "TmP_151",
                 "TmP_152",
                 "TmP_153",
                 "TmP_154",
                 "TmP_155",
                 "TmP_156",
                 "TmP_157",
                 "TmP_158",
                 "TmP_159",
                 "TmP_16",
                 "TmP_160",
                 "TmP_161",
                 "TmP_162",
                 "TmP_163",
                 "TmP_164",
                 "TmP_165",
                 "TmP_166",
                 "TmP_167",
                 "TmP_168",
                 "TmP_169",
                 "TmP_17",
                 "TmP_170",
                 "TmP_171",
                 "TmP_172",
                 "TmP_173",
                 "TmP_174",
                 "TmP_175",
                 "TmP_176",
                 "TmP_177",
                 "TmP_178",
                 "TmP_179",
                 "TmP_18",
                 "TmP_180",
                 "TmP_181",
                 "TmP_182",
                 "TmP_183",
                 "TmP_184",
                 "TmP_185",
                 "TmP_186",
                 "TmP_187",
                 "TmP_188",
                 "TmP_189",
                 "TmP_19",
                 "TmP_190",
                 "TmP_191",
                 "TmP_192",
                 "TmP_193",
                 "TmP_194",
                 "TmP_195",
                 "TmP_196",
                 "TmP_197",
                 "TmP_198",
                 "TmP_199",
                 "TmP_2",
                 "TmP_20",
                 "TmP_200",
                 "TmP_201[3:0]",
                 "TmP_202[7:0]",
                 "TmP_203",
                 "TmP_204",
                 "TmP_205",
                 "TmP_206",
                 "TmP_207",
                 "TmP_208",
                 "TmP_209",
                 "TmP_21",
                 "TmP_210",
                 "TmP_211",
                 "TmP_212",
                 "TmP_213",
                 "TmP_214",
                 "TmP_215",
                 "TmP_216",
                 "TmP_217",
                 "TmP_218",
                 "TmP_219",
                 "TmP_22",
                 "TmP_220",
                 "TmP_221[31:0]",
                 "TmP_222[31:0]",
                 "TmP_223",
                 "TmP_224",
                 "TmP_225",
                 "TmP_226",
                 "TmP_227",
                 "TmP_228",
                 "TmP_229[7:0]",
                 "TmP_23",
                 "TmP_230[7:0]",
                 "TmP_231[31:0]",
                 "TmP_232[31:0]",
                 "TmP_233[11:0]",
                 "TmP_234[11:0]",
                 "TmP_235[3:0]",
                 "TmP_236[4:0]",
                 "TmP_237[4:0]",
                 "TmP_238[7:0]",
                 "TmP_239[31:0]",
                 "TmP_24",
                 "TmP_240[31:0]",
                 "TmP_241[4:0]",
                 "TmP_242",
                 "TmP_243[31:0]",
                 "TmP_244[31:0]",
                 "TmP_245",
                 "TmP_246",
                 "TmP_247[31:0]",
                 "TmP_248[4:0]",
                 "TmP_249[31:0]",
                 "TmP_25[11:0]",
                 "TmP_250",
                 "TmP_251",
                 "TmP_26[11:0]",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3[11:0]",
                 "TmP_30[31:0]",
                 "TmP_31[7:0]",
                 "TmP_32[3:0]",
                 "TmP_33[3:0]",
                 "TmP_34[31:0]",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39[31:0]",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42[31:0]",
                 "TmP_43[31:0]",
                 "TmP_44[31:0]",
                 "TmP_45[31:0]",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6[2:0]",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7[3:0]",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75",
                 "TmP_76",
                 "TmP_77",
                 "TmP_78",
                 "TmP_79",
                 "TmP_8[7:0]",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82",
                 "TmP_83",
                 "TmP_84",
                 "TmP_85",
                 "TmP_86",
                 "TmP_87",
                 "TmP_88",
                 "TmP_89",
                 "TmP_9[11:0]",
                 "TmP_90",
                 "TmP_91",
                 "TmP_92",
                 "TmP_93",
                 "TmP_94",
                 "TmP_95",
                 "TmP_96",
                 "TmP_97",
                 "TmP_98",
                 "TmP_99[11:0]",
                 "abs_op",
                 "acb_reg",
                 "add_flag",
                 "addsub_q[31:0]",
                 "and_src1[23:0]",
                 "ari_op",
                 "ash",
                 "bcd_carry",
                 "bcd_op",
                 "bit_op",
                 "bit_reg",
                 "bwd_daten1[31:0]",
                 "bwd_daten2[31:0]",
                 "bytes2anz[3:0]",
                 "calc_psr[11:0]",
                 "chk_flag",
                 "chk_low[15:0]",
                 "chk_op",
                 "chk_p1",
                 "chk_upp[15:0]",
                 "cmp_op",
                 "cmps_op",
                 "cy_in",
                 "cy_out",
                 "diff_poi[31:0]",
                 "dis_opt",
                 "disp_reg[4:0]",
                 "dpointer[11:0]",
                 "dw_info",
                 "eis_op",
                 "exin_cmd",
                 "exin_op",
                 "exin_op2",
                 "ext_sh2[31:0]",
                 "ext_sh4[31:0]",
                 "extract",
                 "f_flag",
                 "ffs_flag",
                 "ffs_op",
                 "ffs_out[4:0]",
                 "flag_lo",
                 "flag_up",
                 "fp_nz[1:0]",
                 "get_mod",
                 "get_psr",
                 "ins_maske[31:0]",
                 "inss_op",
                 "kill_opt",
                 "kurz_anz[4:0]",
                 "kurz_st",
                 "ld_psr_h",
                 "ld_psr_l",
                 "low_bou[15:0]",
                 "lsh",
                 "mehr",
                 "movxz_dat[31:0]",
                 "neg_op",
                 "nl_flags[1:0]",
                 "nl_int[1:0]",
                 "no_opt",
                 "offs_reg[2:0]",
                 "op_str",
                 "over_flow",
                 "ovf_ash",
                 "pfad_11[31:0]",
                 "pfad_4[31:0]",
                 "pfad_4a[31:0]",
                 "pfad_5[31:0]",
                 "pfad_6[31:0]",
                 "pfad_7[31:0]",
                 "pfad_8[31:0]",
                 "ph_match",
                 "pop_psr",
                 "psr_high[3:0]",
                 "psr_low[7:0]",
                 "psr_new[7:0]",
                 "push_psr[11:0]",
                 "rd_dsr",
                 "rd_psr",
                 "rot",
                 "rwv_op",
                 "save_psr",
                 "sc_bit",
                 "sc_carry_psr",
                 "sc_flag",
                 "sc_larger",
                 "sc_negativ",
                 "sc_zero",
                 "selbits[4:0]",
                 "sh_count[7:0]",
                 "sh_exin[7:0]",
                 "shcode[4:0]",
                 "shdat[31:0]",
                 "shval_ei[4:0]",
                 "spointer[11:0]",
                 "str_op",
                 "t2p",
                 "todo[9:0]",
                 "todo_reg[5:0]",
                 "until",
                 "up_psr",
                 "upp_bou[15:0]",
                 "weiter",
                 "z_flag",
                 "zeiger[15:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 12 "I_PFAD.v:599" ["TmP_14[11:0]"] ["spointer[11:0]"] ["0b00000000", "todo[3:0]"] ,
        _add 12 "I_PFAD.v:600" ["TmP_15[11:0]"] ["dpointer[11:0]"] ["0b00000000", "todo[3:0]"] ,
        _add 5 "I_PFAD.v:670" ["sh_exin[4:0]"] ["TmP_248[4:0]"] ["0b0000", "extract"] ,
        _add 5 "I_PFAD.v:752" ["kurz_anz[4:0]"] ["0b0", "bytes2anz[3:0]"] ["0b00001"] ,
        _and 1 "I_PFAD.v:422" ["extract"] ["DETOIP[5]"] ["DETOIP[6]"] ,
        _and 1 "I_PFAD.v:432" ["ld_psr_l"] ["TmP_111"] ["WREN"] ,
        _and 1 "I_PFAD.v:433" ["TmP_16"] ["TmP_55"] ["TmP_85"] ,
        _and 1 "I_PFAD.v:433" ["ld_psr_h"] ["TmP_16"] ["WREN"] ,
        _and 1 "I_PFAD.v:435" ["TmP_17"] ["TmP_116"] ["LD_OUT"] ,
        _and 1 "I_PFAD.v:437" ["TmP_18"] ["TmP_58"] ["TmP_223"] ,
        _and 1 "I_PFAD.v:438" ["TmP_19"] ["TmP_94"] ["OPCODE[1]"] ,
        _and 1 "I_PFAD.v:438" ["TmP_20"] ["TmP_59"] ["TmP_117"] ,
        _and 1 "I_PFAD.v:440" ["TmP_21"] ["TmP_62"] ["TmP_63"] ,
        _and 1 "I_PFAD.v:440" ["ari_op"] ["TmP_21"] ["TmP_95"] ,
        _and 1 "I_PFAD.v:441" ["TmP_22"] ["OPCODE[3]"] ["TmP_63"] ,
        _and 1 "I_PFAD.v:441" ["neg_op"] ["TmP_59"] ["TmP_22"] ,
        _and 1 "I_PFAD.v:444" ["TmP_23"] ["TmP_64"] ["TmP_65"] ,
        _and 1 "I_PFAD.v:444" ["str_op"] ["TmP_23"] ["TmP_96"] ,
        _and 1 "I_PFAD.v:446" ["rwv_op"] ["TmP_66"] ["TmP_67"] ,
        _and 1 "I_PFAD.v:466" ["TmP_24"] ["DETOIP[11]"] ["str_op"] ,
        _and 12 "I_PFAD.v:477" ["TmP_25[11:0]"] ["psr_high[3:0]", "psr_low[7:0]"] ["TmP_98", "0b00011101101"] ,
        _and 12 "I_PFAD.v:479" ["TmP_26[11:0]"] ["psr_high[3:0]", "psr_low[7:0]"] ["TmP_99[11:0]"] ,
        _and 1 "I_PFAD.v:507" ["TmP_27"] ["TmP_100"] ["psr_high[2]"] ,
        _and 1 "I_PFAD.v:525" ["TmP_28"] ["over_flow"] ["DETOIP[1]"] ,
        _and 1 "I_PFAD.v:549" ["TmP_29"] ["TmP_94"] ["TmP_100"] ,
        _and 1 "I_PFAD.v:549" ["add_flag"] ["TmP_29"] ["TmP_98"] ,
        _and 32 "I_PFAD.v:569" ["TmP_30[31:0]"] ["SRC2[31:0]"] ["TmP_102[31:0]"] ,
        _and 8 "I_PFAD.v:570" ["TmP_31[7:0]"] ["TmP_103", "TmP_103", "TmP_103", "TmP_103", "TmP_103", "TmP_103", "TmP_103", "TmP_103"] ["psr_low[7:0]"] ,
        _and 4 "I_PFAD.v:570" ["TmP_32[3:0]"] ["rd_psr", "rd_psr", "rd_psr", "rd_psr"] ["psr_high[3:0]"] ,
        _and 4 "I_PFAD.v:570" ["TmP_33[3:0]"] ["rd_dsr", "rd_dsr", "rd_dsr", "rd_dsr"] ["DSR[3:0]"] ,
        _and 32 "I_PFAD.v:573" ["TmP_34[31:0]"] ["SRC2[31:0]"] ["SRC1[31:0]"] ,
        _and 1 "I_PFAD.v:603" ["TmP_35"] ["TmP_72"] ["TmP_89"] ,
        _and 1 "I_PFAD.v:604" ["TmP_36"] ["TmP_73"] ["TmP_90"] ,
        _and 1 "I_PFAD.v:659" ["TmP_37"] ["OPCODE[7]"] ["TmP_100"] ,
        _and 1 "I_PFAD.v:659" ["TmP_38"] ["TmP_37"] ["DETOIP[7]"] ,
        _and 1 "I_PFAD.v:660" ["exin_op"] ["DETOIP[6]"] ["TmP_75"] ,
        _and 1 "I_PFAD.v:661" ["exin_op2"] ["TmP_128"] ["TmP_59"] ,
        _and 32 "I_PFAD.v:691" ["TmP_39[31:0]"] ["SRC2[31:0]"] ["TmP_104[31:0]"] ,
        _and 1 "I_PFAD.v:727" ["TmP_40"] ["TmP_107"] ["TmP_106"] ,
        _and 1 "I_PFAD.v:729" ["TmP_41"] ["TmP_108"] ["TmP_106"] ,
        _and 24 "I_PFAD.v:741" ["and_src1[23:0]"] ["BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1]", "BWD[1:0]", "BWD[0]", "BWD[0]", "BWD[0]", "BWD[0]", "BWD[0]", "BWD[0]", "BWD[0]"] ["SRC1[31:8]"] ,
        _and 32 "I_PFAD.v:759" ["TmP_42[31:0]"] ["TmP_240[31:0]"] ["BMASKE[31:0]"] ,
        _and 1 "I_PFAD.v:788" ["TmP_1"] ["chk_op"] ["BWD[1]"] ,
        _and 32 "I_PFAD.v:796" ["TmP_43[31:0]"] ["TmP_243[31:0]"] ["BMASKE[31:0]"] ,
        _and 32 "I_PFAD.v:797" ["TmP_44[31:0]"] ["SRC1[31:0]"] ["ins_maske[31:0]"] ,
        _and 32 "I_PFAD.v:797" ["TmP_45[31:0]"] ["SRC2[31:0]"] ["TmP_110[31:0]"] ,
        _logic_reduce_or 2 "" ["TmP_46"] ["TmP_177", "TmP_174"],
        _logic_reduce_or 2 "" ["TmP_47"] ["TmP_182", "TmP_175"],
        _logic_reduce_or 2 "" ["TmP_48"] ["TmP_187", "TmP_176"],
        _logic_reduce_or 4 "" ["TmP_49"] ["TmP_181", "TmP_180", "TmP_179", "TmP_178"],
        _logic_reduce_or 3 "" ["TmP_50"] ["TmP_186", "TmP_185", "TmP_184"],
        _logic_reduce_or 2 "" ["TmP_51"] ["TmP_191", "TmP_190"],
        _logic_reduce_or 2 "" ["TmP_52"] ["TmP_218", "TmP_215"],
        _logic_reduce_or 2 "" ["TmP_53"] ["TmP_214", "TmP_211"],
        _eq 6 "I_PFAD.v:432" ["TmP_56"] ["WRADR[5:0]"] ["0b010000"] ,
        _eq 6 "I_PFAD.v:433" ["TmP_55"] ["WRADR[5:0]"] ["0b011101"] ,
        _eq 8 "I_PFAD.v:437" ["TmP_57"] ["OPCODE[7:0]"] ["0b01000001"] ,
        _eq 8 "I_PFAD.v:437" ["TmP_58"] ["OPCODE[7:0]"] ["0b10110010"] ,
        _eq 4 "I_PFAD.v:438" ["TmP_60"] ["OPCODE[3:0]"] ["0b1110"] ,
        _eq 8 "I_PFAD.v:439" ["TmP_61"] ["OPCODE[7:0]"] ["0b01001101"] ,
        _eq 8 "I_PFAD.v:442" ["ffs_op"] ["OPCODE[7:0]"] ["0b10000101"] ,
        _eq 8 "I_PFAD.v:443" ["chk_op"] ["OPCODE[7:0]"] ["0b10000011"] ,
        _logic_not 2 "I_PFAD.v:444" ["TmP_65"] ["OPCODE[3:2]"],
        _eq 8 "I_PFAD.v:445" ["abs_op"] ["OPCODE[7:0]"] ["0b01101100"] ,
        _eq 4 "I_PFAD.v:446" ["TmP_66"] ["OPCODE[7:4]"] ["0b1110"] ,
        _logic_not 32 "I_PFAD.v:456" ["ACB_ZERO"] ["addsub_q[31:0]"],
        _eq 5 "I_PFAD.v:485" ["save_psr"] ["OPCODE[7:3]"] ["0b10001"] ,
        _logic_not 3 "I_PFAD.v:486" ["pop_psr"] ["OPCODE[2:0]"],
        _eq 8 "I_PFAD.v:562" ["TmP_68"] ["RDAA[7:0]"] ["0b10011101"] ,
        _eq 8 "I_PFAD.v:562" ["TmP_69"] ["RDAA[7:0]"] ["0b10010000"] ,
        _eq 8 "I_PFAD.v:562" ["TmP_70"] ["RDAA[7:0]"] ["0b10010011"] ,
        _eq 2 "I_PFAD.v:563" ["TmP_11"] ["RDAA[1:0]"] ["0b01"] ,
        _eq 2 "I_PFAD.v:564" ["TmP_10"] ["RDAA[1:0]"] ["0b11"] ,
        _eq 8 "I_PFAD.v:565" ["TmP_4"] ["RDAA[7:0]"] ["0b10011111"] ,
        _logic_not 2 "I_PFAD.v:578" ["TmP_63"] ["OPCODE[1:0]"],
        _eq 5 "I_PFAD.v:589" ["op_str"] ["OPCODE[7:3]"] ["0b01010"] ,
        _logic_not 29 "I_PFAD.v:593" ["TmP_71"] ["diff_poi[31:3]"],
        _eq 9 "I_PFAD.v:603" ["TmP_72"] ["spointer[11:3]"] ["0b111111111"] ,
        _eq 9 "I_PFAD.v:604" ["TmP_73"] ["dpointer[11:3]"] ["0b111111111"] ,
        _logic_not 4 "I_PFAD.v:655" ["rot"] ["OPCODE[3:0]"],
        _eq 4 "I_PFAD.v:656" ["ash"] ["OPCODE[3:0]"] ["0b0001"] ,
        _eq 3 "I_PFAD.v:657" ["lsh"] ["OPCODE[3:1]"] ["0b010"] ,
        _eq 8 "I_PFAD.v:659" ["TmP_74"] ["OPCODE[7:0]"] ["0b01110011"] ,
        _logic_not 5 "I_PFAD.v:671" ["TmP_76"] ["shval_ei[4:0]"],
        _eq 4 "I_PFAD.v:674" ["TmP_77"] ["OPCODE[3:0]"] ["0b0100"] ,
        _eq 1 "I_PFAD.v:785" ["TmP_78"] ["upp_bou[15]"] ["zeiger[15]"] ,
        _eq 1 "I_PFAD.v:786" ["TmP_79"] ["low_bou[15]"] ["zeiger[15]"] ,
        _eq 2 "I_PFAD.v:805" ["TmP_80"] ["OPCODE[1:0]"] ["0b01"] ,
        _eq 2 "I_PFAD.v:806" ["TmP_81"] ["OPCODE[3:2]"] ["0b11"] ,
        _land 1 "I_PFAD.v:593" ["TmP_82"] ["op_str"] ["OPCODE[2]"],
        _lor 1 "I_PFAD.v:492" ["TmP_83"] ["ld_psr_l"] ["save_psr"],
        _lor 1 "I_PFAD.v:501" ["TmP_84"] ["ld_psr_h"] ["save_psr"],
        _logic_reduce_bool 2 "I_PFAD.v:433" ["TmP_85"] ["BWD[1:0]"],
        _ne 1 "I_PFAD.v:531" ["TmP_86"] ["SRC2[7]"] ["shdat[7]"] ,
        _ne 1 "I_PFAD.v:532" ["TmP_87"] ["SRC2[15]"] ["shdat[15]"] ,
        _ne 1 "I_PFAD.v:533" ["TmP_88"] ["SRC2[31]"] ["shdat[31]"] ,
        _logic_reduce_bool 3 "I_PFAD.v:603" ["TmP_89"] ["spointer[2:0]"],
        _logic_reduce_bool 3 "I_PFAD.v:604" ["TmP_90"] ["dpointer[2:0]"],
        _logic_reduce_bool 28 "I_PFAD.v:609" ["mehr"] ["pfad_5[31:4]"],
        _logic_reduce_bool 4 "I_PFAD.v:639" ["TmP_91"] ["pfad_5[3:0]"],
        _not 1 "I_PFAD.v:437" ["TmP_92"] ["SP_CMP[2]"],
        _not 1 "I_PFAD.v:437" ["TmP_93"] ["DP_CMP[2]"],
        _not 1 "I_PFAD.v:440" ["TmP_95"] ["DETOIP[2]"],
        _not 1 "I_PFAD.v:444" ["TmP_96"] ["DETOIP[3]"],
        _not 1 "I_PFAD.v:471" ["TmP_97"] ["TmP_246"],
        _not 12 "I_PFAD.v:479" ["TmP_99[11:0]"] ["SRC1[11:0]"],
        _not 1 "I_PFAD.v:549" ["TmP_94"] ["OPCODE[3]"],
        _not 1 "I_PFAD.v:549" ["TmP_98"] ["OPCODE[0]"],
        _not 1 "I_PFAD.v:570" ["TmP_103"] ["rd_dsr"],
        _not 1 "I_PFAD.v:659" ["TmP_100"] ["OPCODE[1]"],
        _not 32 "I_PFAD.v:691" ["TmP_104[31:0]"] ["BMASKE[31:0]"],
        _not 1 "I_PFAD.v:694" ["TmP_105"] ["SRC1[0]"],
        _not 32 "I_PFAD.v:697" ["TmP_102[31:0]"] ["SRC1[31:0]"],
        _not 1 "I_PFAD.v:720" ["TmP_101"] ["psr_low[0]"],
        _not 1 "I_PFAD.v:726" ["TmP_109"] ["psr_low[5]"],
        _not 1 "I_PFAD.v:727" ["TmP_107"] ["psr_low[2]"],
        _not 1 "I_PFAD.v:729" ["TmP_108"] ["psr_low[7]"],
        _not 1 "I_PFAD.v:729" ["TmP_106"] ["psr_low[6]"],
        _not 32 "I_PFAD.v:797" ["TmP_110[31:0]"] ["ins_maske[31:0]"],
        _or 1 "I_PFAD.v:432" ["TmP_111"] ["TmP_55"] ["TmP_56"] ,
        _or 1 "I_PFAD.v:435" ["TmP_112"] ["cmp_op"] ["bit_op"] ,
        _or 1 "I_PFAD.v:435" ["TmP_113"] ["TmP_112"] ["ari_op"] ,
        _or 1 "I_PFAD.v:435" ["TmP_114"] ["TmP_113"] ["neg_op"] ,
        _or 1 "I_PFAD.v:435" ["TmP_115"] ["TmP_114"] ["ffs_op"] ,
        _or 1 "I_PFAD.v:435" ["TmP_116"] ["TmP_115"] ["chk_op"] ,
        _or 1 "I_PFAD.v:435" ["up_psr"] ["OVF_BCD[1]"] ["TmP_17"] ,
        _or 1 "I_PFAD.v:437" ["cmp_op"] ["TmP_57"] ["TmP_18"] ,
        _or 1 "I_PFAD.v:438" ["TmP_117"] ["TmP_19"] ["TmP_60"] ,
        _or 1 "I_PFAD.v:439" ["TmP_118"] ["TmP_20"] ["TmP_61"] ,
        _or 1 "I_PFAD.v:439" ["TmP_119"] ["TmP_118"] ["str_op"] ,
        _or 1 "I_PFAD.v:439" ["bit_op"] ["TmP_119"] ["rwv_op"] ,
        _or 1 "I_PFAD.v:463" ["TmP_120"] ["ffs_op"] ["chk_op"] ,
        _or 1 "I_PFAD.v:464" ["TmP_121"] ["DETOIP[1]"] ["abs_op"] ,
        _or 12 "I_PFAD.v:480" ["TmP_122[11:0]"] ["psr_high[3:0]", "psr_low[7:0]"] ["SRC1[11:0]"] ,
        _or 1 "I_PFAD.v:562" ["TmP_123"] ["TmP_68"] ["TmP_69"] ,
        _or 1 "I_PFAD.v:562" ["TmP_5"] ["TmP_123"] ["TmP_70"] ,
        _or 32 "I_PFAD.v:572" ["TmP_124[31:0]"] ["SRC2[31:0]"] ["SRC1[31:0]"] ,
        _or 1 "I_PFAD.v:604" ["TmP_125"] ["OPCODE[1]"] ["TmP_35"] ,
        _or 1 "I_PFAD.v:604" ["TmP_126"] ["TmP_125"] ["DETOIP[8]"] ,
        _or 1 "I_PFAD.v:605" ["TmP_127"] ["TmP_126"] ["TmP_36"] ,
        _or 1 "I_PFAD.v:605" ["no_opt"] ["TmP_127"] ["dis_opt"] ,
        _or 1 "I_PFAD.v:639" ["weiter"] ["mehr"] ["TmP_91"] ,
        _or 1 "I_PFAD.v:659" ["eis_op"] ["TmP_74"] ["TmP_38"] ,
        _or 1 "I_PFAD.v:661" ["TmP_128"] ["DETOIP[6]"] ["DETOIP[7]"] ,
        _or 1 "I_PFAD.v:667" ["TmP_129"] ["DETOIP[4]"] ["eis_op"] ,
        _or 1 "I_PFAD.v:667" ["TmP_130"] ["TmP_129"] ["exin_op"] ,
        _or 1 "I_PFAD.v:676" ["TmP_131"] ["bit_op"] ["eis_op"] ,
        _or 1 "I_PFAD.v:676" ["TmP_132"] ["TmP_131"] ["exin_op"] ,
        _or 1 "I_PFAD.v:676" ["TmP_133"] ["bit_op"] ["exin_op"] ,
        _or 1 "I_PFAD.v:676" ["TmP_134"] ["eis_op"] ["exin_op"] ,
        _or 1 "I_PFAD.v:682" ["TmP_135"] ["DETOIP[2]"] ["BWD[1]"] ,
        _or 32 "I_PFAD.v:692" ["TmP_136[31:0]"] ["SRC2[31:0]"] ["BMASKE[31:0]"] ,
        _or 1 "I_PFAD.v:728" ["TmP_137"] ["psr_low[2]"] ["psr_low[6]"] ,
        _or 1 "I_PFAD.v:730" ["TmP_138"] ["psr_low[7]"] ["psr_low[6]"] ,
        _or 1 "I_PFAD.v:790" ["TmP_139"] ["nl_int[1]"] ["psr_low[5]"] ,
        _or 1 "I_PFAD.v:790" ["TmP_140"] ["flag_up"] ["flag_lo"] ,
        _or 32 "I_PFAD.v:797" ["TmP_141[31:0]"] ["TmP_44[31:0]"] ["TmP_45[31:0]"] ,
        _dff 32 "I_PFAD.v:792" ["ins_maske[31:0]"] ["BCLK"] ["shdat[31:0]"],
        _dff 1 "I_PFAD.v:788" ["chk_p1"] ["BCLK"] ["TmP_1"],
        _dff 3 "I_PFAD.v:664" ["offs_reg[2:0]"] ["BCLK"] ["TmP_6[2:0]"],
        _dff 5 "I_PFAD.v:663" ["disp_reg[4:0]"] ["BCLK"] ["DISP[4:0]"],
        _dff 6 "I_PFAD.v:637" ["todo_reg[5:0]"] ["BCLK"] ["TmP_13[5:0]"],
        _dff 12 "I_PFAD.v:596" ["spointer[11:0]"] ["BCLK"] ["TmP_12[11:0]"],
        _dff 12 "I_PFAD.v:596" ["dpointer[11:0]"] ["BCLK"] ["TmP_3[11:0]"],
        _dff 1 "I_PFAD.v:593" ["dis_opt"] ["BCLK"] ["TmP_2"],
        _dff 1 "I_PFAD.v:565" ["get_mod"] ["BCLK"] ["TmP_4"],
        _dff 1 "I_PFAD.v:564" ["rd_dsr"] ["BCLK"] ["TmP_10"],
        _dff 1 "I_PFAD.v:563" ["rd_psr"] ["BCLK"] ["TmP_11"],
        _dff 1 "I_PFAD.v:562" ["get_psr"] ["BCLK"] ["TmP_5"],
        _adff 1 "I_PFAD.v:516" ["OV_FLAG"] ["BRESET"] ["BCLK"] ["TmP_0"],
        _dff 12 "I_PFAD.v:507" ["push_psr[11:0]"] ["BCLK"] ["TmP_9[11:0]"],
        _adff 4 "I_PFAD.v:497" ["psr_high[3:0]"] ["BRESET"] ["BCLK"] ["TmP_7[3:0]"],
        _adff 8 "I_PFAD.v:488" ["psr_low[7:0]"] ["BRESET"] ["BCLK"] ["TmP_8[7:0]"],
        _pmux 32 4 "I_PFAD.v:799|I_PFAD.v:795" ["pfad_8[31:0]"] ["0bxxxx", "push_psr[11:0]", "SRC1[15:0]"] ["TmP_43[31:0]", "TmP_141[31:0]", "TmP_244[31:0]", "0bxxxxxxxxxxxxxxxxxxxxxxxx000", "ffs_out[4:0]"] ["TmP_67", "TmP_144", "TmP_143", "TmP_142"],
        _eq 4 "I_PFAD.v:799|I_PFAD.v:795" ["TmP_142"] ["OPCODE[3:0]"] ["0b0101"] ,
        _eq 4 "I_PFAD.v:797|I_PFAD.v:795" ["TmP_144"] ["OPCODE[3:0]"] ["0b0010"] ,
        _logic_not 3 "I_PFAD.v:796|I_PFAD.v:795" ["TmP_67"] ["OPCODE[3:1]"],
        _pmux 32 4 "I_PFAD.v:762|I_PFAD.v:758" ["pfad_7[31:0]"] ["DP_OUT[31:0]"] ["TmP_42[31:0]", "movxz_dat[31:0]", "MRESULT[31:0]", "0b000000000000000000000000000", "TmP_241[4:0]"] ["TmP_143", "TmP_147", "TmP_146", "TmP_145"],
        _eq 2 "I_PFAD.v:760|I_PFAD.v:758" ["TmP_147"] ["OPCODE[3:2]"] ["0b01"] ,
        _eq 4 "I_PFAD.v:759|I_PFAD.v:758" ["TmP_143"] ["OPCODE[3:0]"] ["0b0011"] ,
        _pmux 4 3 "I_PFAD.v:749|I_PFAD.v:746" ["bytes2anz[3:0]"] ["0bxxxx"] ["ADDR[3:0]", "0b0", "ADDR[3:1]", "0b00", "ADDR[3:2]"] ["TmP_149", "TmP_148", "BWD[1]"],
        _pmux 1 16 "I_PFAD.v:732|I_PFAD.v:716" ["sc_bit"] ["0bx"] ["psr_low[6]", "TmP_106", "psr_low[0]", "TmP_101", "psr_low[2]", "TmP_107", "psr_low[7]", "TmP_108", "psr_low[5]", "TmP_109", "TmP_40", "TmP_137", "TmP_41", "TmP_138", "0b10"] ["TmP_165", "TmP_164", "TmP_163", "TmP_162", "TmP_161", "TmP_160", "TmP_159", "TmP_158", "TmP_157", "TmP_156", "TmP_155", "TmP_154", "TmP_153", "TmP_152", "TmP_151", "TmP_150"],
        _eq 4 "I_PFAD.v:732|I_PFAD.v:716" ["TmP_150"] ["SRC1[3:0]"] ["0b1111"] ,
        _eq 4 "I_PFAD.v:731|I_PFAD.v:716" ["TmP_151"] ["SRC1[3:0]"] ["0b1110"] ,
        _eq 4 "I_PFAD.v:730|I_PFAD.v:716" ["TmP_152"] ["SRC1[3:0]"] ["0b1101"] ,
        _eq 4 "I_PFAD.v:729|I_PFAD.v:716" ["TmP_153"] ["SRC1[3:0]"] ["0b1100"] ,
        _eq 4 "I_PFAD.v:728|I_PFAD.v:716" ["TmP_154"] ["SRC1[3:0]"] ["0b1011"] ,
        _eq 4 "I_PFAD.v:727|I_PFAD.v:716" ["TmP_155"] ["SRC1[3:0]"] ["0b1010"] ,
        _eq 4 "I_PFAD.v:726|I_PFAD.v:716" ["TmP_156"] ["SRC1[3:0]"] ["0b1001"] ,
        _eq 4 "I_PFAD.v:725|I_PFAD.v:716" ["TmP_157"] ["SRC1[3:0]"] ["0b1000"] ,
        _eq 4 "I_PFAD.v:724|I_PFAD.v:716" ["TmP_158"] ["SRC1[3:0]"] ["0b0111"] ,
        _eq 4 "I_PFAD.v:723|I_PFAD.v:716" ["TmP_159"] ["SRC1[3:0]"] ["0b0110"] ,
        _eq 4 "I_PFAD.v:722|I_PFAD.v:716" ["TmP_160"] ["SRC1[3:0]"] ["0b0101"] ,
        _eq 4 "I_PFAD.v:721|I_PFAD.v:716" ["TmP_161"] ["SRC1[3:0]"] ["0b0100"] ,
        _eq 4 "I_PFAD.v:720|I_PFAD.v:716" ["TmP_162"] ["SRC1[3:0]"] ["0b0011"] ,
        _eq 4 "I_PFAD.v:719|I_PFAD.v:716" ["TmP_163"] ["SRC1[3:0]"] ["0b0010"] ,
        _eq 4 "I_PFAD.v:718|I_PFAD.v:716" ["TmP_164"] ["SRC1[3:0]"] ["0b0001"] ,
        _logic_not 4 "I_PFAD.v:717|I_PFAD.v:716" ["TmP_165"] ["SRC1[3:0]"],
        _pmux 32 8 "I_PFAD.v:698|I_PFAD.v:690" ["pfad_6[31:0]"] ["shdat[31:0]"] ["TmP_39[31:0]", "TmP_136[31:0]", "addsub_q[31:0]", "SRC1[31:1]", "TmP_105", "SRC1[31:0]", "TmP_239[31:0]", "TmP_102[31:0]", "TmP_249[31:0]"] ["TmP_171", "TmP_170", "TmP_146", "TmP_169", "TmP_145", "TmP_168", "TmP_167", "TmP_166"],
        _eq 4 "I_PFAD.v:697|I_PFAD.v:690" ["TmP_167"] ["OPCODE[3:0]"] ["0b1101"] ,
        _eq 4 "I_PFAD.v:696|I_PFAD.v:690" ["TmP_168"] ["OPCODE[3:0]"] ["0b1100"] ,
        _eq 4 "I_PFAD.v:695|I_PFAD.v:690" ["TmP_145"] ["OPCODE[3:0]"] ["0b1010"] ,
        _eq 4 "I_PFAD.v:694|I_PFAD.v:690" ["TmP_169"] ["OPCODE[3:0]"] ["0b1001"] ,
        _eq 4 "I_PFAD.v:693|I_PFAD.v:690" ["TmP_146"] ["OPCODE[3:0]"] ["0b1000"] ,
        _pmux 32 3 "I_PFAD.v:685|I_PFAD.v:682" ["bwd_daten2[31:0]"] ["SRC2[31:0]"] ["SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7:0]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15]", "SRC2[15:0]", "0b00000000000000000000000000000000"] ["TmP_173", "TmP_172", "neg_op"],
        _eq 3 "I_PFAD.v:684|I_PFAD.v:682" ["TmP_172"] ["neg_op", "TmP_135", "BWD[0]"] ["0b001"] ,
        _logic_not 3 "I_PFAD.v:683|I_PFAD.v:682" ["TmP_173"] ["neg_op", "TmP_135", "BWD[0]"],
        _mux 3 "I_PFAD.v:664" ["TmP_6[2:0]"] ["offs_reg[2:0]"] ["SRC1[7:5]"] ["OPCODE[7]"],
        _mux 6 "I_PFAD.v:637" ["TmP_13[5:0]"] ["todo_reg[5:0]"] ["todo[9:8]", "TmP_235[3:0]"] ["op_str"],
        _pmux 10 9 "I_PFAD.v:633|I_PFAD.v:612" ["todo[9:0]"] ["0bxxxxxxxxxx"] ["0b111000100010010001000100100010110100100010001001001100101000000001000101000100101000010100"] ["TmP_51", "TmP_189", "TmP_188", "TmP_50", "TmP_183", "TmP_49", "TmP_48", "TmP_47", "TmP_46"],
        _eq 2 "I_PFAD.v:633|I_PFAD.v:612" ["TmP_174"] ["no_opt", "BWD[1]"] ["0b11"] ,
        _eq 3 "I_PFAD.v:632|I_PFAD.v:612" ["TmP_175"] ["no_opt", "BWD[1:0]"] ["0b101"] ,
        _eq 3 "I_PFAD.v:631|I_PFAD.v:612" ["TmP_176"] ["no_opt", "BWD[1:0]"] ["0b100"] ,
        _eq 7 "I_PFAD.v:629|I_PFAD.v:612" ["TmP_177"] ["no_opt", "BWD[1]", "mehr", "pfad_5[3:0]"] ["0b0100001"] ,
        _eq 6 "I_PFAD.v:628|I_PFAD.v:612" ["TmP_178"] ["no_opt", "BWD[1]", "mehr", "pfad_5[3:1]"] ["0b010001"] ,
        _eq 5 "I_PFAD.v:627|I_PFAD.v:612" ["TmP_179"] ["no_opt", "BWD[1]", "mehr", "pfad_5[3:2]"] ["0b01001"] ,
        _eq 4 "I_PFAD.v:626|I_PFAD.v:612" ["TmP_180"] ["no_opt", "BWD[1]", "mehr", "pfad_5[3]"] ["0b0101"] ,
        _eq 3 "I_PFAD.v:625|I_PFAD.v:612" ["TmP_181"] ["no_opt", "BWD[1]", "mehr"] ["0b011"] ,
        _eq 8 "I_PFAD.v:623|I_PFAD.v:612" ["TmP_182"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3:0]"] ["0b00100001"] ,
        _eq 7 "I_PFAD.v:622|I_PFAD.v:612" ["TmP_183"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3:1]"] ["0b0010001"] ,
        _eq 6 "I_PFAD.v:621|I_PFAD.v:612" ["TmP_184"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3:2]"] ["0b001001"] ,
        _eq 5 "I_PFAD.v:620|I_PFAD.v:612" ["TmP_185"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3]"] ["0b00101"] ,
        _eq 4 "I_PFAD.v:619|I_PFAD.v:612" ["TmP_186"] ["no_opt", "BWD[1:0]", "mehr"] ["0b0011"] ,
        _eq 8 "I_PFAD.v:617|I_PFAD.v:612" ["TmP_187"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3:0]"] ["0b00000001"] ,
        _eq 7 "I_PFAD.v:616|I_PFAD.v:612" ["TmP_188"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3:1]"] ["0b0000001"] ,
        _eq 6 "I_PFAD.v:615|I_PFAD.v:612" ["TmP_189"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3:2]"] ["0b000001"] ,
        _eq 5 "I_PFAD.v:614|I_PFAD.v:612" ["TmP_190"] ["no_opt", "BWD[1:0]", "mehr", "pfad_5[3]"] ["0b00001"] ,
        _eq 4 "I_PFAD.v:613|I_PFAD.v:612" ["TmP_191"] ["no_opt", "BWD[1:0]", "mehr"] ["0b0001"] ,
        _mux 12 "I_PFAD.v:597" ["TmP_3[11:0]"] ["dpointer[11:0]"] ["TmP_234[11:0]"] ["op_str"],
        _mux 12 "I_PFAD.v:597" ["TmP_12[11:0]"] ["spointer[11:0]"] ["TmP_233[11:0]"] ["op_str"],
        _mux 1 "I_PFAD.v:593" ["TmP_2"] ["dis_opt"] ["TmP_71"] ["TmP_82"],
        _pmux 32 5 "I_PFAD.v:574|I_PFAD.v:568" ["pfad_4a[31:0]"] ["ADDR[31:0]"] ["TmP_30[31:0]", "TmP_232[31:0]", "TmP_124[31:0]", "TmP_34[31:0]", "TmP_247[31:0]"] ["TmP_171", "TmP_54", "TmP_170", "TmP_192", "TmP_166"],
        _eq 3 "I_PFAD.v:574|I_PFAD.v:568" ["TmP_166"] ["OPCODE[3:1]"] ["0b111"] ,
        _eq 3 "I_PFAD.v:573|I_PFAD.v:568" ["TmP_192"] ["OPCODE[3:1]"] ["0b101"] ,
        _eq 3 "I_PFAD.v:572|I_PFAD.v:568" ["TmP_170"] ["OPCODE[3:1]"] ["0b011"] ,
        _eq 2 "I_PFAD.v:570|I_PFAD.v:568" ["TmP_54"] ["OPCODE[2:1]"] ["0b10"] ,
        _eq 3 "I_PFAD.v:569|I_PFAD.v:568" ["TmP_171"] ["OPCODE[3:1]"] ["0b001"] ,
        _pmux 1 3 "I_PFAD.v:555|I_PFAD.v:552" ["cy_in"] ["0b1"] ["OPCODE[0]", "psr_low[0]", "TmP_101"] ["TmP_195", "TmP_194", "TmP_193"],
        _eq 3 "I_PFAD.v:555|I_PFAD.v:552" ["TmP_193"] ["OPCODE[5]", "OPCODE[3:2]"] ["0b011"] ,
        _eq 3 "I_PFAD.v:554|I_PFAD.v:552" ["TmP_194"] ["OPCODE[5]", "OPCODE[3:2]"] ["0b001"] ,
        _logic_not 3 "I_PFAD.v:553|I_PFAD.v:552" ["TmP_195"] ["OPCODE[5]", "OPCODE[3:2]"],
        _pmux 32 2 "I_PFAD.v:545|I_PFAD.v:543" ["bwd_daten1[31:0]"] ["SRC1[31:0]"] ["SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7:0]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15:0]"] ["TmP_149", "TmP_148"],
        _pmux 1 2 "I_PFAD.v:532|I_PFAD.v:530" ["ovf_ash"] ["TmP_88"] ["TmP_86", "TmP_87"] ["TmP_149", "TmP_148"],
        _eq 2 "I_PFAD.v:532|I_PFAD.v:530" ["TmP_148"] ["BWD[1:0]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:531|I_PFAD.v:530" ["TmP_149"] ["BWD[1:0]"],
        _pmux 1 3 "I_PFAD.v:525|I_PFAD.v:522" ["TmP_196"] ["0b0"] ["MRESULT[32]", "ovf_ash", "TmP_28"] ["TmP_199", "TmP_198", "TmP_197"],
        _eq 8 "I_PFAD.v:525|I_PFAD.v:522" ["TmP_197"] ["OPCODE[7:0]"] ["0b01000000"] ,
        _eq 8 "I_PFAD.v:524|I_PFAD.v:522" ["TmP_198"] ["OPCODE[7:0]"] ["0b01100001"] ,
        _eq 8 "I_PFAD.v:523|I_PFAD.v:522" ["TmP_199"] ["OPCODE[7:0]"] ["0b01111000"] ,
        _mux 1 "I_PFAD.v:521" ["TmP_200"] ["OV_FLAG"] ["TmP_196"] ["LD_OUT"],
        _mux 1 "I_PFAD.v:519" ["TmP_0"] ["TmP_200"] ["OVF_BCD[2]"] ["OVF_BCD[3]"],
        _mux 12 "I_PFAD.v:507" ["TmP_9[11:0]"] ["push_psr[11:0]"] ["psr_high[3]", "TmP_27", "psr_high[1:0]", "psr_low[7:0]"] ["save_psr"],
        _mux 4 "I_PFAD.v:503" ["TmP_201[3:0]"] ["psr_high[3:0]"] ["psr_high[3]", "psr_low[1]", "psr_high[1:0]"] ["DETOIP[0]"],
        _mux 4 "I_PFAD.v:501" ["TmP_7[3:0]"] ["TmP_201[3:0]"] ["calc_psr[11:8]"] ["TmP_84"],
        _mux 8 "I_PFAD.v:494" ["TmP_202[7:0]"] ["psr_low[7:0]"] ["psr_new[7:0]"] ["up_psr"],
        _mux 8 "I_PFAD.v:492" ["TmP_8[7:0]"] ["TmP_202[7:0]"] ["calc_psr[7:0]"] ["TmP_83"],
        _pmux 12 4 "I_PFAD.v:480|I_PFAD.v:476" ["calc_psr[11:0]"] ["SRC1[11:0]"] ["TmP_25[11:0]", "SRC1[27:16]", "TmP_26[11:0]", "TmP_122[11:0]"] ["TmP_206", "TmP_205", "TmP_204", "TmP_203"],
        _eq 3 "I_PFAD.v:480|I_PFAD.v:476" ["TmP_203"] ["save_psr", "OPCODE[6]", "OPCODE[2]"] ["0b001"] ,
        _logic_not 3 "I_PFAD.v:479|I_PFAD.v:476" ["TmP_204"] ["save_psr", "OPCODE[6]", "OPCODE[2]"],
        _eq 2 "I_PFAD.v:478|I_PFAD.v:476" ["TmP_205"] ["save_psr", "pop_psr"] ["0b11"] ,
        _eq 2 "I_PFAD.v:477|I_PFAD.v:476" ["TmP_206"] ["save_psr", "pop_psr"] ["0b10"] ,
        _pmux 8 5 "I_PFAD.v:470|I_PFAD.v:463" ["psr_new[7:0]"] ["0bxxxxxxxx"] ["psr_low[7:6]", "f_flag", "psr_low[4:1]", "TmP_227", "psr_low[7:6]", "TmP_228", "psr_low[4:0]", "TmP_229[7:0]", "psr_low[7:6]", "0b0", "psr_low[4:1]", "OVF_BCD[0]", "TmP_230[7:0]"] ["TmP_210", "TmP_209", "TmP_208", "TmP_207", "cmp_op"],
        _eq 2 "I_PFAD.v:469|I_PFAD.v:463" ["TmP_207"] ["cmp_op", "OVF_BCD[1]"] ["0b01"] ,
        _eq 3 "I_PFAD.v:466|I_PFAD.v:463" ["TmP_208"] ["cmp_op", "OVF_BCD[1]", "bit_op"] ["0b001"] ,
        _eq 4 "I_PFAD.v:465|I_PFAD.v:463" ["TmP_209"] ["cmp_op", "OVF_BCD[1]", "bit_op", "TmP_120"] ["0b0001"] ,
        _logic_not 4 "I_PFAD.v:464|I_PFAD.v:463" ["TmP_210"] ["cmp_op", "OVF_BCD[1]", "bit_op", "TmP_120"],
        _pmux 2 3 "I_PFAD.v:453|I_PFAD.v:449" ["nl_int[1:0]"] ["0bxx"] ["0b0110", "addsub_q[31]", "addsub_q[31]"] ["TmP_213", "TmP_212", "TmP_53"],
        _eq 2 "I_PFAD.v:453|I_PFAD.v:449" ["TmP_211"] ["bwd_daten2[31]", "bwd_daten1[31]"] ["0b11"] ,
        _eq 2 "I_PFAD.v:452|I_PFAD.v:449" ["TmP_212"] ["bwd_daten2[31]", "bwd_daten1[31]"] ["0b10"] ,
        _eq 2 "I_PFAD.v:451|I_PFAD.v:449" ["TmP_213"] ["bwd_daten2[31]", "bwd_daten1[31]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:450|I_PFAD.v:449" ["TmP_214"] ["bwd_daten2[31]", "bwd_daten1[31]"],
        _pmux 32 8 "I_PFAD.v:389|I_PFAD.v:379" ["I_OUT[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["pfad_4[31:0]", "pfad_5[31:0]", "pfad_6[31:0]", "pfad_7[31:0]", "pfad_8[31:0]", "TmP_222[31:0]", "pfad_11[31:0]", "DP_OUT[31:0]"] ["TmP_62", "TmP_64", "TmP_59", "TmP_219", "TmP_75", "TmP_217", "TmP_216", "TmP_52"],
        _eq 4 "I_PFAD.v:389|I_PFAD.v:379" ["TmP_215"] ["OPCODE[7:4]"] ["0b1101"] ,
        _eq 4 "I_PFAD.v:388|I_PFAD.v:379" ["TmP_216"] ["OPCODE[7:4]"] ["0b1011"] ,
        _eq 5 "I_PFAD.v:387|I_PFAD.v:379" ["TmP_217"] ["OPCODE[7:3]"] ["0b10011"] ,
        _eq 5 "I_PFAD.v:385|I_PFAD.v:379" ["TmP_218"] ["OPCODE[7:3]"] ["0b10010"] ,
        _eq 4 "I_PFAD.v:384|I_PFAD.v:379" ["TmP_75"] ["OPCODE[7:4]"] ["0b1000"] ,
        _eq 4 "I_PFAD.v:383|I_PFAD.v:379" ["TmP_219"] ["OPCODE[7:4]"] ["0b0111"] ,
        _eq 4 "I_PFAD.v:382|I_PFAD.v:379" ["TmP_59"] ["OPCODE[7:4]"] ["0b0110"] ,
        _eq 4 "I_PFAD.v:381|I_PFAD.v:379" ["TmP_64"] ["OPCODE[7:4]"] ["0b0101"] ,
        _eq 4 "I_PFAD.v:380|I_PFAD.v:379" ["TmP_62"] ["OPCODE[7:4]"] ["0b0100"] ,
        _shr 1 32 5 "I_PFAD.v:457" ["TmP_220"] ["SRC2[31:0]"] ["selbits[4:0]"],
        _sub 32 "I_PFAD.v:591" ["diff_poi[31:0]"] ["SRC2[31:0]"] ["SRC1[31:0]"] ,
        _sub 32 "I_PFAD.v:607" ["pfad_5[31:0]"] ["SRC1[31:0]"] ["0b0000000000000000000000000000", "todo_reg[3:0]"] ,
        _sub 16 "I_PFAD.v:782" ["chk_upp[15:0]"] ["upp_bou[15:0]"] ["zeiger[15:0]"] ,
        _sub 16 "I_PFAD.v:783" ["chk_low[15:0]"] ["zeiger[15:0]"] ["low_bou[15:0]"] ,
        _mux 32 "I_PFAD.v:387" ["TmP_221[31:0]"] ["DP_OUT[31:0]"] ["SFP_DAT[31:0]"] ["FL"],
        _mux 32 "I_PFAD.v:387" ["TmP_222[31:0]"] ["TmP_221[31:0]"] ["FSR[31:0]"] ["TmP_54"],
        _mux 1 "I_PFAD.v:437" ["TmP_223"] ["TmP_93"] ["TmP_92"] ["FL"],
        _mux 1 "I_PFAD.v:457" ["TmP_224"] ["over_flow"] ["psr_low[5]"] ["DETOIP[1]"],
        _mux 1 "I_PFAD.v:457" ["TmP_225"] ["TmP_224"] ["TmP_220"] ["bit_op"],
        _mux 1 "I_PFAD.v:457" ["TmP_226"] ["TmP_225"] ["RWVFLAG"] ["rwv_op"],
        _mux 1 "I_PFAD.v:457" ["f_flag"] ["TmP_226"] ["0b0"] ["str_op"],
        _mux 2 "I_PFAD.v:458" ["fp_nz[1:0]"] ["DP_CMP[1:0]"] ["SP_CMP[1:0]"] ["FL"],
        _mux 1 "I_PFAD.v:459" ["z_flag"] ["ACB_ZERO"] ["fp_nz[0]"] ["OPCODE[1]"],
        _mux 2 "I_PFAD.v:460" ["nl_flags[1:0]"] ["nl_int[1:0]"] ["fp_nz[1]", "0b0"] ["OPCODE[1]"],
        _mux 1 "I_PFAD.v:464" ["TmP_227"] ["cy_out"] ["psr_low[0]"] ["TmP_121"],
        _mux 1 "I_PFAD.v:465" ["TmP_228"] ["chk_flag"] ["ffs_flag"] ["ffs_op"],
        _mux 8 "I_PFAD.v:468" ["TmP_229[7:0]"] ["psr_low[7:6]", "f_flag", "psr_low[4:0]"] ["0b01", "f_flag", "psr_low[4:3]", "0b0", "psr_low[1:0]"] ["TmP_24"],
        _mux 8 "I_PFAD.v:472" ["TmP_230[7:0]"] ["nl_flags[1]", "z_flag", "psr_low[5:3]", "nl_flags[0]", "psr_low[1:0]"] ["psr_low[7:6]", "TmP_97", "psr_low[4:0]"] ["DETOIP[10]"],
        _mux 32 "I_PFAD.v:571" ["TmP_231[31:0]"] ["SRC1[31:0]"] ["0b0000000000000000", "SRC1[15:0]"] ["get_mod"],
        _mux 32 "I_PFAD.v:571" ["TmP_232[31:0]"] ["TmP_231[31:0]"] ["TmP_33[3:0]", "0b0000000000000000", "TmP_32[3:0]", "TmP_31[7:0]"] ["get_psr"],
        _mux 32 "I_PFAD.v:578" ["pfad_4[31:0]"] ["pfad_4a[31:0]"] ["addsub_q[31:0]"] ["TmP_63"],
        _mux 12 "I_PFAD.v:599" ["TmP_233[11:0]"] ["TmP_14[11:0]"] ["SRC1[11:0]"] ["OPCODE[2]"],
        _mux 12 "I_PFAD.v:600" ["TmP_234[11:0]"] ["TmP_15[11:0]"] ["SRC2[11:0]"] ["OPCODE[2]"],
        _mux 4 "I_PFAD.v:637" ["TmP_235[3:0]"] ["todo[7:4]"] ["0b0000"] ["OPCODE[2]"],
        _mux 2 "I_PFAD.v:641" ["STRING[1:0]"] ["todo_reg[5:4]"] ["todo[9:8]"] ["op_str"],
        _mux 5 "I_PFAD.v:667" ["TmP_236[4:0]"] ["SRC1[4:0]"] ["disp_reg[4:0]"] ["exin_op"],
        _mux 5 "I_PFAD.v:667" ["selbits[4:0]"] ["0b00", "BITSEL[2:0]"] ["TmP_236[4:0]"] ["TmP_130"],
        _mux 5 "I_PFAD.v:669" ["TmP_237[4:0]"] ["0b00", "SRC1[2:0]"] ["SRC1[4:0]"] ["DETOIP[4]"],
        _mux 5 "I_PFAD.v:669" ["shval_ei[4:0]"] ["TmP_237[4:0]"] ["0b00", "offs_reg[2:0]"] ["DETOIP[7]"],
        _mux 3 "I_PFAD.v:671" ["sh_exin[7:5]"] ["extract", "extract", "extract"] ["0b000"] ["TmP_76"],
        _mux 8 "I_PFAD.v:674" ["TmP_238[7:0]"] ["SRC1[7:0]"] ["sh_exin[7:0]"] ["exin_op2"],
        _mux 8 "I_PFAD.v:674" ["sh_count[7:0]"] ["TmP_238[7:0]"] ["0b11110000"] ["TmP_77"],
        _mux 7 "I_PFAD.v:676" ["BMCODE[6:0]"] ["0b00", "shcode[4:0]"] ["TmP_134", "TmP_133", "selbits[4:0]"] ["TmP_132"],
        _mux 32 "I_PFAD.v:696" ["TmP_239[31:0]"] ["SRC1[31:0]"] ["addsub_q[31:0]"] ["bwd_daten1[31]"],
        _mux 32 "I_PFAD.v:743" ["movxz_dat[31:0]"] ["bwd_daten1[31:0]"] ["and_src1[23:0]", "SRC1[7:0]"] ["TmP_250"],
        _mux 32 "I_PFAD.v:754" ["ext_sh4[31:0]"] ["SRC2[31:0]"] ["0b0000", "SRC2[31:4]"] ["SRC1[7]"],
        _mux 32 "I_PFAD.v:755" ["ext_sh2[31:0]"] ["ext_sh4[31:0]"] ["0b00", "ext_sh4[31:2]"] ["SRC1[6]"],
        _mux 32 "I_PFAD.v:759" ["TmP_240[31:0]"] ["ext_sh2[31:0]"] ["0b0", "ext_sh2[31:1]"] ["SRC1[5]"],
        _mux 5 "I_PFAD.v:762" ["TmP_241[4:0]"] ["0b0000", "sc_bit"] ["kurz_anz[4:0]"] ["DETOIP[3]"],
        _mux 16 "I_PFAD.v:778" ["low_bou[15:0]"] ["SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15:8]"] ["SRC1[31:16]"] ["BWD[0]"],
        _mux 16 "I_PFAD.v:779" ["upp_bou[15:0]"] ["SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7:0]"] ["SRC1[15:0]"] ["BWD[0]"],
        _mux 16 "I_PFAD.v:780" ["zeiger[15:0]"] ["SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7:0]"] ["SRC2[15:0]"] ["BWD[0]"],
        _mux 1 "I_PFAD.v:785" ["flag_up"] ["upp_bou[15]"] ["chk_upp[15]"] ["TmP_78"],
        _mux 1 "I_PFAD.v:786" ["flag_lo"] ["zeiger[15]"] ["chk_low[15]"] ["TmP_79"],
        _mux 1 "I_PFAD.v:790" ["TmP_242"] ["nl_int[1]"] ["TmP_139"] ["chk_p1"],
        _mux 1 "I_PFAD.v:790" ["chk_flag"] ["TmP_140"] ["TmP_242"] ["BWD[1]"],
        _mux 32 "I_PFAD.v:796" ["TmP_243[31:0]"] ["0b11111111111111111111111111111111"] ["SRC2[31:0]"] ["extract"],
        _mux 32 "I_PFAD.v:798" ["TmP_244[31:0]"] ["0b0000000000000000", "chk_low[15:0]"] ["addsub_q[31:0]"] ["BWD[1]"],
        _mux 1 "I_PFAD.v:806" ["TmP_245"] ["TmP_251"] ["0b0"] ["TmP_81"],
        _mux 32 "I_PFAD.v:807" ["pfad_11[31:0]"] ["DP_OUT[31:0]"] ["TmP_245", "SRC1[30:0]"] ["TmP_80"],
        _xor 1 "I_PFAD.v:471" ["TmP_246"] ["ACB_ZERO"] ["DETOIP[9]"] ,
        _xor 32 "I_PFAD.v:574" ["TmP_247[31:0]"] ["SRC2[31:0]"] ["SRC1[31:0]"] ,
        _xor 5 "I_PFAD.v:670" ["TmP_248[4:0]"] ["extract", "extract", "extract", "extract", "extract"] ["shval_ei[4:0]"] ,
        _xor 32 "I_PFAD.v:698" ["TmP_249[31:0]"] ["SRC2[31:0]"] ["BMASKE[31:0]"] ,
        _xor 1 "I_PFAD.v:743" ["TmP_250"] ["OPCODE[1]"] ["OPCODE[0]"] ,
        _xor 1 "I_PFAD.v:806" ["TmP_251"] ["SRC1[31]"] ["OPCODE[2]"] ,
        SCHALE [("instance", "addsub_ipfad"), ("src", "I_PFAD.v:559")] [
                ("add_sub",["add_flag"]),
                ("bwd[1:0]",["BWD[1:0]"]),
                ("cin",["cy_in"]),
                ("cout",["cy_out"]),
                ("dataa[31:0]",["bwd_daten2[31:0]"]),
                ("datab[31:0]",["bwd_daten1[31:0]"]),
                ("overflow",["over_flow"]),
                ("result[31:0]",["addsub_q[31:0]"])],
        FFS_LOGIK [("instance", "ffs_unit"), ("src", "I_PFAD.v:775")] [
                ("BWD[1:0]",["BWD[1:0]"]),
                ("DOUT[4:0]",["ffs_out[4:0]"]),
                ("FLAG",["ffs_flag"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[4:0]",["SRC2[4:0]"])],
        SHIFTER [("instance", "shift_inst"), ("src", "I_PFAD.v:678")] [
                ("ASH",["ash"]),
                ("LSH",["lsh"]),
                ("MASKE[31:0]",["BMASKE[31:0]"]),
                ("MASK_SEL[4:0]",["shcode[4:0]"]),
                ("ROT",["rot"]),
                ("SH_DAT[31:0]",["SRC2[31:0]"]),
                ("SH_OUT[31:0]",["shdat[31:0]"]),
                ("SH_VAL[7:0]",["sh_count[7:0]"]),
                ("SIZE[1:0]",["BWD[1:0]"])],
        _buf 12 "I_PFAD.v:363" ["PSR[11:0]"] ["psr_high[3:0]", "psr_low[7:0]"],
        _buf 3 "" ["STRING[4:2]"] ["0b0", "ACB_ZERO", "weiter"],
        _buf 1 "I_PFAD.v:413" ["acb_reg"] ["DETOIP[1]"],
        _buf 1 "I_PFAD.v:414" ["bcd_carry"] ["OVF_BCD[0]"],
        _buf 1 "I_PFAD.v:414" ["bcd_op"] ["OVF_BCD[1]"],
        _buf 1 "I_PFAD.v:413" ["bit_reg"] ["DETOIP[4]"],
        _buf 1 "I_PFAD.v:413" ["cmps_op"] ["DETOIP[11]"],
        _buf 1 "I_PFAD.v:413" ["dw_info"] ["DETOIP[2]"],
        _buf 1 "I_PFAD.v:413" ["exin_cmd"] ["DETOIP[6]"],
        _buf 1 "I_PFAD.v:413" ["inss_op"] ["DETOIP[7]"],
        _buf 1 "I_PFAD.v:413" ["kill_opt"] ["DETOIP[8]"],
        _buf 1 "I_PFAD.v:413" ["kurz_st"] ["DETOIP[3]"],
        _buf 1 "I_PFAD.v:413" ["ph_match"] ["DETOIP[10]"],
        _buf 1 "I_PFAD.v:707" ["sc_carry_psr"] ["psr_low[0]"],
        _buf 1 "I_PFAD.v:707" ["sc_flag"] ["psr_low[5]"],
        _buf 1 "I_PFAD.v:707" ["sc_larger"] ["psr_low[2]"],
        _buf 1 "I_PFAD.v:707" ["sc_negativ"] ["psr_low[7]"],
        _buf 1 "I_PFAD.v:707" ["sc_zero"] ["psr_low[6]"],
        _buf 1 "I_PFAD.v:413" ["t2p"] ["DETOIP[0]"],
        _buf 1 "I_PFAD.v:413" ["until"] ["DETOIP[9]"]
    ] in
    PINST "draw_hier I_PFAD" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let KOLDETECT {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "DRAM_WR",
                 "CVALID[23:0]",
                 "ADDR[24:0]",
                 "TAG0[16:0]",
                 "TAG1[16:0]",
                 "CFG[1:0]",
                 "C_VALID[23:0]",
                 "READ_I",
                 "ACC_OK",
                 "HOLD",
                 "KDET",
                 "INVAL_A",
                 "ENA_HK" ] in
    let outs = [ "NEWCVAL[23:0]",
                 "KOLLISION",
                 "STOP_ICRD",
                 "RUN_ICRD",
                 "KILL",
                 "KILLADR[4:0]",
                 "ICTODC[2:0]",
                 "STOP_CINV" ] in
    let ints = md_extract_vectors [ "TmP_0[35:0]",
                 "TmP_1[2:0]",
                 "TmP_10[1:0]",
                 "TmP_11[1:0]",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15[7:0]",
                 "TmP_16[7:0]",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5[1:0]",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6[1:0]",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63[2:0]",
                 "TmP_64[2:0]",
                 "TmP_7[1:0]",
                 "TmP_8[1:0]",
                 "TmP_9[1:0]",
                 "addr_r[24:0]",
                 "adrfifo[35:0]",
                 "cdaten[23:0]",
                 "clear[7:0]",
                 "counter[2:0]",
                 "dma",
                 "dma_kolli",
                 "dma_mode",
                 "do_kill",
                 "do_koll",
                 "ende",
                 "fifo_c[8:0]",
                 "fifo_q[8:0]",
                 "found_0",
                 "found_1",
                 "free",
                 "ic_dma",
                 "init_b",
                 "kaddr[8:0]",
                 "kolli",
                 "last_match",
                 "match_0",
                 "match_1",
                 "new_0[7:0]",
                 "new_1[7:0]",
                 "pipe",
                 "rpointer[1:0]",
                 "set_0[7:0]",
                 "set_1[7:0]",
                 "state[1:0]",
                 "valid_0",
                 "valid_1",
                 "wpointer[1:0]",
                 "wr_entry" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _not 1 "ICACHE_SM.v:122" ["TmP_31"] ["CFG[1]"],
        _not 1 "ICACHE_SM.v:125" ["TmP_32"] ["INVAL_A"],
        _not 1 "ICACHE_SM.v:165" ["TmP_33"] ["last_match"],
        _not 1 "ICACHE_SM.v:179" ["TmP_2"] ["HOLD"],
        _not 1 "ICACHE_SM.v:183" ["TmP_34"] ["READ_I"],
        _not 1 "ICACHE_SM.v:205" ["TmP_35"] ["ENA_HK"],
        _not 1 "ICACHE_SM.v:213" ["RUN_ICRD"] ["TmP_40"],
        _not 1 "ICACHE_SM.v:215" ["TmP_36"] ["state[0]"],
        _not 1 "ICACHE_SM.v:215" ["TmP_37"] ["do_kill"],
        _not 1 "ICACHE_SM.v:244" ["ICTODC[0]"] ["TmP_26"],
        _or 1 "ICACHE_SM.v:122" ["TmP_38"] ["found_0"] ["found_1"] ,
        _or 1 "ICACHE_SM.v:183" ["TmP_39"] ["TmP_34"] ["ACC_OK"] ,
        _or 1 "ICACHE_SM.v:213" ["TmP_40"] ["state[1]"] ["pipe"] ,
        _or 1 "ICACHE_SM.v:217" ["KILL"] ["do_kill"] ["TmP_14"] ,
        _dff 1 "ICACHE_SM.v:215" ["do_kill"] ["BCLK"] ["TmP_3"],
        _dff 1 "ICACHE_SM.v:211" ["pipe"] ["BCLK"] ["state[1]"],
        _dff 2 "ICACHE_SM.v:185" ["state[1:0]"] ["BCLK"] ["TmP_6[1:0]"],
        _dff 1 "ICACHE_SM.v:179" ["dma"] ["BCLK"] ["TmP_2"],
        _dff 3 "ICACHE_SM.v:167" ["counter[2:0]"] ["BCLK"] ["TmP_1[2:0]"],
        _dff 36 "ICACHE_SM.v:137" ["adrfifo[35:0]"] ["BCLK"] ["TmP_0[35:0]"],
        _dff 2 "ICACHE_SM.v:132" ["rpointer[1:0]"] ["BCLK"] ["TmP_5[1:0]"],
        _dff 2 "ICACHE_SM.v:127" ["wpointer[1:0]"] ["BCLK"] ["TmP_7[1:0]"],
        _dff 25 "ICACHE_SM.v:102" ["addr_r[24:0]"] ["BCLK"] ["ADDR[24:0]"],
        _dff 1 "ICACHE_SM.v:101" ["do_koll"] ["BCLK"] ["TmP_4"],
        _pmux 8 8 "ICACHE_SM.v:235|ICACHE_SM.v:227" ["clear[7:0]"] ["0bxxxxxxxx"] ["0b1111111011111101111110111111011111101111110111111011111101111111"] ["TmP_48", "TmP_47", "TmP_46", "TmP_45", "TmP_44", "TmP_43", "TmP_42", "TmP_41"],
        _eq 3 "ICACHE_SM.v:235|ICACHE_SM.v:227" ["TmP_41"] ["kaddr[3:1]"] ["0b111"] ,
        _eq 3 "ICACHE_SM.v:234|ICACHE_SM.v:227" ["TmP_42"] ["kaddr[3:1]"] ["0b110"] ,
        _eq 3 "ICACHE_SM.v:233|ICACHE_SM.v:227" ["TmP_43"] ["kaddr[3:1]"] ["0b101"] ,
        _eq 3 "ICACHE_SM.v:232|ICACHE_SM.v:227" ["TmP_44"] ["kaddr[3:1]"] ["0b100"] ,
        _eq 3 "ICACHE_SM.v:231|ICACHE_SM.v:227" ["TmP_45"] ["kaddr[3:1]"] ["0b011"] ,
        _eq 3 "ICACHE_SM.v:230|ICACHE_SM.v:227" ["TmP_46"] ["kaddr[3:1]"] ["0b010"] ,
        _eq 3 "ICACHE_SM.v:229|ICACHE_SM.v:227" ["TmP_47"] ["kaddr[3:1]"] ["0b001"] ,
        _logic_not 3 "ICACHE_SM.v:228|ICACHE_SM.v:227" ["TmP_48"] ["kaddr[3:1]"],
        _pmux 2 2 "ICACHE_SM.v:198|ICACHE_SM.v:186" ["TmP_6[1:0]"] ["0b00"] ["0b1011"] ["TmP_18", "TmP_17"],
        _eq 4 "ICACHE_SM.v:198|ICACHE_SM.v:186" ["TmP_49"] ["BRESET", "dma", "state[1:0]"] ["0b1111"] ,
        _eq 5 "ICACHE_SM.v:197|ICACHE_SM.v:186" ["TmP_50"] ["BRESET", "dma", "counter[2]", "state[1:0]"] ["0b10111"] ,
        _eq 5 "ICACHE_SM.v:194|ICACHE_SM.v:186" ["TmP_51"] ["BRESET", "dma", "ende", "state[1:0]"] ["0b11110"] ,
        _eq 4 "ICACHE_SM.v:192|ICACHE_SM.v:186" ["TmP_52"] ["BRESET", "ende", "state[1:0]"] ["0b1010"] ,
        _eq 5 "ICACHE_SM.v:190|ICACHE_SM.v:186" ["TmP_53"] ["BRESET", "dma", "free", "state[1:0]"] ["0b11100"] ,
        _eq 6 "ICACHE_SM.v:189|ICACHE_SM.v:186" ["TmP_54"] ["BRESET", "dma", "counter[2]", "free", "state[1:0]"] ["0b101100"] ,
        _pmux 3 4 "ICACHE_SM.v:174|ICACHE_SM.v:168" ["TmP_1[2:0]"] ["counter[2:0]"] ["0b000100", "TmP_63[2:0]", "TmP_64[2:0]"] ["TmP_58", "TmP_57", "TmP_56", "TmP_55"],
        _eq 4 "ICACHE_SM.v:174|ICACHE_SM.v:168" ["TmP_55"] ["init_b", "wr_entry", "do_kill", "counter[2]"] ["0b1011"] ,
        _eq 4 "ICACHE_SM.v:173|ICACHE_SM.v:168" ["TmP_56"] ["init_b", "wr_entry", "do_kill", "counter[2]"] ["0b1101"] ,
        _eq 6 "ICACHE_SM.v:172|ICACHE_SM.v:168" ["TmP_57"] ["init_b", "wr_entry", "do_kill", "counter[2:0]"] ["0b110000"] ,
        _not 1 "ICACHE_SM.v:169|ICACHE_SM.v:168" ["TmP_58"] ["init_b"],
        _pmux 9 4 "ICACHE_SM.v:158|ICACHE_SM.v:154" ["fifo_c[8:0]"] ["0bxxxxxxxxx"] ["adrfifo[8:0]", "adrfifo[17:9]", "adrfifo[26:18]", "adrfifo[35:27]"] ["TmP_20", "TmP_21", "TmP_22", "TmP_19"],
        _logic_not 2 "ICACHE_SM.v:158|ICACHE_SM.v:154" ["TmP_19"] ["wpointer[1:0]"],
        _eq 2 "ICACHE_SM.v:157|ICACHE_SM.v:154" ["TmP_22"] ["wpointer[1:0]"] ["0b11"] ,
        _eq 2 "ICACHE_SM.v:156|ICACHE_SM.v:154" ["TmP_21"] ["wpointer[1:0]"] ["0b10"] ,
        _eq 2 "ICACHE_SM.v:155|ICACHE_SM.v:154" ["TmP_20"] ["wpointer[1:0]"] ["0b01"] ,
        _pmux 9 4 "ICACHE_SM.v:150|ICACHE_SM.v:146" ["fifo_q[8:0]"] ["0bxxxxxxxxx"] ["adrfifo[8:0]", "adrfifo[17:9]", "adrfifo[26:18]", "adrfifo[35:27]"] ["TmP_62", "TmP_61", "TmP_60", "TmP_59"],
        _eq 2 "ICACHE_SM.v:150|ICACHE_SM.v:146" ["TmP_59"] ["rpointer[1:0]"] ["0b11"] ,
        _eq 2 "ICACHE_SM.v:149|ICACHE_SM.v:146" ["TmP_60"] ["rpointer[1:0]"] ["0b10"] ,
        _eq 2 "ICACHE_SM.v:148|ICACHE_SM.v:146" ["TmP_61"] ["rpointer[1:0]"] ["0b01"] ,
        _logic_not 2 "ICACHE_SM.v:147|ICACHE_SM.v:146" ["TmP_62"] ["rpointer[1:0]"],
        _mux 9 "ICACHE_SM.v:142" ["TmP_0[35:27]"] ["adrfifo[35:27]"] ["addr_r[7:0]", "found_1"] ["TmP_30"],
        _mux 9 "ICACHE_SM.v:141" ["TmP_0[26:18]"] ["adrfifo[26:18]"] ["addr_r[7:0]", "found_1"] ["TmP_29"],
        _mux 9 "ICACHE_SM.v:140" ["TmP_0[17:9]"] ["adrfifo[17:9]"] ["addr_r[7:0]", "found_1"] ["TmP_28"],
        _mux 9 "ICACHE_SM.v:139" ["TmP_0[8:0]"] ["adrfifo[8:0]"] ["addr_r[7:0]", "found_1"] ["TmP_27"],
        _mux 2 "ICACHE_SM.v:133" ["TmP_5[1:0]"] ["0b00"] ["TmP_9[1:0]"] ["init_b"],
        _mux 2 "ICACHE_SM.v:128" ["TmP_7[1:0]"] ["0b00"] ["TmP_8[1:0]"] ["init_b"],
        _shr 1 8 3 "ICACHE_SM.v:109" ["valid_0"] ["C_VALID[7:0]"] ["addr_r[2:0]"],
        _shr 1 8 3 "ICACHE_SM.v:110" ["valid_1"] ["C_VALID[15:8]"] ["addr_r[2:0]"],
        _mux 3 "ICACHE_SM.v:173" ["TmP_63[2:0]"] ["counter[2]", "TmP_10[1:0]"] ["0b111"] ["TmP_24"],
        _mux 3 "ICACHE_SM.v:174" ["TmP_64[2:0]"] ["counter[2]", "TmP_11[1:0]"] ["0b000"] ["TmP_25"],
        _mux 24 "ICACHE_SM.v:221" ["cdaten[23:0]"] ["CVALID[23:0]"] ["C_VALID[23:0]"] ["state[0]"],
        _mux 9 "ICACHE_SM.v:222" ["kaddr[8:0]"] ["fifo_q[8:0]"] ["addr_r[7:0]", "found_1"] ["state[0]"],
        _mux 8 "ICACHE_SM.v:238" ["new_0[7:0]"] ["TmP_15[7:0]"] ["cdaten[7:0]"] ["kaddr[0]"],
        _mux 8 "ICACHE_SM.v:239" ["new_1[7:0]"] ["cdaten[15:8]"] ["TmP_16[7:0]"] ["kaddr[0]"],
        _add 2 "ICACHE_SM.v:130" ["TmP_8[1:0]"] ["wpointer[1:0]"] ["0b0", "wr_entry"] ,
        _add 2 "ICACHE_SM.v:135" ["TmP_9[1:0]"] ["rpointer[1:0]"] ["0b0", "do_kill"] ,
        _add 2 "ICACHE_SM.v:173" ["TmP_10[1:0]"] ["counter[1:0]"] ["0b01"] ,
        _add 2 "ICACHE_SM.v:174" ["TmP_11[1:0]"] ["counter[1:0]"] ["0b11"] ,
        _and 1 "ICACHE_SM.v:101" ["TmP_4"] ["DRAM_WR"] ["CFG[0]"] ,
        _and 1 "ICACHE_SM.v:115" ["found_0"] ["valid_0"] ["match_0"] ,
        _and 1 "ICACHE_SM.v:116" ["found_1"] ["valid_1"] ["match_1"] ,
        _and 1 "ICACHE_SM.v:118" ["kolli"] ["TmP_12"] ["do_koll"] ,
        _and 1 "ICACHE_SM.v:120" ["KOLLISION"] ["TmP_38"] ["do_koll"] ,
        _and 1 "ICACHE_SM.v:122" ["TmP_12"] ["TmP_38"] ["TmP_31"] ,
        _and 1 "ICACHE_SM.v:122" ["dma_kolli"] ["TmP_12"] ["CFG[0]"] ,
        _and 1 "ICACHE_SM.v:125" ["init_b"] ["CFG[0]"] ["TmP_32"] ,
        _and 1 "ICACHE_SM.v:163" ["last_match"] ["counter[2]"] ["TmP_23"] ,
        _and 1 "ICACHE_SM.v:165" ["wr_entry"] ["kolli"] ["TmP_33"] ,
        _and 1 "ICACHE_SM.v:183" ["free"] ["TmP_39"] ["ENA_HK"] ,
        _and 1 "ICACHE_SM.v:205" ["STOP_CINV"] ["state[1]"] ["TmP_35"] ,
        _and 1 "ICACHE_SM.v:207" ["ende"] ["TmP_25"] ["do_kill"] ,
        _and 1 "ICACHE_SM.v:209" ["ic_dma"] ["state[1]"] ["state[0]"] ,
        _and 1 "ICACHE_SM.v:215" ["TmP_13"] ["state[1]"] ["TmP_36"] ,
        _and 1 "ICACHE_SM.v:215" ["TmP_3"] ["TmP_13"] ["TmP_37"] ,
        _and 1 "ICACHE_SM.v:217" ["TmP_14"] ["KDET"] ["dma_kolli"] ,
        _and 8 "ICACHE_SM.v:238" ["TmP_15[7:0]"] ["cdaten[7:0]"] ["clear[7:0]"] ,
        _and 8 "ICACHE_SM.v:239" ["TmP_16[7:0]"] ["cdaten[15:8]"] ["clear[7:0]"] ,
        _logic_reduce_or 3 "" ["TmP_17"] ["TmP_53", "TmP_51", "TmP_49"],
        _logic_reduce_or 3 "" ["TmP_18"] ["TmP_54", "TmP_52", "TmP_50"],
        _eq 17 "ICACHE_SM.v:112" ["match_0"] ["TAG0[16:0]"] ["addr_r[24:8]"] ,
        _eq 17 "ICACHE_SM.v:113" ["match_1"] ["TAG1[16:0]"] ["addr_r[24:8]"] ,
        _eq 9 "ICACHE_SM.v:163" ["TmP_23"] ["fifo_c[8:0]"] ["addr_r[7:0]", "found_1"] ,
        _eq 2 "ICACHE_SM.v:173" ["TmP_24"] ["counter[1:0]"] ["0b11"] ,
        _logic_not 2 "ICACHE_SM.v:207" ["TmP_25"] ["counter[1:0]"],
        _eq 2 "ICACHE_SM.v:244" ["TmP_26"] ["counter[2:1]"] ["0b11"] ,
        _land 1 "ICACHE_SM.v:139" ["TmP_27"] ["wr_entry"] ["TmP_19"],
        _land 1 "ICACHE_SM.v:140" ["TmP_28"] ["wr_entry"] ["TmP_20"],
        _land 1 "ICACHE_SM.v:141" ["TmP_29"] ["wr_entry"] ["TmP_21"],
        _land 1 "ICACHE_SM.v:142" ["TmP_30"] ["wr_entry"] ["TmP_22"],
        _buf 2 "" ["ICTODC[2:1]"] ["dma", "ic_dma"],
        _buf 5 "ICACHE_SM.v:71" ["KILLADR[4:0]"] ["kaddr[8:4]"],
        _buf 24 "ICACHE_SM.v:66" ["NEWCVAL[23:0]"] ["cdaten[23:16]", "new_1[7:0]", "new_0[7:0]"],
        _buf 1 "ICACHE_SM.v:68" ["STOP_ICRD"] ["state[1]"],
        _buf 1 "ICACHE_SM.v:97" ["dma_mode"] ["state[0]"],
        _buf 8 "ICACHE_SM.v:87" ["set_0[7:0]"] ["C_VALID[7:0]"],
        _buf 8 "ICACHE_SM.v:87" ["set_1[7:0]"] ["C_VALID[15:8]"]
    ] in
    PINST "draw_hier KOLDETECT" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let MAKE_STAT {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "READ",
                 "DACC_OK",
                 "DC_ACC",
                 "DPTE_ACC",
                 "DC_MDONE",
                 "DRAM_WR",
                 "IC_READ",
                 "IACC_OK",
                 "DATA_HOLD",
                 "IC_ACC",
                 "IPTE_ACC",
                 "IC_MDONE",
                 "KOLLISION" ] in
    let outs = [ "STATSIGS[7:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[7:0]",
                 "TmP_1",
                 "TmP_2" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "TOP_MISC.v:156" ["TmP_0[5]"] ["IC_ACC"] ["IC_MDONE"] ,
        _and 1 "TOP_MISC.v:157" ["TmP_1"] ["IC_READ"] ["IACC_OK"] ,
        _and 1 "TOP_MISC.v:157" ["TmP_0[4]"] ["TmP_1"] ["TmP_2"] ,
        _and 1 "TOP_MISC.v:160" ["TmP_0[1]"] ["DC_ACC"] ["DC_MDONE"] ,
        _and 1 "TOP_MISC.v:161" ["TmP_0[0]"] ["READ"] ["DACC_OK"] ,
        _not 1 "TOP_MISC.v:157" ["TmP_2"] ["DATA_HOLD"],
        _dff 8 "TOP_MISC.v:152" ["STATSIGS[7:0]"] ["BCLK"] ["KOLLISION", "IPTE_ACC", "TmP_0[5:4]", "DRAM_WR", "DPTE_ACC", "TmP_0[1:0]"],
        _buf 4 "" ["TmP_0[7:6]", "TmP_0[3:2]"] ["KOLLISION", "IPTE_ACC", "DRAM_WR", "DPTE_ACC"]
    ] in
    PINST "draw_hier MAKE_STAT" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let MMU_MATCH {attrs::(string#string) list} conns =
    let inps = [ "USER",
                 "READ",
                 "WRITE",
                 "RMW",
                 "MCR_FLAGS[2:0]",
                 "MVALID[31:0]",
                 "VADR_R[19:0]",
                 "MMU_VA[15:0]",
                 "IVAR[1:0]" ] in
    let outs = [ "VIRTUELL",
                 "MMU_HIT",
                 "UPDATE[31:0]",
                 "PROT_ERROR",
                 "CI",
                 "SEL_PTB1" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1[15:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14[15:0]",
                 "TmP_15",
                 "TmP_16[15:0]",
                 "TmP_17[15:0]",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3[15:0]",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41[15:0]",
                 "TmP_42[15:0]",
                 "TmP_5[15:0]",
                 "TmP_6[15:0]",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "adr_space",
                 "alles_ok",
                 "as_bits[15:0]",
                 "as_sorte",
                 "ena_prot",
                 "maske[15:0]",
                 "match",
                 "val_bits[15:0]",
                 "zugriff" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "CACHE_LOGIK.v:348" ["TmP_0"] ["MCR_FLAGS[2]"] ["USER"] ,
        _and 16 "CACHE_LOGIK.v:350" ["TmP_1[15:0]"] ["MVALID[31:16]"] ["maske[15:0]"] ,
        _and 1 "CACHE_LOGIK.v:352" ["TmP_2"] ["TmP_9"] ["TmP_10"] ,
        _and 16 "CACHE_LOGIK.v:352" ["TmP_3[15:0]"] ["MVALID[15:0]"] ["maske[15:0]"] ,
        _and 1 "CACHE_LOGIK.v:352" ["match"] ["TmP_2"] ["TmP_11"] ,
        _and 1 "CACHE_LOGIK.v:354" ["TmP_4"] ["match"] ["TmP_15"] ,
        _and 1 "CACHE_LOGIK.v:354" ["alles_ok"] ["TmP_4"] ["TmP_13"] ,
        _and 16 "CACHE_LOGIK.v:359" ["TmP_5[15:0]"] ["MVALID[15:0]"] ["TmP_41[15:0]"] ,
        _and 16 "CACHE_LOGIK.v:360" ["TmP_6[15:0]"] ["MVALID[31:16]"] ["TmP_14[15:0]"] ,
        _and 1 "CACHE_LOGIK.v:364" ["TmP_7"] ["zugriff"] ["VIRTUELL"] ,
        _and 1 "CACHE_LOGIK.v:364" ["ena_prot"] ["TmP_7"] ["match"] ,
        _and 1 "CACHE_LOGIK.v:371" ["TmP_8"] ["USER"] ["TmP_20"] ,
        _and 1 "CACHE_LOGIK.v:375" ["CI"] ["VIRTUELL"] ["MMU_VA[0]"] ,
        _eq 12 "CACHE_LOGIK.v:352" ["TmP_9"] ["VADR_R[19:8]"] ["MMU_VA[15:4]"] ,
        _eq 1 "CACHE_LOGIK.v:352" ["TmP_10"] ["adr_space"] ["as_sorte"] ,
        _logic_reduce_bool 16 "CACHE_LOGIK.v:350" ["as_sorte"] ["TmP_1[15:0]"],
        _logic_reduce_bool 16 "CACHE_LOGIK.v:352" ["TmP_11"] ["TmP_3[15:0]"],
        _not 1 "CACHE_LOGIK.v:354" ["TmP_12"] ["WRITE"],
        _not 1 "CACHE_LOGIK.v:354" ["TmP_13"] ["PROT_ERROR"],
        _not 16 "CACHE_LOGIK.v:360" ["TmP_14[15:0]"] ["maske[15:0]"],
        _or 1 "CACHE_LOGIK.v:324" ["zugriff"] ["READ"] ["WRITE"] ,
        _or 1 "CACHE_LOGIK.v:354" ["TmP_15"] ["TmP_12"] ["MMU_VA[1]"] ,
        _or 16 "CACHE_LOGIK.v:359" ["TmP_16[15:0]"] ["MVALID[15:0]"] ["maske[15:0]"] ,
        _or 16 "CACHE_LOGIK.v:360" ["TmP_17[15:0]"] ["MVALID[31:16]"] ["maske[15:0]"] ,
        _or 1 "CACHE_LOGIK.v:369" ["TmP_18"] ["USER"] ["WRITE"] ,
        _or 1 "CACHE_LOGIK.v:369" ["TmP_19"] ["TmP_18"] ["RMW"] ,
        _or 1 "CACHE_LOGIK.v:371" ["TmP_20"] ["WRITE"] ["RMW"] ,
        _pmux 1 3 "CACHE_LOGIK.v:371|CACHE_LOGIK.v:368" ["PROT_ERROR"] ["0b0"] ["TmP_19", "USER", "TmP_8"] ["TmP_23", "TmP_22", "TmP_21"],
        _eq 3 "CACHE_LOGIK.v:371|CACHE_LOGIK.v:368" ["TmP_21"] ["ena_prot", "MMU_VA[3:2]"] ["0b110"] ,
        _eq 3 "CACHE_LOGIK.v:370|CACHE_LOGIK.v:368" ["TmP_22"] ["ena_prot", "MMU_VA[3:2]"] ["0b101"] ,
        _eq 3 "CACHE_LOGIK.v:369|CACHE_LOGIK.v:368" ["TmP_23"] ["ena_prot", "MMU_VA[3:2]"] ["0b100"] ,
        _pmux 16 16 "CACHE_LOGIK.v:343|CACHE_LOGIK.v:327" ["maske[15:0]"] ["0bxxxxxxxxxxxxxxxx"] ["0b0000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000000"] ["TmP_39", "TmP_38", "TmP_37", "TmP_36", "TmP_35", "TmP_34", "TmP_33", "TmP_32", "TmP_31", "TmP_30", "TmP_29", "TmP_28", "TmP_27", "TmP_26", "TmP_25", "TmP_24"],
        _eq 4 "CACHE_LOGIK.v:343|CACHE_LOGIK.v:327" ["TmP_24"] ["VADR_R[3:0]"] ["0b1111"] ,
        _eq 4 "CACHE_LOGIK.v:342|CACHE_LOGIK.v:327" ["TmP_25"] ["VADR_R[3:0]"] ["0b1110"] ,
        _eq 4 "CACHE_LOGIK.v:341|CACHE_LOGIK.v:327" ["TmP_26"] ["VADR_R[3:0]"] ["0b1101"] ,
        _eq 4 "CACHE_LOGIK.v:340|CACHE_LOGIK.v:327" ["TmP_27"] ["VADR_R[3:0]"] ["0b1100"] ,
        _eq 4 "CACHE_LOGIK.v:339|CACHE_LOGIK.v:327" ["TmP_28"] ["VADR_R[3:0]"] ["0b1011"] ,
        _eq 4 "CACHE_LOGIK.v:338|CACHE_LOGIK.v:327" ["TmP_29"] ["VADR_R[3:0]"] ["0b1010"] ,
        _eq 4 "CACHE_LOGIK.v:337|CACHE_LOGIK.v:327" ["TmP_30"] ["VADR_R[3:0]"] ["0b1001"] ,
        _eq 4 "CACHE_LOGIK.v:336|CACHE_LOGIK.v:327" ["TmP_31"] ["VADR_R[3:0]"] ["0b1000"] ,
        _eq 4 "CACHE_LOGIK.v:335|CACHE_LOGIK.v:327" ["TmP_32"] ["VADR_R[3:0]"] ["0b0111"] ,
        _eq 4 "CACHE_LOGIK.v:334|CACHE_LOGIK.v:327" ["TmP_33"] ["VADR_R[3:0]"] ["0b0110"] ,
        _eq 4 "CACHE_LOGIK.v:333|CACHE_LOGIK.v:327" ["TmP_34"] ["VADR_R[3:0]"] ["0b0101"] ,
        _eq 4 "CACHE_LOGIK.v:332|CACHE_LOGIK.v:327" ["TmP_35"] ["VADR_R[3:0]"] ["0b0100"] ,
        _eq 4 "CACHE_LOGIK.v:331|CACHE_LOGIK.v:327" ["TmP_36"] ["VADR_R[3:0]"] ["0b0011"] ,
        _eq 4 "CACHE_LOGIK.v:330|CACHE_LOGIK.v:327" ["TmP_37"] ["VADR_R[3:0]"] ["0b0010"] ,
        _eq 4 "CACHE_LOGIK.v:329|CACHE_LOGIK.v:327" ["TmP_38"] ["VADR_R[3:0]"] ["0b0001"] ,
        _logic_not 4 "CACHE_LOGIK.v:328|CACHE_LOGIK.v:327" ["TmP_39"] ["VADR_R[3:0]"],
        _mux 1 "CACHE_LOGIK.v:346" ["VIRTUELL"] ["MCR_FLAGS[1]"] ["MCR_FLAGS[0]"] ["USER"],
        _mux 1 "CACHE_LOGIK.v:348" ["adr_space"] ["TmP_0"] ["IVAR[0]"] ["IVAR[1]"],
        _mux 1 "CACHE_LOGIK.v:357" ["TmP_40"] ["0b1"] ["alles_ok"] ["VIRTUELL"],
        _mux 1 "CACHE_LOGIK.v:357" ["MMU_HIT"] ["0b0"] ["TmP_40"] ["zugriff"],
        _mux 16 "CACHE_LOGIK.v:359" ["TmP_41[15:0]"] ["0b1111111111111111"] ["TmP_14[15:0]"] ["match"],
        _mux 16 "CACHE_LOGIK.v:359" ["val_bits[15:0]"] ["TmP_16[15:0]"] ["TmP_5[15:0]"] ["IVAR[1]"],
        _mux 16 "CACHE_LOGIK.v:360" ["TmP_42[15:0]"] ["TmP_6[15:0]"] ["TmP_17[15:0]"] ["adr_space"],
        _mux 16 "CACHE_LOGIK.v:360" ["as_bits[15:0]"] ["TmP_42[15:0]"] ["MVALID[31:16]"] ["IVAR[1]"],
        _buf 1 "CACHE_LOGIK.v:315" ["SEL_PTB1"] ["adr_space"],
        _buf 32 "CACHE_LOGIK.v:313" ["UPDATE[31:0]"] ["as_bits[15:0]", "val_bits[15:0]"]
    ] in
    PINST "draw_hier MMU_MATCH" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let MMU_UP {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "NEW_PTB",
                 "PTB1",
                 "IVAR",
                 "WR_MRAM",
                 "VADR[3:0]",
                 "VADR_R[3:0]",
                 "MVALID[31:0]",
                 "UPDATE[31:0]" ] in
    let outs = [ "WE_MV",
                 "WADR_MV[3:0]",
                 "RADR_MV[3:0]",
                 "DAT_MV[31:0]",
                 "NEW_PTB_RUN" ] in
    let ints = md_extract_vectors [ "TmP_0[3:0]",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14[3:0]",
                 "TmP_15[15:0]",
                 "TmP_2",
                 "TmP_3[3:0]",
                 "TmP_4[15:0]",
                 "TmP_5[15:0]",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9[15:0]",
                 "count[3:0]",
                 "neue_ptb",
                 "new_val[15:0]",
                 "old_rst",
                 "run_over",
                 "wr_flag" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 4 "CACHE_LOGIK.v:211" ["TmP_3[3:0]"] ["count[3:0]"] ["0b0001"] ,
        _and 16 "CACHE_LOGIK.v:201" ["TmP_4[15:0]"] ["MVALID[15:0]"] ["TmP_9[15:0]"] ,
        _and 16 "CACHE_LOGIK.v:201" ["TmP_5[15:0]"] ["MVALID[15:0]"] ["MVALID[31:16]"] ,
        _and 1 "CACHE_LOGIK.v:205" ["TmP_6"] ["neue_ptb"] ["run_over"] ,
        _and 1 "CACHE_LOGIK.v:209" ["TmP_7"] ["run_over"] ["TmP_8"] ,
        _and 1 "CACHE_LOGIK.v:209" ["TmP_2"] ["TmP_13"] ["BRESET"] ,
        _ne 4 "CACHE_LOGIK.v:209" ["TmP_8"] ["count[3:0]"] ["0b1111"] ,
        _not 16 "CACHE_LOGIK.v:201" ["TmP_9[15:0]"] ["MVALID[31:16]"],
        _not 1 "CACHE_LOGIK.v:209" ["TmP_10"] ["old_rst"],
        _or 1 "CACHE_LOGIK.v:195" ["TmP_11"] ["wr_flag"] ["WR_MRAM"] ,
        _or 1 "CACHE_LOGIK.v:195" ["WE_MV"] ["TmP_11"] ["IVAR"] ,
        _or 1 "CACHE_LOGIK.v:205" ["TmP_1"] ["NEW_PTB"] ["TmP_6"] ,
        _or 1 "CACHE_LOGIK.v:209" ["TmP_12"] ["TmP_10"] ["NEW_PTB"] ,
        _or 1 "CACHE_LOGIK.v:209" ["TmP_13"] ["TmP_12"] ["TmP_7"] ,
        _dff 1 "CACHE_LOGIK.v:213" ["wr_flag"] ["BCLK"] ["run_over"],
        _dff 4 "CACHE_LOGIK.v:211" ["count[3:0]"] ["BCLK"] ["TmP_0[3:0]"],
        _dff 1 "CACHE_LOGIK.v:209" ["run_over"] ["BCLK"] ["TmP_2"],
        _dff 1 "CACHE_LOGIK.v:207" ["old_rst"] ["BCLK"] ["BRESET"],
        _adff 1 "CACHE_LOGIK.v:203" ["neue_ptb"] ["BRESET"] ["BCLK"] ["TmP_1"],
        _sub 4 "CACHE_LOGIK.v:197" ["TmP_14[3:0]"] ["count[3:0]"] ["0b0001"] ,
        _mux 4 "CACHE_LOGIK.v:196" ["RADR_MV[3:0]"] ["VADR[3:0]"] ["count[3:0]"] ["run_over"],
        _mux 4 "CACHE_LOGIK.v:197" ["WADR_MV[3:0]"] ["VADR_R[3:0]"] ["TmP_14[3:0]"] ["wr_flag"],
        _mux 32 "CACHE_LOGIK.v:198" ["DAT_MV[31:0]"] ["UPDATE[31:0]"] ["MVALID[31:16]", "new_val[15:0]"] ["wr_flag"],
        _mux 16 "CACHE_LOGIK.v:201" ["TmP_15[15:0]"] ["TmP_5[15:0]"] ["TmP_4[15:0]"] ["PTB1"],
        _mux 16 "CACHE_LOGIK.v:201" ["new_val[15:0]"] ["0b0000000000000000"] ["TmP_15[15:0]"] ["neue_ptb"],
        _mux 4 "CACHE_LOGIK.v:211" ["TmP_0[3:0]"] ["0b0000"] ["TmP_3[3:0]"] ["run_over"],
        _buf 1 "CACHE_LOGIK.v:188" ["NEW_PTB_RUN"] ["wr_flag"]
    ] in
    PINST "draw_hier MMU_UP" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let MULFILTER {attrs::(string#string) list} conns =
    let inps = [ "BWD[1:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]" ] in
    let outs = [ "MRESULT[32:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3[7:0]",
                 "TmP_4[7:0]",
                 "TmP_5",
                 "muld[63:0]",
                 "mulw[31:0]",
                 "no_ovf" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _mul 32 "I_PFAD.v:129" ["mulw[31:0]"] ["0b0000000000000000", "TmP_3[7:0]", "SRC1[7:0]"] ["0b0000000000000000", "TmP_4[7:0]", "SRC2[7:0]"] ,
        _not 1 "I_PFAD.v:135" ["MRESULT[32]"] ["no_ovf"],
        _mux 8 "I_PFAD.v:129" ["TmP_3[7:0]"] ["SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]"] ["SRC1[15:8]"] ["BWD[0]"],
        _mux 8 "I_PFAD.v:129" ["TmP_4[7:0]"] ["SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]", "SRC2[7]"] ["SRC2[15:8]"] ["BWD[0]"],
        _mux 1 "I_PFAD.v:133" ["TmP_5"] ["TmP_2"] ["TmP_1"] ["BWD[0]"],
        _mux 1 "I_PFAD.v:133" ["no_ovf"] ["TmP_5"] ["TmP_0"] ["BWD[1]"],
        _mux 16 "I_PFAD.v:135" ["MRESULT[15:0]"] ["mulw[15:0]"] ["muld[15:0]"] ["BWD[1]"],
        _eq 32 "I_PFAD.v:131" ["TmP_0"] ["muld[63:32]"] ["muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]", "muld[31]"] ,
        _eq 16 "I_PFAD.v:132" ["TmP_1"] ["mulw[31:16]"] ["mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]", "mulw[15]"] ,
        _eq 8 "I_PFAD.v:133" ["TmP_2"] ["mulw[15:8]"] ["mulw[7]", "mulw[7]", "mulw[7]", "mulw[7]", "mulw[7]", "mulw[7]", "mulw[7]", "mulw[7]"] ,
        _mul 64 "I_PFAD.v:128" ["muld[63:0]"] (_SignExt 64 ["SRC1[31:0]"]) (_SignExt 64 ["SRC2[31:0]"]) ,
        _buf 16 "" ["MRESULT[31:16]"] ["muld[31:16]"]
    ] in
    PINST "draw_hier MULFILTER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let NEU_VALID {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "VALIN[23:0]",
                 "WADR[4:0]",
                 "WREN",
                 "RADR[4:0]" ] in
    let outs = [ "VALOUT[23:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[4:0]",
                 "TmP_1[23:0]",
                 "TmP_2[23:0]",
                 "TmP_3",
                 "TmP_4[23:0]",
                 "TmP_5",
                 "TmP_6[4:0]",
                 "TmP_7[23:0]",
                 "TmP_8[23:0]",
                 "gleich",
                 "ramout[23:0]",
                 "valhold[23:0]",
                "cvalid[31:0][23:0]" ] in
    let cvalid = "cvalid[31:0][23:0]" in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _eq 5 "CACHE_LOGIK.v:115" ["TmP_5"] ["RADR[4:0]"] ["WADR[4:0]"] ,
        _memrd "CACHE_LOGIK.v:111" 24 5 cvalid ["0bx"] ["RADR[4:0]"] ["TmP_4[23:0]"],
        _memwr "CACHE_LOGIK.v:112" 24 5 cvalid ["TmP_8[23:0]"] ["TmP_6[4:0]"] ["TmP_7[23:0]"],
        _dff 1 "CACHE_LOGIK.v:115" ["gleich"] ["BCLK"] ["TmP_3"],
        _dff 24 "CACHE_LOGIK.v:114" ["valhold[23:0]"] ["BCLK"] ["VALIN[23:0]"],
        _dff 5 "CACHE_LOGIK.v:112" ["TmP_6[4:0]"] ["BCLK"] ["TmP_0[4:0]"],
        _dff 24 "CACHE_LOGIK.v:112" ["TmP_7[23:0]"] ["BCLK"] ["TmP_1[23:0]"],
        _dff 24 "CACHE_LOGIK.v:112" ["TmP_8[23:0]"] ["BCLK"] ["TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]"],
        _dff 24 "CACHE_LOGIK.v:111" ["ramout[23:0]"] ["BCLK"] ["TmP_4[23:0]"],
        _mux 1 "CACHE_LOGIK.v:112" ["TmP_2[23]"] ["0b0"] ["0b1"] ["WREN"],
        _mux 24 "CACHE_LOGIK.v:112" ["TmP_1[23:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxx"] ["VALIN[23:0]"] ["WREN"],
        _mux 5 "CACHE_LOGIK.v:112" ["TmP_0[4:0]"] ["0bxxxxx"] ["WADR[4:0]"] ["WREN"],
        _mux 24 "CACHE_LOGIK.v:117" ["VALOUT[23:0]"] ["ramout[23:0]"] ["valhold[23:0]"] ["gleich"],
        _and 1 "CACHE_LOGIK.v:115" ["TmP_3"] ["WREN"] ["TmP_5"] ,
        _buf 23 "" ["TmP_2[22:0]"] ["TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]", "TmP_2[23]"]
    ] in
    PINST "draw_hier NEU_VALID" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let OPDEC_REG {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "NEW",
                 "ACC_STAT[3:0]",
                 "PROT_ERROR",
                 "ALSB[1:0]",
                 "USED[2:0]",
                 "IC_DIN[31:0]",
                 "IC_INIT",
                 "DC_INIT",
                 "Y_INIT",
                 "RESTART",
                 "STOP_IC" ] in
    let outs = [ "OPREG[55:0]",
                 "ANZ_VAL[2:0]",
                 "IC_READ",
                 "NEW_PC",
                 "NEXT_ADR",
                 "DATA_HOLD",
                 "ABORT",
                 "IC_TEX[2:0]",
                 "INIT_DONE" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1[2:0]",
                 "TmP_10[2:0]",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3[2:0]",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4[55:0]",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73",
                 "TmP_74",
                 "TmP_75[2:0]",
                 "TmP_76[2:0]",
                 "TmP_77[2:0]",
                 "TmP_8",
                 "TmP_9",
                 "abort_flag",
                 "acc_ende",
                 "acc_err",
                 "acc_ok",
                 "data_to_ri[55:0]",
                 "new_anz[2:0]",
                 "new_reg",
                 "new_restart",
                 "nseq_flag",
                 "old_init",
                 "pre_new",
                 "stop_init" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _logic_reduce_or 2 "" ["TmP_29"] ["TmP_67", "TmP_62"],
        _logic_reduce_or 2 "" ["TmP_30"] ["TmP_55", "TmP_53"],
        _logic_reduce_or 2 "" ["TmP_31"] ["new_restart", "TmP_57"],
        _not 1 "STEUER_MISC.v:100" ["TmP_32"] ["TmP_47"],
        _not 1 "STEUER_MISC.v:100" ["TmP_33"] ["NEW_PC"],
        _not 1 "STEUER_MISC.v:102" ["TmP_34"] ["ACC_STAT[2]"],
        _not 1 "STEUER_MISC.v:104" ["TmP_35"] ["ACC_STAT[0]"],
        _not 1 "STEUER_MISC.v:107" ["TmP_36"] ["IC_READ"],
        _not 1 "STEUER_MISC.v:117" ["TmP_37"] ["acc_ende"],
        _not 1 "STEUER_MISC.v:159" ["TmP_38"] ["pre_new"],
        _not 1 "STEUER_MISC.v:159" ["TmP_39"] ["new_anz[2]"],
        _not 1 "STEUER_MISC.v:165" ["TmP_40"] ["IC_INIT"],
        _not 1 "STEUER_MISC.v:165" ["TmP_41"] ["DC_INIT"],
        _not 1 "STEUER_MISC.v:174" ["TmP_42"] ["acc_err"],
        _not 1 "STEUER_MISC.v:174" ["TmP_43"] ["TmP_23"],
        _not 1 "STEUER_MISC.v:174" ["TmP_44"] ["stop_init"],
        _not 1 "STEUER_MISC.v:177" ["TmP_45"] ["new_restart"],
        _not 1 "STEUER_MISC.v:177" ["TmP_46"] ["new_reg"],
        _or 1 "STEUER_MISC.v:100" ["TmP_0"] ["TmP_11"] ["TmP_12"] ,
        _or 1 "STEUER_MISC.v:102" ["TmP_48"] ["ACC_STAT[3]"] ["PROT_ERROR"] ,
        _or 1 "STEUER_MISC.v:104" ["TmP_6"] ["NEW_PC"] ["TmP_13"] ,
        _or 1 "STEUER_MISC.v:107" ["TmP_49"] ["TmP_36"] ["ACC_STAT[0]"] ,
        _or 1 "STEUER_MISC.v:107" ["acc_ende"] ["TmP_49"] ["abort_flag"] ,
        _or 1 "STEUER_MISC.v:109" ["new_restart"] ["NEW"] ["RESTART"] ,
        _or 1 "STEUER_MISC.v:112" ["TmP_8"] ["TmP_14"] ["TmP_16"] ,
        _or 1 "STEUER_MISC.v:117" ["TmP_47"] ["new_restart"] ["pre_new"] ,
        _or 1 "STEUER_MISC.v:117" ["TmP_5"] ["TmP_47"] ["TmP_18"] ,
        _or 1 "STEUER_MISC.v:163" ["TmP_50"] ["IC_INIT"] ["DC_INIT"] ,
        _or 1 "STEUER_MISC.v:163" ["TmP_7"] ["TmP_50"] ["Y_INIT"] ,
        _or 1 "STEUER_MISC.v:169" ["TmP_9"] ["stop_init"] ["IC_READ"] ,
        _or 1 "STEUER_MISC.v:174" ["TmP_51"] ["TmP_24"] ["NEW_PC"] ,
        _or 1 "STEUER_MISC.v:174" ["TmP_2"] ["TmP_51"] ["TmP_25"] ,
        _or 1 "STEUER_MISC.v:95" ["TmP_52"] ["ACC_STAT[3]"] ["ACC_STAT[1]"] ,
        _or 1 "STEUER_MISC.v:95" ["acc_err"] ["TmP_52"] ["PROT_ERROR"] ,
        _adff 1 "STEUER_MISC.v:172" ["IC_READ"] ["BRESET"] ["BCLK"] ["TmP_2"],
        _adff 1 "STEUER_MISC.v:167" ["stop_init"] ["BRESET"] ["BCLK"] ["TmP_9"],
        _dff 1 "STEUER_MISC.v:163" ["old_init"] ["BCLK"] ["TmP_7"],
        _adff 3 "STEUER_MISC.v:147" ["ANZ_VAL[2:0]"] ["BRESET"] ["BCLK"] ["TmP_1[2:0]"],
        _dff 56 "STEUER_MISC.v:133" ["OPREG[55:0]"] ["BCLK"] ["TmP_4[55:0]"],
        _dff 1 "STEUER_MISC.v:117" ["new_reg"] ["BCLK"] ["TmP_5"],
        _dff 1 "STEUER_MISC.v:112" ["pre_new"] ["BCLK"] ["TmP_8"],
        _dff 1 "STEUER_MISC.v:106" ["abort_flag"] ["BCLK"] ["acc_err"],
        _dff 1 "STEUER_MISC.v:104" ["nseq_flag"] ["BCLK"] ["TmP_6"],
        _dff 3 "STEUER_MISC.v:102" ["IC_TEX[2:0]"] ["BCLK"] ["TmP_3[2:0]"],
        _adff 1 "STEUER_MISC.v:98" ["ABORT"] ["BRESET"] ["BCLK"] ["TmP_0"],
        _pmux 3 4 "STEUER_MISC.v:156|STEUER_MISC.v:150" ["TmP_1[2:0]"] ["0bxxx"] ["0b000", "TmP_77[2:0]", "TmP_10[2:0]", "new_anz[2:0]"] ["TmP_31", "TmP_56", "TmP_54", "TmP_30"],
        _eq 4 "STEUER_MISC.v:156|STEUER_MISC.v:150" ["TmP_53"] ["new_restart", "new_reg", "ACC_STAT[0]", "new_anz[2]"] ["0b0011"] ,
        _eq 4 "STEUER_MISC.v:155|STEUER_MISC.v:150" ["TmP_54"] ["new_restart", "new_reg", "ACC_STAT[0]", "new_anz[2]"] ["0b0010"] ,
        _logic_not 3 "STEUER_MISC.v:154|STEUER_MISC.v:150" ["TmP_55"] ["new_restart", "new_reg", "ACC_STAT[0]"],
        _eq 3 "STEUER_MISC.v:153|STEUER_MISC.v:150" ["TmP_56"] ["new_restart", "new_reg", "ACC_STAT[0]"] ["0b011"] ,
        _eq 3 "STEUER_MISC.v:152|STEUER_MISC.v:150" ["TmP_57"] ["new_restart", "new_reg", "ACC_STAT[0]"] ["0b010"] ,
        _pmux 56 8 "STEUER_MISC.v:144|STEUER_MISC.v:134" ["TmP_4[55:0]"] ["OPREG[55:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "IC_DIN[31:8]", "0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "IC_DIN[31:16]", "0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "IC_DIN[31:24]", "0bxxxxxxxxxxxxxxxxxxxxxxxx", "IC_DIN[31:0]", "0bxxxxxxxxxxxxxxxx", "IC_DIN[31:0]", "data_to_ri[7:0]", "0bxxxxxxxx", "IC_DIN[31:0]", "data_to_ri[15:0]", "IC_DIN[31:0]", "data_to_ri[23:0]", "data_to_ri[55:0]"] ["TmP_66", "TmP_65", "TmP_64", "TmP_29", "TmP_61", "TmP_60", "TmP_59", "TmP_28"],
        _eq 3 "STEUER_MISC.v:144|STEUER_MISC.v:134" ["TmP_58"] ["new_reg", "ACC_STAT[0]", "new_anz[2]"] ["0b011"] ,
        _eq 5 "STEUER_MISC.v:143|STEUER_MISC.v:134" ["TmP_59"] ["new_reg", "ACC_STAT[0]", "new_anz[2:0]"] ["0b01011"] ,
        _eq 5 "STEUER_MISC.v:142|STEUER_MISC.v:134" ["TmP_60"] ["new_reg", "ACC_STAT[0]", "new_anz[2:0]"] ["0b01010"] ,
        _eq 5 "STEUER_MISC.v:141|STEUER_MISC.v:134" ["TmP_61"] ["new_reg", "ACC_STAT[0]", "new_anz[2:0]"] ["0b01001"] ,
        _eq 5 "STEUER_MISC.v:140|STEUER_MISC.v:134" ["TmP_62"] ["new_reg", "ACC_STAT[0]", "new_anz[2:0]"] ["0b01000"] ,
        _logic_not 2 "STEUER_MISC.v:139|STEUER_MISC.v:134" ["TmP_63"] ["new_reg", "ACC_STAT[0]"],
        _eq 4 "STEUER_MISC.v:138|STEUER_MISC.v:134" ["TmP_64"] ["new_reg", "ACC_STAT[0]", "ALSB[1:0]"] ["0b1111"] ,
        _eq 4 "STEUER_MISC.v:137|STEUER_MISC.v:134" ["TmP_65"] ["new_reg", "ACC_STAT[0]", "ALSB[1:0]"] ["0b1110"] ,
        _eq 4 "STEUER_MISC.v:136|STEUER_MISC.v:134" ["TmP_66"] ["new_reg", "ACC_STAT[0]", "ALSB[1:0]"] ["0b1101"] ,
        _eq 4 "STEUER_MISC.v:135|STEUER_MISC.v:134" ["TmP_67"] ["new_reg", "ACC_STAT[0]", "ALSB[1:0]"] ["0b1100"] ,
        _pmux 56 7 "STEUER_MISC.v:127|STEUER_MISC.v:120" ["data_to_ri[55:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["OPREG[55:0]", "0bxxxxxxxx", "OPREG[55:8]", "0bxxxxxxxxxxxxxxxx", "OPREG[55:16]", "0bxxxxxxxxxxxxxxxxxxxxxxxx", "OPREG[55:24]", "0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "OPREG[55:32]", "0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "OPREG[55:40]", "0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "OPREG[55:48]"] ["TmP_74", "TmP_73", "TmP_72", "TmP_71", "TmP_70", "TmP_69", "TmP_68"],
        _eq 3 "STEUER_MISC.v:127|STEUER_MISC.v:120" ["TmP_68"] ["USED[2:0]"] ["0b110"] ,
        _eq 3 "STEUER_MISC.v:126|STEUER_MISC.v:120" ["TmP_69"] ["USED[2:0]"] ["0b101"] ,
        _eq 3 "STEUER_MISC.v:125|STEUER_MISC.v:120" ["TmP_70"] ["USED[2:0]"] ["0b100"] ,
        _eq 3 "STEUER_MISC.v:124|STEUER_MISC.v:120" ["TmP_71"] ["USED[2:0]"] ["0b011"] ,
        _eq 3 "STEUER_MISC.v:123|STEUER_MISC.v:120" ["TmP_72"] ["USED[2:0]"] ["0b010"] ,
        _eq 3 "STEUER_MISC.v:122|STEUER_MISC.v:120" ["TmP_73"] ["USED[2:0]"] ["0b001"] ,
        _logic_not 3 "STEUER_MISC.v:121|STEUER_MISC.v:120" ["TmP_74"] ["USED[2:0]"],
        _mux 3 "STEUER_MISC.v:102" ["TmP_3[2:0]"] ["IC_TEX[2:0]"] ["TmP_76[2:0]"] ["acc_err"],
        _sub 3 "STEUER_MISC.v:131" ["new_anz[2:0]"] ["ANZ_VAL[2:0]"] ["USED[2:0]"] ,
        _sub 3 "STEUER_MISC.v:153" ["TmP_75[2:0]"] ["0b100"] ["0b0", "ALSB[1:0]"] ,
        _mux 3 "STEUER_MISC.v:102" ["TmP_76[2:0]"] ["nseq_flag", "TmP_34", "ACC_STAT[2]"] ["nseq_flag", "0b11"] ["TmP_48"],
        _mux 3 "STEUER_MISC.v:153" ["TmP_77[2:0]"] ["TmP_75[2:0]"] ["0b000"] ["pre_new"],
        _mux 1 "STEUER_MISC.v:159" ["NEXT_ADR"] ["TmP_20"] ["TmP_19"] ["new_reg"],
        _add 3 "STEUER_MISC.v:155" ["TmP_10[2:0]"] ["new_anz[2:0]"] ["0b100"] ,
        _and 1 "STEUER_MISC.v:100" ["TmP_11"] ["acc_err"] ["TmP_32"] ,
        _and 1 "STEUER_MISC.v:100" ["TmP_12"] ["ABORT"] ["TmP_33"] ,
        _and 1 "STEUER_MISC.v:104" ["TmP_13"] ["nseq_flag"] ["TmP_35"] ,
        _and 1 "STEUER_MISC.v:112" ["TmP_14"] ["new_restart"] ["TmP_37"] ,
        _and 1 "STEUER_MISC.v:112" ["TmP_15"] ["pre_new"] ["TmP_37"] ,
        _and 1 "STEUER_MISC.v:112" ["TmP_16"] ["TmP_15"] ["BRESET"] ,
        _and 1 "STEUER_MISC.v:114" ["NEW_PC"] ["TmP_47"] ["acc_ende"] ,
        _and 1 "STEUER_MISC.v:117" ["TmP_17"] ["new_reg"] ["TmP_37"] ,
        _and 1 "STEUER_MISC.v:117" ["TmP_18"] ["TmP_17"] ["BRESET"] ,
        _and 1 "STEUER_MISC.v:159" ["TmP_19"] ["ACC_STAT[0]"] ["TmP_38"] ,
        _and 1 "STEUER_MISC.v:159" ["TmP_20"] ["ACC_STAT[0]"] ["TmP_39"] ,
        _and 1 "STEUER_MISC.v:165" ["TmP_21"] ["old_init"] ["TmP_40"] ,
        _and 1 "STEUER_MISC.v:165" ["INIT_DONE"] ["TmP_21"] ["TmP_41"] ,
        _and 1 "STEUER_MISC.v:174" ["TmP_22"] ["IC_READ"] ["TmP_42"] ,
        _and 1 "STEUER_MISC.v:174" ["TmP_23"] ["STOP_IC"] ["ACC_STAT[0]"] ,
        _and 1 "STEUER_MISC.v:174" ["TmP_24"] ["TmP_22"] ["TmP_43"] ,
        _and 1 "STEUER_MISC.v:174" ["TmP_25"] ["INIT_DONE"] ["TmP_44"] ,
        _and 1 "STEUER_MISC.v:177" ["TmP_26"] ["TmP_45"] ["TmP_46"] ,
        _and 1 "STEUER_MISC.v:177" ["TmP_27"] ["TmP_26"] ["ACC_STAT[0]"] ,
        _and 1 "STEUER_MISC.v:177" ["DATA_HOLD"] ["TmP_27"] ["new_anz[2]"] ,
        _logic_reduce_or 2 "" ["TmP_28"] ["TmP_63", "TmP_58"],
        _buf 1 "STEUER_MISC.v:89" ["acc_ok"] ["ACC_STAT[0]"]
    ] in
    PINST "draw_hier OPDEC_REG" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let PREPDATA {attrs::(string#string) list} conns =
    let inps = [ "START[1:0]",
                 "MEI",
                 "DFLOAT",
                 "BWD[1:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]" ] in
    let outs = [ "MSD_1[20:0]",
                 "MSD_2[20:0]",
                 "LSD_1[31:0]",
                 "LSD_2[31:0]",
                 "LOAD_MSD",
                 "LOAD_LSD1",
                 "LOAD_LSD2" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _or 1 "DP_FPU.v:88" ["LOAD_MSD"] ["TmP_0"] ["TmP_1"] ,
        _or 1 "DP_FPU.v:89" ["LOAD_LSD1"] ["TmP_0"] ["TmP_2"] ,
        _or 1 "DP_FPU.v:90" ["LOAD_LSD2"] ["TmP_3"] ["TmP_2"] ,
        _pmux 32 2 "DP_FPU.v:84|DP_FPU.v:82" ["LSD_2[31:0]"] ["SRC2[31:0]"] ["0b000000000000000000000000", "SRC2[7:0]", "0b0000000000000000", "SRC2[15:0]"] ["TmP_5", "TmP_4"],
        _pmux 32 2 "DP_FPU.v:77|DP_FPU.v:75" ["LSD_1[31:0]"] ["SRC1[31:0]"] ["0b000000000000000000000000", "SRC1[7:0]", "0b0000000000000000", "SRC1[15:0]"] ["TmP_5", "TmP_4"],
        _eq 3 "DP_FPU.v:77|DP_FPU.v:75" ["TmP_4"] ["MEI", "BWD[1:0]"] ["0b101"] ,
        _eq 3 "DP_FPU.v:76|DP_FPU.v:75" ["TmP_5"] ["MEI", "BWD[1:0]"] ["0b100"] ,
        _mux 21 "DP_FPU.v:71" ["MSD_1[20:0]"] ["0b1", "SRC1[19:0]"] ["0b000000000000000000000"] ["MEI"],
        _mux 21 "DP_FPU.v:72" ["MSD_2[20:0]"] ["0b1", "SRC2[19:0]"] ["0b000000000000000000000"] ["MEI"],
        _and 1 "DP_FPU.v:88" ["TmP_1"] ["START[0]"] ["DFLOAT"] ,
        _and 1 "DP_FPU.v:89" ["TmP_0"] ["START[0]"] ["MEI"] ,
        _and 1 "DP_FPU.v:90" ["TmP_3"] ["START[1]"] ["MEI"] ,
        _and 1 "DP_FPU.v:90" ["TmP_2"] ["START[1]"] ["DFLOAT"] 
    ] in
    PINST "draw_hier PREPDATA" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let PROG_COUNTER {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "NEW",
                 "LOAD_PC",
                 "NEW_PC",
                 "NEXT_ADR",
                 "NEXT_PCA",
                 "DISP[31:0]",
                 "PC_NEW[31:0]",
                 "USED[2:0]",
                 "USER",
                 "SAVE_PC",
                 "FPU_TRAP",
                 "ADIVAR" ] in
    let outs = [ "PC_ARCHI[31:0]",
                 "PC_ICACHE[31:0]",
                 "PC_SAVE[31:0]",
                 "ALSB[1:0]",
                 "IC_USER" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1[31:0]",
                 "TmP_2[31:0]",
                 "TmP_3[31:0]",
                 "TmP_4[31:0]",
                 "TmP_5[31:0]",
                 "TmP_6[31:0]",
                 "TmP_7[31:0]",
                 "branch[31:0]",
                 "fpu_trap_pc[31:0]",
                 "pc_adduse[31:0]",
                 "pc_ic_reg[31:0]",
                 "pc_icache_i[31:0]",
                 "pc_jump[31:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 32 "STEUER_MISC.v:243" ["TmP_4[31:0]"] ["pc_ic_reg[31:2]", "0b00"] ["0b00000000000000000000000000000100"] ,
        _adff 1 "STEUER_MISC.v:251" ["IC_USER"] ["BRESET"] ["BCLK"] ["TmP_0"],
        _adff 32 "STEUER_MISC.v:236" ["pc_ic_reg[31:0]"] ["BRESET"] ["BCLK"] ["pc_icache_i[31:0]"],
        _dff 32 "STEUER_MISC.v:234" ["fpu_trap_pc[31:0]"] ["BCLK"] ["TmP_2[31:0]"],
        _dff 32 "STEUER_MISC.v:229" ["PC_ARCHI[31:0]"] ["BCLK"] ["TmP_1[31:0]"],
        _adff 32 "STEUER_MISC.v:222" ["pc_adduse[31:0]"] ["BRESET"] ["BCLK"] ["TmP_3[31:0]"],
        _mux 1 "STEUER_MISC.v:254" ["TmP_0"] ["IC_USER"] ["USER"] ["NEW_PC"],
        _mux 32 "STEUER_MISC.v:234" ["TmP_2[31:0]"] ["fpu_trap_pc[31:0]"] ["PC_ARCHI[31:0]"] ["SAVE_PC"],
        _mux 32 "STEUER_MISC.v:232" ["TmP_5[31:0]"] ["PC_ARCHI[31:0]"] ["pc_adduse[31:0]"] ["NEXT_PCA"],
        _mux 32 "STEUER_MISC.v:230" ["TmP_1[31:0]"] ["TmP_5[31:0]"] ["fpu_trap_pc[31:0]"] ["FPU_TRAP"],
        _mux 32 "STEUER_MISC.v:220" ["pc_jump[31:0]"] ["branch[31:0]"] ["PC_NEW[31:0]"] ["LOAD_PC"],
        _mux 32 "STEUER_MISC.v:225" ["TmP_3[31:0]"] ["PC_SAVE[31:0]"] ["pc_jump[31:0]"] ["NEW"],
        _mux 32 "STEUER_MISC.v:243" ["TmP_6[31:0]"] ["pc_adduse[31:0]"] ["pc_jump[31:0]"] ["NEW"],
        _mux 32 "STEUER_MISC.v:243" ["TmP_7[31:0]"] ["pc_ic_reg[31:0]"] ["TmP_4[31:0]"] ["NEXT_ADR"],
        _mux 32 "STEUER_MISC.v:243" ["pc_icache_i[31:0]"] ["TmP_7[31:0]"] ["TmP_6[31:0]"] ["NEW_PC"],
        _mux 28 "STEUER_MISC.v:246" ["PC_ICACHE[31:4]"] ["pc_icache_i[31:4]"] ["PC_NEW[31:4]"] ["ADIVAR"],
        _add 32 "STEUER_MISC.v:217" ["PC_SAVE[31:0]"] ["pc_adduse[31:0]"] ["0b00000000000000000000000000000", "USED[2:0]"] ,
        _add 32 "STEUER_MISC.v:218" ["branch[31:0]"] ["PC_ARCHI[31:0]"] ["DISP[31:0]"] ,
        _buf 2 "STEUER_MISC.v:206" ["ALSB[1:0]"] ["pc_ic_reg[1:0]"],
        _buf 4 "" ["PC_ICACHE[3:0]"] ["pc_icache_i[3:0]"]
    ] in
    PINST "draw_hier PROG_COUNTER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let RD_ALIGNER {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "ACC_OK",
                 "PACKET[3:0]",
                 "SIZE[1:0]",
                 "REG_OUT",
                 "RDDATA[31:0]",
                 "CA_HIT" ] in
    let outs = [ "DP_DI[31:0]",
                 "AUX_QW" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1[7:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[7:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26[7:0]",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29[7:0]",
                 "TmP_3[7:0]",
                 "TmP_30[7:0]",
                 "TmP_31[7:0]",
                 "TmP_32[7:0]",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4[7:0]",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44[7:0]",
                 "TmP_5[7:0]",
                 "TmP_6[7:0]",
                 "TmP_7[7:0]",
                 "TmP_8",
                 "TmP_9",
                 "dreg_0[7:0]",
                 "dreg_1[7:0]",
                 "dreg_2[7:0]",
                 "dreg_3[7:0]",
                 "dreg_4[7:0]",
                 "dreg_5[7:0]",
                 "dreg_6[7:0]",
                 "enable[6:0]",
                 "out_0[7:0]",
                 "out_1[7:0]",
                 "out_2[7:0]",
                 "out_3[7:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _eq 6 "ALIGNER.v:246|ALIGNER.v:244" ["TmP_42"] ["ACC_OK", "SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b101011"] ,
        _eq 4 "ALIGNER.v:245|ALIGNER.v:244" ["TmP_43"] ["ACC_OK", "PACKET[3]", "PACKET[1:0]"] ["0b1000"] ,
        _mux 8 "ALIGNER.v:306" ["TmP_44[7:0]"] ["RDDATA[23:16]"] ["RDDATA[31:24]"] ["PACKET[1]"],
        _mux 32 "ALIGNER.v:349" ["DP_DI[31:0]"] ["out_3[7:0]", "out_2[7:0]", "out_1[7:0]", "out_0[7:0]"] ["dreg_3[7:0]", "dreg_2[7:0]", "dreg_1[7:0]", "dreg_0[7:0]"] ["REG_OUT"],
        _and 1 "ALIGNER.v:353" ["TmP_8"] ["ACC_OK"] ["TmP_14"] ,
        _and 1 "ALIGNER.v:353" ["TmP_9"] ["TmP_8"] ["TmP_13"] ,
        _and 1 "ALIGNER.v:353" ["TmP_0"] ["TmP_9"] ["PACKET[3]"] ,
        _logic_reduce_or 3 "" ["TmP_10"] ["TmP_22", "TmP_21", "TmP_17"],
        _logic_reduce_or 2 "" ["TmP_11"] ["TmP_17", "TmP_16"],
        _logic_reduce_or 2 "" ["TmP_12"] ["TmP_42", "TmP_39"],
        _eq 2 "ALIGNER.v:353" ["TmP_13"] ["SIZE[1:0]"] ["0b11"] ,
        _not 1 "ALIGNER.v:353" ["TmP_14"] ["CA_HIT"],
        _dff 1 "ALIGNER.v:353" ["AUX_QW"] ["BCLK"] ["TmP_0"],
        _dff 8 "ALIGNER.v:308" ["dreg_6[7:0]"] ["BCLK"] ["TmP_7[7:0]"],
        _dff 8 "ALIGNER.v:306" ["dreg_5[7:0]"] ["BCLK"] ["TmP_6[7:0]"],
        _dff 8 "ALIGNER.v:297" ["dreg_4[7:0]"] ["BCLK"] ["TmP_5[7:0]"],
        _dff 8 "ALIGNER.v:288" ["dreg_3[7:0]"] ["BCLK"] ["TmP_4[7:0]"],
        _dff 8 "ALIGNER.v:279" ["dreg_2[7:0]"] ["BCLK"] ["TmP_3[7:0]"],
        _dff 8 "ALIGNER.v:270" ["dreg_1[7:0]"] ["BCLK"] ["TmP_2[7:0]"],
        _dff 8 "ALIGNER.v:261" ["dreg_0[7:0]"] ["BCLK"] ["TmP_1[7:0]"],
        _pmux 8 3 "ALIGNER.v:345|ALIGNER.v:342" ["out_3[7:0]"] ["RDDATA[31:24]"] ["RDDATA[7:0]", "RDDATA[15:8]", "RDDATA[23:16]"] ["TmP_17", "TmP_16", "TmP_15"],
        _pmux 8 3 "ALIGNER.v:337|ALIGNER.v:334" ["out_2[7:0]"] ["RDDATA[23:16]"] ["dreg_6[7:0]", "RDDATA[7:0]", "RDDATA[15:8]"] ["TmP_17", "TmP_16", "TmP_15"],
        _eq 4 "ALIGNER.v:337|ALIGNER.v:334" ["TmP_15"] ["SIZE[1]", "PACKET[3]", "PACKET[1:0]"] ["0b1111"] ,
        _pmux 8 4 "ALIGNER.v:329|ALIGNER.v:324" ["out_1[7:0]"] ["RDDATA[15:8]"] ["RDDATA[23:16]", "RDDATA[31:24]", "RDDATA[7:0]", "dreg_5[7:0]"] ["TmP_20", "TmP_19", "TmP_18", "TmP_11"],
        _eq 4 "ALIGNER.v:329|ALIGNER.v:324" ["TmP_16"] ["SIZE[1]", "PACKET[3]", "PACKET[1:0]"] ["0b1110"] ,
        _eq 5 "ALIGNER.v:326|ALIGNER.v:324" ["TmP_19"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b01010"] ,
        _eq 5 "ALIGNER.v:325|ALIGNER.v:324" ["TmP_20"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b01001"] ,
        _pmux 8 4 "ALIGNER.v:319|ALIGNER.v:313" ["out_0[7:0]"] ["RDDATA[7:0]"] ["RDDATA[15:8]", "RDDATA[23:16]", "RDDATA[31:24]", "dreg_4[7:0]"] ["TmP_25", "TmP_24", "TmP_23", "TmP_10"],
        _eq 3 "ALIGNER.v:319|ALIGNER.v:313" ["TmP_21"] ["SIZE[1]", "PACKET[3]", "PACKET[1]"] ["0b111"] ,
        _eq 4 "ALIGNER.v:318|ALIGNER.v:313" ["TmP_17"] ["SIZE[1]", "PACKET[3]", "PACKET[1:0]"] ["0b1101"] ,
        _eq 5 "ALIGNER.v:317|ALIGNER.v:313" ["TmP_22"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b01111"] ,
        _eq 5 "ALIGNER.v:316|ALIGNER.v:313" ["TmP_23"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b00011"] ,
        _eq 4 "ALIGNER.v:315|ALIGNER.v:313" ["TmP_24"] ["SIZE[1]", "PACKET[3]", "PACKET[1:0]"] ["0b0010"] ,
        _eq 4 "ALIGNER.v:314|ALIGNER.v:313" ["TmP_25"] ["SIZE[1]", "PACKET[3]", "PACKET[1:0]"] ["0b0001"] ,
        _mux 8 "ALIGNER.v:308" ["TmP_7[7:0]"] ["dreg_6[7:0]"] ["RDDATA[31:24]"] ["enable[6]"],
        _mux 8 "ALIGNER.v:306" ["TmP_6[7:0]"] ["dreg_5[7:0]"] ["TmP_44[7:0]"] ["enable[5]"],
        _pmux 8 3 "ALIGNER.v:302|ALIGNER.v:299" ["TmP_26[7:0]"] ["dreg_4[7:0]"] ["RDDATA[15:8]", "RDDATA[23:16]", "RDDATA[31:24]"] ["TmP_28", "TmP_27", "TmP_18"],
        _mux 8 "ALIGNER.v:298" ["TmP_5[7:0]"] ["dreg_4[7:0]"] ["TmP_26[7:0]"] ["enable[4]"],
        _pmux 8 3 "ALIGNER.v:293|ALIGNER.v:290" ["TmP_29[7:0]"] ["RDDATA[31:24]"] ["RDDATA[7:0]", "RDDATA[15:8]", "RDDATA[23:16]"] ["TmP_28", "TmP_27", "TmP_18"],
        _mux 8 "ALIGNER.v:289" ["TmP_4[7:0]"] ["dreg_3[7:0]"] ["TmP_29[7:0]"] ["enable[3]"],
        _pmux 8 3 "ALIGNER.v:284|ALIGNER.v:281" ["TmP_30[7:0]"] ["RDDATA[23:16]"] ["RDDATA[31:24]", "RDDATA[7:0]", "RDDATA[15:8]"] ["TmP_28", "TmP_27", "TmP_18"],
        _mux 8 "ALIGNER.v:280" ["TmP_3[7:0]"] ["dreg_2[7:0]"] ["TmP_30[7:0]"] ["enable[2]"],
        _pmux 8 3 "ALIGNER.v:275|ALIGNER.v:272" ["TmP_31[7:0]"] ["RDDATA[15:8]"] ["RDDATA[23:16]", "RDDATA[31:24]", "RDDATA[7:0]"] ["TmP_28", "TmP_27", "TmP_18"],
        _mux 8 "ALIGNER.v:271" ["TmP_2[7:0]"] ["dreg_1[7:0]"] ["TmP_31[7:0]"] ["enable[1]"],
        _pmux 8 3 "ALIGNER.v:266|ALIGNER.v:263" ["TmP_32[7:0]"] ["RDDATA[7:0]"] ["RDDATA[15:8]", "RDDATA[23:16]", "RDDATA[31:24]"] ["TmP_28", "TmP_27", "TmP_18"],
        _eq 2 "ALIGNER.v:266|ALIGNER.v:263" ["TmP_18"] ["PACKET[1:0]"] ["0b11"] ,
        _eq 2 "ALIGNER.v:265|ALIGNER.v:263" ["TmP_27"] ["PACKET[1:0]"] ["0b10"] ,
        _eq 2 "ALIGNER.v:264|ALIGNER.v:263" ["TmP_28"] ["PACKET[1:0]"] ["0b01"] ,
        _mux 8 "ALIGNER.v:262" ["TmP_1[7:0]"] ["dreg_0[7:0]"] ["TmP_32[7:0]"] ["enable[0]"],
        _pmux 7 10 "ALIGNER.v:255|ALIGNER.v:244" ["enable[6:0]"] ["0b0000000"] ["0b0001111111000001100000010000000011111110000000011011110000000010011110"] ["TmP_43", "TmP_41", "TmP_40", "TmP_12", "TmP_38", "TmP_37", "TmP_36", "TmP_35", "TmP_34", "TmP_33"],
        _eq 7 "ALIGNER.v:255|ALIGNER.v:244" ["TmP_33"] ["ACC_OK", "SIZE[1:0]", "PACKET[3:0]"] ["0b1110111"] ,
        _eq 7 "ALIGNER.v:254|ALIGNER.v:244" ["TmP_34"] ["ACC_OK", "SIZE[1:0]", "PACKET[3:0]"] ["0b1110011"] ,
        _eq 7 "ALIGNER.v:253|ALIGNER.v:244" ["TmP_35"] ["ACC_OK", "SIZE[1:0]", "PACKET[3:0]"] ["0b1110110"] ,
        _eq 7 "ALIGNER.v:252|ALIGNER.v:244" ["TmP_36"] ["ACC_OK", "SIZE[1:0]", "PACKET[3:0]"] ["0b1110010"] ,
        _eq 7 "ALIGNER.v:251|ALIGNER.v:244" ["TmP_37"] ["ACC_OK", "SIZE[1:0]", "PACKET[3:0]"] ["0b1110101"] ,
        _eq 7 "ALIGNER.v:250|ALIGNER.v:244" ["TmP_38"] ["ACC_OK", "SIZE[1:0]", "PACKET[3:0]"] ["0b1110001"] ,
        _eq 6 "ALIGNER.v:249|ALIGNER.v:244" ["TmP_39"] ["ACC_OK", "SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b110011"] ,
        _eq 6 "ALIGNER.v:248|ALIGNER.v:244" ["TmP_40"] ["ACC_OK", "SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b110010"] ,
        _eq 6 "ALIGNER.v:247|ALIGNER.v:244" ["TmP_41"] ["ACC_OK", "SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b110001"] 
    ] in
    PINST "draw_hier RD_ALIGNER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let REGISTER {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "ENWR",
                 "DOWR",
                 "BYDIN[31:0]",
                 "DIN[31:0]",
                 "RADR[7:0]",
                 "WADR[5:0]",
                 "WMASKE[1:0]" ] in
    let outs = [ "DOUT[31:0]",
                 "SELI" ] in
    let ints = md_extract_vectors [ "RF[31:0]",
                 "TmP_0[5:0]",
                 "TmP_1[7:0]",
                 "TmP_10",
                 "TmP_11[2:0]",
                 "TmP_12[2:0]",
                 "TmP_13",
                 "TmP_14[7:0]",
                 "TmP_15[7:0]",
                 "TmP_16[15:0]",
                 "TmP_17[5:0]",
                 "TmP_18[7:0]",
                 "TmP_19[7:0]",
                 "TmP_2[7:0]",
                 "TmP_20[5:0]",
                 "TmP_21[7:0]",
                 "TmP_22[7:0]",
                 "TmP_23[5:0]",
                 "TmP_24[15:0]",
                 "TmP_25[15:0]",
                 "TmP_26[15:0]",
                 "TmP_27[15:0]",
                 "TmP_28[5:0]",
                 "TmP_29[7:0]",
                 "TmP_3[5:0]",
                 "TmP_30[7:0]",
                 "TmP_31[5:0]",
                 "TmP_4[7:0]",
                 "TmP_5[7:0]",
                 "TmP_6[5:0]",
                 "TmP_7[15:0]",
                 "TmP_8[15:0]",
                 "TmP_9[31:0]",
                 "be[2:0]",
                 "eq_rw",
                 "mx[2:0]",
                "REGFILE_A[63:0][7:0]",
                "REGFILE_B[63:0][7:0]",
                "REGFILE_C[63:0][15:0]" ] in
    let REGFILE_A = "REGFILE_A[63:0][7:0]" in
    let REGFILE_B = "REGFILE_B[63:0][7:0]" in
    let REGFILE_C = "REGFILE_C[63:0][15:0]" in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "REGISTERS.v:297" ["eq_rw"] ["ENWR"] ["TmP_13"] ,
        _and 3 "REGISTERS.v:299" ["TmP_12[2:0]"] ["WMASKE[1]", "be[1]", "0b1"] ["eq_rw", "eq_rw", "eq_rw"] ,
        _eq 6 "REGISTERS.v:297" ["TmP_13"] ["RADR[5:0]"] ["WADR[5:0]"] ,
        _memrd "REGISTERS.v:314" 8 6 REGFILE_A ["0bx"] ["RADR[5:0]"] ["TmP_14[7:0]"],
        _memrd "REGISTERS.v:313" 8 6 REGFILE_B ["0bx"] ["RADR[5:0]"] ["TmP_15[7:0]"],
        _memrd "REGISTERS.v:312" 16 6 REGFILE_C ["0bx"] ["RADR[5:0]"] ["TmP_16[15:0]"],
        _memwr "REGISTERS.v:322" 8 6 REGFILE_A ["TmP_19[7:0]"] ["TmP_17[5:0]"] ["TmP_18[7:0]"],
        _memwr "REGISTERS.v:321" 8 6 REGFILE_B ["TmP_22[7:0]"] ["TmP_20[5:0]"] ["TmP_21[7:0]"],
        _memwr "REGISTERS.v:320" 16 6 REGFILE_C ["TmP_25[15:0]"] ["TmP_23[5:0]"] ["TmP_24[15:0]"],
        _or 1 "REGISTERS.v:295" ["be[1]"] ["WMASKE[1]"] ["WMASKE[0]"] ,
        _dff 6 "REGISTERS.v:317" ["TmP_23[5:0]"] ["BCLK"] ["TmP_6[5:0]"],
        _dff 16 "REGISTERS.v:317" ["TmP_24[15:0]"] ["BCLK"] ["TmP_7[15:0]"],
        _dff 16 "REGISTERS.v:317" ["TmP_25[15:0]"] ["BCLK"] ["TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]"],
        _dff 6 "REGISTERS.v:317" ["TmP_20[5:0]"] ["BCLK"] ["TmP_3[5:0]"],
        _dff 8 "REGISTERS.v:317" ["TmP_21[7:0]"] ["BCLK"] ["TmP_4[7:0]"],
        _dff 8 "REGISTERS.v:317" ["TmP_22[7:0]"] ["BCLK"] ["TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]"],
        _dff 6 "REGISTERS.v:317" ["TmP_17[5:0]"] ["BCLK"] ["TmP_0[5:0]"],
        _dff 8 "REGISTERS.v:317" ["TmP_18[7:0]"] ["BCLK"] ["TmP_1[7:0]"],
        _dff 8 "REGISTERS.v:317" ["TmP_19[7:0]"] ["BCLK"] ["TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]"],
        _dff 32 "REGISTERS.v:309" ["RF[31:0]"] ["BCLK"] ["TmP_9[31:0]"],
        _dff 1 "REGISTERS.v:301" ["SELI"] ["BCLK"] ["TmP_10"],
        _dff 3 "REGISTERS.v:299" ["mx[2:0]"] ["BCLK"] ["TmP_11[2:0]"],
        _mux 1 "REGISTERS.v:320" ["TmP_26[15]"] ["0b0"] ["0b1"] ["WMASKE[1]"],
        _mux 1 "REGISTERS.v:318" ["TmP_8[15]"] ["0b0"] ["TmP_26[15]"] ["DOWR"],
        _mux 16 "REGISTERS.v:320" ["TmP_27[15:0]"] ["0bxxxxxxxxxxxxxxxx"] ["DIN[31:16]"] ["WMASKE[1]"],
        _mux 16 "REGISTERS.v:318" ["TmP_7[15:0]"] ["0bxxxxxxxxxxxxxxxx"] ["TmP_27[15:0]"] ["DOWR"],
        _mux 6 "REGISTERS.v:320" ["TmP_28[5:0]"] ["0bxxxxxx"] ["WADR[5:0]"] ["WMASKE[1]"],
        _mux 6 "REGISTERS.v:318" ["TmP_6[5:0]"] ["0bxxxxxx"] ["TmP_28[5:0]"] ["DOWR"],
        _mux 1 "REGISTERS.v:321" ["TmP_29[7]"] ["0b0"] ["0b1"] ["be[1]"],
        _mux 1 "REGISTERS.v:318" ["TmP_5[7]"] ["0b0"] ["TmP_29[7]"] ["DOWR"],
        _mux 8 "REGISTERS.v:321" ["TmP_30[7:0]"] ["0bxxxxxxxx"] ["DIN[15:8]"] ["be[1]"],
        _mux 8 "REGISTERS.v:318" ["TmP_4[7:0]"] ["0bxxxxxxxx"] ["TmP_30[7:0]"] ["DOWR"],
        _mux 6 "REGISTERS.v:321" ["TmP_31[5:0]"] ["0bxxxxxx"] ["WADR[5:0]"] ["be[1]"],
        _mux 6 "REGISTERS.v:318" ["TmP_3[5:0]"] ["0bxxxxxx"] ["TmP_31[5:0]"] ["DOWR"],
        _mux 1 "REGISTERS.v:318" ["TmP_2[7]"] ["0b0"] ["0b1"] ["DOWR"],
        _mux 8 "REGISTERS.v:318" ["TmP_1[7:0]"] ["0bxxxxxxxx"] ["DIN[7:0]"] ["DOWR"],
        _mux 6 "REGISTERS.v:318" ["TmP_0[5:0]"] ["0bxxxxxx"] ["WADR[5:0]"] ["DOWR"],
        _mux 8 "REGISTERS.v:310" ["TmP_9[15:8]"] ["RF[15:8]"] ["TmP_15[7:0]"] ["RADR[7]"],
        _mux 8 "REGISTERS.v:310" ["TmP_9[7:0]"] ["RF[7:0]"] ["TmP_14[7:0]"] ["RADR[7]"],
        _mux 16 "REGISTERS.v:310" ["TmP_9[31:16]"] ["RF[31:16]"] ["TmP_16[15:0]"] ["RADR[7]"],
        _mux 1 "REGISTERS.v:301" ["TmP_10"] ["SELI"] ["RADR[6]"] ["RADR[7]"],
        _mux 3 "REGISTERS.v:299" ["TmP_11[2:0]"] ["mx[2:0]"] ["TmP_12[2:0]"] ["RADR[7]"],
        _mux 16 "REGISTERS.v:303" ["DOUT[31:16]"] ["RF[31:16]"] ["BYDIN[31:16]"] ["mx[2]"],
        _mux 8 "REGISTERS.v:304" ["DOUT[15:8]"] ["RF[15:8]"] ["BYDIN[15:8]"] ["mx[1]"],
        _mux 8 "REGISTERS.v:305" ["DOUT[7:0]"] ["RF[7:0]"] ["BYDIN[7:0]"] ["mx[0]"],
        _buf 7 "" ["TmP_2[6:0]"] ["TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]", "TmP_2[7]"],
        _buf 15 "" ["TmP_26[14:0]"] ["TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]", "TmP_26[15]"],
        _buf 7 "" ["TmP_29[6:0]"] ["TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]", "TmP_29[7]"],
        _buf 7 "" ["TmP_5[6:0]"] ["TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]", "TmP_5[7]"],
        _buf 15 "" ["TmP_8[14:0]"] ["TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]", "TmP_8[15]"],
        _buf 2 "" ["be[2]", "be[0]"] ["WMASKE[1]", "0b1"]
    ] in
    PINST "draw_hier REGISTER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let REG_LIST {attrs::(string#string) list} conns =
    let inps = [ "DIN[7:0]",
                 "IPOS[2:0]",
                 "INIT" ] in
    let outs = [ "OPOS[2:0]",
                 "VALID" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "filter[6:0]",
                 "mdat_0[7:0]",
                 "mdat_1[3:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _logic_not 4 "STEUER_MISC.v:290" ["OPOS[2]"] ["mdat_0[3:0]"],
        _logic_not 2 "STEUER_MISC.v:292" ["OPOS[1]"] ["mdat_1[1:0]"],
        _eq 2 "STEUER_MISC.v:293" ["TmP_0"] ["mdat_1[2:1]"] ["0b10"] ,
        _logic_reduce_bool 4 "STEUER_MISC.v:294" ["VALID"] ["mdat_1[3:0]"],
        _not 1 "STEUER_MISC.v:293" ["OPOS[0]"] ["TmP_1"],
        _or 1 "STEUER_MISC.v:293" ["TmP_1"] ["TmP_0"] ["mdat_1[0]"] ,
        _pmux 7 8 "STEUER_MISC.v:286|STEUER_MISC.v:278" ["filter[6:0]"] ["0bxxxxxxx"] ["DIN[7:1]", "DIN[7:2]", "0b0", "DIN[7:3]", "0b00", "DIN[7:4]", "0b000", "DIN[7:5]", "0b0000", "DIN[7:6]", "0b00000", "DIN[7]", "0b0000000000000"] ["TmP_9", "TmP_8", "TmP_7", "TmP_6", "TmP_5", "TmP_4", "TmP_3", "TmP_2"],
        _eq 3 "STEUER_MISC.v:286|STEUER_MISC.v:278" ["TmP_2"] ["IPOS[2:0]"] ["0b111"] ,
        _eq 3 "STEUER_MISC.v:285|STEUER_MISC.v:278" ["TmP_3"] ["IPOS[2:0]"] ["0b110"] ,
        _eq 3 "STEUER_MISC.v:284|STEUER_MISC.v:278" ["TmP_4"] ["IPOS[2:0]"] ["0b101"] ,
        _eq 3 "STEUER_MISC.v:283|STEUER_MISC.v:278" ["TmP_5"] ["IPOS[2:0]"] ["0b100"] ,
        _eq 3 "STEUER_MISC.v:282|STEUER_MISC.v:278" ["TmP_6"] ["IPOS[2:0]"] ["0b011"] ,
        _eq 3 "STEUER_MISC.v:281|STEUER_MISC.v:278" ["TmP_7"] ["IPOS[2:0]"] ["0b010"] ,
        _eq 3 "STEUER_MISC.v:280|STEUER_MISC.v:278" ["TmP_8"] ["IPOS[2:0]"] ["0b001"] ,
        _logic_not 3 "STEUER_MISC.v:279|STEUER_MISC.v:278" ["TmP_9"] ["IPOS[2:0]"],
        _mux 8 "STEUER_MISC.v:289" ["mdat_0[7:0]"] ["filter[6:0]", "0b0"] ["DIN[7:0]"] ["INIT"],
        _mux 4 "STEUER_MISC.v:291" ["mdat_1[3:0]"] ["mdat_0[3:0]"] ["mdat_0[7:4]"] ["OPOS[2]"]
    ] in
    PINST "draw_hier REG_LIST" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SCANDIG {attrs::(string#string) list} conns =
    let inps = [ "DIN[3:0]" ] in
    let outs = [ "MBIT",
                 "LBIT",
                 "NONZ" ] in
    let ints = md_extract_vectors [ "TmP_0" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _eq 3 "DP_FPU.v:632" ["TmP_0"] ["DIN[3:1]"] ["0b001"] ,
        _logic_reduce_bool 4 "DP_FPU.v:633" ["NONZ"] ["DIN[3:0]"],
        _or 1 "DP_FPU.v:631" ["MBIT"] ["DIN[3]"] ["DIN[2]"] ,
        _or 1 "DP_FPU.v:632" ["LBIT"] ["DIN[3]"] ["TmP_0"] 
    ] in
    PINST "draw_hier SCANDIG" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SCHALE {attrs::(string#string) list} conns =
    let inps = [ "dataa[31:0]",
                 "datab[31:0]",
                 "cin",
                 "add_sub",
                 "bwd[1:0]" ] in
    let outs = [ "result[31:0]",
                 "cout",
                 "overflow" ] in
    let ints = md_extract_vectors [ "TmP_0[32:0]",
                 "TmP_1[31:0]",
                 "TmP_10[31:0]",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "seldat[2:0]",
                 "summe[32:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _add 33 "I_PFAD.v:310" ["TmP_0[32:0]"] ["0b0", "dataa[31:0]"] ["0b0", "TmP_10[31:0]"] ,
        _add 33 "I_PFAD.v:310" ["summe[32:0]"] ["TmP_0[32:0]"] ["0b00000000000000000000000000000000", "cin"] ,
        _not 32 "I_PFAD.v:310" ["TmP_1[31:0]"] ["datab[31:0]"],
        _not 1 "I_PFAD.v:324" ["TmP_2"] ["seldat[2]"],
        _not 1 "I_PFAD.v:327" ["TmP_3"] ["summe[32]"],
        _pmux 1 4 "I_PFAD.v:324|I_PFAD.v:320" ["overflow"] ["0bx"] ["TmP_11", "TmP_12", "TmP_13", "TmP_14"] ["TmP_7", "TmP_6", "TmP_5", "TmP_4"],
        _eq 2 "I_PFAD.v:324|I_PFAD.v:320" ["TmP_4"] ["seldat[1:0]"] ["0b11"] ,
        _eq 2 "I_PFAD.v:323|I_PFAD.v:320" ["TmP_5"] ["seldat[1:0]"] ["0b10"] ,
        _eq 2 "I_PFAD.v:322|I_PFAD.v:320" ["TmP_6"] ["seldat[1:0]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:321|I_PFAD.v:320" ["TmP_7"] ["seldat[1:0]"],
        _pmux 3 2 "I_PFAD.v:315|I_PFAD.v:313" ["seldat[2:0]"] ["summe[31]", "dataa[31]", "datab[31]"] ["summe[7]", "dataa[7]", "datab[7]", "summe[15]", "dataa[15]", "datab[15]"] ["TmP_9", "TmP_8"],
        _eq 2 "I_PFAD.v:315|I_PFAD.v:313" ["TmP_8"] ["bwd[1:0]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:314|I_PFAD.v:313" ["TmP_9"] ["bwd[1:0]"],
        _mux 32 "I_PFAD.v:310" ["TmP_10[31:0]"] ["TmP_1[31:0]"] ["datab[31:0]"] ["add_sub"],
        _mux 1 "I_PFAD.v:321" ["TmP_11"] ["0b0"] ["seldat[2]"] ["add_sub"],
        _mux 1 "I_PFAD.v:322" ["TmP_12"] ["seldat[2]"] ["0b0"] ["add_sub"],
        _mux 1 "I_PFAD.v:323" ["TmP_13"] ["TmP_2"] ["0b0"] ["add_sub"],
        _mux 1 "I_PFAD.v:324" ["TmP_14"] ["0b0"] ["TmP_2"] ["add_sub"],
        _mux 1 "I_PFAD.v:327" ["cout"] ["TmP_3"] ["summe[32]"] ["add_sub"],
        _buf 32 "I_PFAD.v:302" ["result[31:0]"] ["summe[31:0]"]
    ] in
    PINST "draw_hier SCHALE" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SFPU_ADDSUB {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "NZEXP[1:0]",
                 "BWD[1:0]",
                 "SELECT[3:0]" ] in
    let outs = [ "OUT[36:0]",
                 "IOUT[31:0]",
                 "CMPRES[1:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[1:0]",
                 "TmP_1[31:0]",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2[33:0]",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3[31:0]",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4[36:0]",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_51",
                 "TmP_52",
                 "TmP_53",
                 "TmP_54",
                 "TmP_55",
                 "TmP_56",
                 "TmP_57",
                 "TmP_58",
                 "TmP_59",
                 "TmP_6",
                 "TmP_60",
                 "TmP_61",
                 "TmP_62",
                 "TmP_63",
                 "TmP_64",
                 "TmP_65[30:0]",
                 "TmP_66",
                 "TmP_67",
                 "TmP_68",
                 "TmP_69",
                 "TmP_7[9:0]",
                 "TmP_70",
                 "TmP_71",
                 "TmP_72",
                 "TmP_73[9:0]",
                 "TmP_74",
                 "TmP_75[23:0]",
                 "TmP_76[4:0]",
                 "TmP_77",
                 "TmP_78[32:0]",
                 "TmP_79",
                 "TmP_8",
                 "TmP_80",
                 "TmP_81",
                 "TmP_82[31:0]",
                 "TmP_9",
                 "add_q[33:0]",
                 "addflag",
                 "blshift[31:0]",
                 "blshifta[31:0]",
                 "blshiftb[31:0]",
                 "blshiftc[31:0]",
                 "blshiftd[31:0]",
                 "blshifte[31:0]",
                 "brshifta[32:0]",
                 "brshiftb[32:0]",
                 "brshiftc[32:0]",
                 "brshiftd[32:0]",
                 "brshifte[32:0]",
                 "car_ry",
                 "cmp_res",
                 "eminus1[7:0]",
                 "exdiff[8:0]",
                 "exdiff12[8:0]",
                 "expol[9:0]",
                 "ganzklein",
                 "iadder[32:0]",
                 "inex[1:0]",
                 "lsb",
                 "lsb_bl[1:0]",
                 "madiff[23:0]",
                 "minint",
                 "movdat[31:0]",
                 "movif[31:0]",
                 "muxsrc1[23:0]",
                 "muxsrc2[31:0]",
                 "out_v0[36:0]",
                 "out_v1[36:0]",
                 "ovflag",
                 "ovflag2",
                 "pipe1[23:0]",
                 "pshift[1:0]",
                 "result[35:0]",
                 "result_nosw[35:0]",
                 "result_sw[35:0]",
                 "rexdiff[8:0]",
                 "rexo[8:0]",
                 "rinex[1:0]",
                 "rovfl",
                 "select_v1",
                 "shift[4:0]",
                 "shift1[4:0]",
                 "shift2[4:0]",
                 "shift_1",
                 "shift_16",
                 "shift_2",
                 "shift_4",
                 "shift_8",
                 "shiftl[9:0]",
                 "sign",
                 "sign1",
                 "sign2",
                 "switch",
                 "vadd_q[33:0]",
                 "value1[24:0]",
                 "value2[24:0]",
                 "variante",
                 "vorz",
                 "vresult[35:0]",
                 "vsub_q[33:0]",
                 "vswitch",
                 "vzero",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "SP_FPU.v:291" ["TmP_21"] ["TmP_64"] ["TmP_32"] ,
        _eq 32 "SP_FPU.v:116" ["TmP_23"] ["SRC1[31:0]"] ["0b11001111000000000000000000000000"] ,
        _logic_not 8 "SP_FPU.v:135" ["TmP_24"] ["exdiff[8:1]"],
        _eq 9 "SP_FPU.v:135" ["TmP_25"] ["exdiff[8:0]"] ["0b111111111"] ,
        _logic_not 8 "SP_FPU.v:139" ["TmP_26"] ["exdiff[7:0]"],
        _eq 32 "SP_FPU.v:174" ["TmP_27"] ["SRC1[31:0]"] ["SRC2[31:0]"] ,
        _logic_not 16 "SP_FPU.v:191" ["shift_16"] ["blshift[31:16]"],
        _logic_not 8 "SP_FPU.v:211" ["shift_8"] ["blshifta[31:24]"],
        _logic_not 4 "SP_FPU.v:214" ["shift_4"] ["blshiftb[31:28]"],
        _logic_not 2 "SP_FPU.v:216" ["shift_2"] ["blshiftc[31:30]"],
        _eq 2 "SP_FPU.v:228" ["TmP_22"] ["SELECT[1:0]"] ["0b11"] ,
        _logic_not 32 "SP_FPU.v:231" ["TmP_28"] ["blshift[31:0]"],
        _eq 2 "SP_FPU.v:231" ["TmP_29"] ["SELECT[1:0]"] ["0b10"] ,
        _eq 3 "SP_FPU.v:290" ["TmP_30"] ["brshifte[2:0]"] ["0b110"] ,
        _eq 2 "SP_FPU.v:290" ["TmP_31"] ["brshifte[1:0]"] ["0b11"] ,
        _logic_not 2 "SP_FPU.v:291" ["TmP_32"] ["brshifte[1:0]"],
        _logic_not 27 "SP_FPU.v:336" ["vzero"] ["vresult[26:0]"],
        _logic_reduce_bool 3 "SP_FPU.v:104" ["TmP_33"] ["rexdiff[7:5]"],
        _logic_reduce_bool 5 "SP_FPU.v:111" ["TmP_34"] ["rexo[7:3]"],
        _logic_reduce_bool 4 "SP_FPU.v:112" ["TmP_35"] ["rexo[7:4]"],
        _logic_reduce_bool 3 "SP_FPU.v:113" ["TmP_36"] ["rexo[7:5]"],
        _ne 1 "SP_FPU.v:194" ["TmP_37"] ["muxsrc2[24]"] ["result[27]"] ,
        _logic_reduce_bool 3 "SP_FPU.v:194" ["TmP_38"] ["result[2:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:195" ["TmP_39"] ["result[1:0]"],
        _logic_reduce_bool 7 "SP_FPU.v:228" ["TmP_40"] ["blshifte[6:0]"],
        _logic_reduce_bool 3 "SP_FPU.v:253" ["TmP_41"] ["exdiff[7:5]"],
        _logic_reduce_bool 3 "SP_FPU.v:255" ["TmP_42"] ["exdiff12[7:5]"],
        _logic_reduce_bool 8 "SP_FPU.v:274" ["TmP_43"] ["pipe1[7:0]"],
        _logic_reduce_bool 9 "SP_FPU.v:275" ["TmP_44"] ["brshifta[8:0]"],
        _logic_reduce_bool 5 "SP_FPU.v:276" ["TmP_45"] ["brshiftb[4:0]"],
        _logic_reduce_bool 3 "SP_FPU.v:277" ["TmP_46"] ["brshiftc[2:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:278" ["TmP_47"] ["brshiftd[1:0]"],
        _ne 1 "SP_FPU.v:301" ["TmP_48"] ["iadder[8]"] ["iadder[7]"] ,
        _ne 1 "SP_FPU.v:302" ["TmP_49"] ["iadder[16]"] ["iadder[15]"] ,
        _ne 1 "SP_FPU.v:303" ["TmP_50"] ["iadder[32]"] ["iadder[31]"] ,
        _logic_reduce_bool 7 "SP_FPU.v:317" ["lsb"] ["brshifte[6:0]"],
        _ne 1 "SP_FPU.v:328" ["TmP_51"] ["muxsrc2[24]"] ["vresult[27]"] ,
        _logic_reduce_bool 3 "SP_FPU.v:328" ["TmP_52"] ["vresult[2:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:332" ["TmP_53"] ["vresult[1:0]"],
        _not 1 "SP_FPU.v:103" ["TmP_54"] ["minint"],
        _not 1 "SP_FPU.v:104" ["TmP_55"] ["rexdiff[8]"],
        _not 1 "SP_FPU.v:107" ["TmP_56"] ["BWD[1]"],
        _not 1 "SP_FPU.v:113" ["TmP_57"] ["rexo[8]"],
        _not 1 "SP_FPU.v:170" ["addflag"] ["TmP_63"],
        _not 1 "SP_FPU.v:175" ["TmP_60"] ["cmp_res"],
        _not 1 "SP_FPU.v:175" ["TmP_61"] ["SRC1[31]"],
        _not 1 "SP_FPU.v:218" ["shift_1"] ["blshiftd[31]"],
        _not 1 "SP_FPU.v:230" ["TmP_58"] ["NZEXP[1]"],
        _not 1 "SP_FPU.v:230" ["TmP_59"] ["NZEXP[0]"],
        _not 1 "SP_FPU.v:235" ["TmP_62"] ["SELECT[1]"],
        _not 1 "SP_FPU.v:291" ["TmP_64"] ["ganzklein"],
        _not 31 "SP_FPU.v:295" ["TmP_65[30:0]"] ["brshifte[32:2]"],
        _or 1 "SP_FPU.v:103" ["TmP_66"] ["ovflag"] ["ovflag2"] ,
        _or 1 "SP_FPU.v:135" ["TmP_67"] ["TmP_24"] ["TmP_25"] ,
        _or 1 "SP_FPU.v:135" ["TmP_9"] ["TmP_67"] ["SELECT[1]"] ,
        _or 1 "SP_FPU.v:139" ["switch"] ["exdiff[8]"] ["TmP_15"] ,
        _or 1 "SP_FPU.v:174" ["cmp_res"] ["TmP_27"] ["TmP_16"] ,
        _or 10 "SP_FPU.v:224" ["expol[9:0]"] ["TmP_73[9:0]"] ["0b0", "rovfl", "0b00000000"] ,
        _or 1 "SP_FPU.v:231" ["TmP_68"] ["TmP_19"] ["TmP_29"] ,
        _or 1 "SP_FPU.v:231" ["TmP_10"] ["TmP_18"] ["TmP_20"] ,
        _or 1 "SP_FPU.v:290" ["TmP_69"] ["TmP_30"] ["TmP_31"] ,
        _dff 37 "SP_FPU.v:338" ["out_v0[36:0]"] ["BCLK"] ["TmP_4[36:0]"],
        _dff 32 "SP_FPU.v:297" ["IOUT[31:0]"] ["BCLK"] ["TmP_1[31:0]"],
        _dff 1 "SP_FPU.v:235" ["select_v1"] ["BCLK"] ["TmP_6"],
        _dff 1 "SP_FPU.v:233" ["sign"] ["BCLK"] ["TmP_8"],
        _dff 1 "SP_FPU.v:230" ["zero"] ["BCLK"] ["TmP_10"],
        _dff 2 "SP_FPU.v:226" ["rinex[1:0]"] ["BCLK"] ["brshifte[1:0]"],
        _dff 2 "SP_FPU.v:221" ["pshift[1:0]"] ["BCLK"] ["shift_16", "shift_8"],
        _dff 32 "SP_FPU.v:212" ["blshiftb[31:0]"] ["BCLK"] ["TmP_3[31:0]"],
        _dff 34 "SP_FPU.v:194" ["add_q[33:0]"] ["BCLK"] ["TmP_2[33:0]"],
        _dff 10 "SP_FPU.v:189" ["shiftl[9:0]"] ["BCLK"] ["TmP_7[9:0]"],
        _dff 2 "SP_FPU.v:175" ["CMPRES[1:0]"] ["BCLK"] ["TmP_0[1]", "cmp_res"],
        _dff 1 "SP_FPU.v:135" ["variante"] ["BCLK"] ["TmP_9"],
        _dff 1 "SP_FPU.v:103" ["rovfl"] ["BCLK"] ["TmP_5"],
        _pmux 1 2 "SP_FPU.v:302|SP_FPU.v:300" ["ovflag2"] ["TmP_50"] ["TmP_48", "TmP_49"] ["TmP_71", "TmP_70"],
        _pmux 1 2 "SP_FPU.v:291|SP_FPU.v:289" ["car_ry"] ["SRC1[31]"] ["TmP_81", "TmP_77"] ["TmP_72", "SELECT[3]"],
        _logic_not 2 "SP_FPU.v:290|SP_FPU.v:289" ["TmP_72"] ["SELECT[3:2]"],
        _pmux 1 2 "SP_FPU.v:112|SP_FPU.v:110" ["ovflag"] ["TmP_14"] ["TmP_12", "TmP_13"] ["TmP_71", "TmP_70"],
        _pmux 32 2 "SP_FPU.v:87|SP_FPU.v:85" ["movdat[31:0]"] ["SRC1[31:0]"] ["SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7]", "SRC1[7:0]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15]", "SRC1[15:0]"] ["TmP_71", "TmP_70"],
        _eq 2 "SP_FPU.v:87|SP_FPU.v:85" ["TmP_70"] ["BWD[1:0]"] ["0b01"] ,
        _logic_not 2 "SP_FPU.v:86|SP_FPU.v:85" ["TmP_71"] ["BWD[1:0]"],
        _sub 9 "SP_FPU.v:102" ["rexdiff[8:0]"] ["0b010011101"] ["0b0", "SRC1[30:23]"] ,
        _sub 9 "SP_FPU.v:107" ["rexo[8:0]"] ["0b0", "SRC1[30:23]"] ["0b00111111", "TmP_56"] ,
        _sub 9 "SP_FPU.v:131" ["exdiff[8:0]"] ["0b0", "SRC2[30:23]"] ["0b0", "SRC1[30:23]"] ,
        _sub 24 "SP_FPU.v:132" ["madiff[23:0]"] ["0b0", "SRC2[22:0]"] ["0b0", "SRC1[22:0]"] ,
        _sub 10 "SP_FPU.v:224" ["TmP_73[9:0]"] ["shiftl[9:0]"] ["0b00000", "pshift[1:0]", "shift_4", "shift_2", "shift_1"] ,
        _sub 9 "SP_FPU.v:254" ["exdiff12[8:0]"] ["0b0", "SRC1[30:23]"] ["0b0", "SRC2[30:23]"] ,
        _sub 8 "SP_FPU.v:325" ["eminus1[7:0]"] ["muxsrc2[31:24]"] ["0b00000001"] ,
        _mux 25 "SP_FPU.v:141" ["value1[24:0]"] ["NZEXP[0]", "SRC1[22:0]", "0b0"] ["0b0", "NZEXP[0]", "SRC1[22:0]"] ["exdiff[0]"],
        _mux 25 "SP_FPU.v:142" ["value2[24:0]"] ["NZEXP[1]", "SRC2[22:0]", "0b0"] ["0b0", "NZEXP[1]", "SRC2[22:0]"] ["exdiff[0]"],
        _mux 36 "SP_FPU.v:154" ["result[35:0]"] ["result_nosw[35:0]"] ["result_sw[35:0]"] ["switch"],
        _mux 1 "SP_FPU.v:169" ["vorz"] ["SRC2[31]"] ["TmP_79"] ["switch"],
        _mux 1 "SP_FPU.v:175" ["TmP_74"] ["SRC2[31]"] ["TmP_61"] ["switch"],
        _mux 32 "SP_FPU.v:187" ["blshift[31:0]"] ["result[26:0]", "0b00000"] ["movif[31:0]"] ["SELECT[1]"],
        _mux 10 "SP_FPU.v:189" ["TmP_7[9:0]"] ["0b0", "result[35:27]"] ["0b0010011110"] ["SELECT[1]"],
        _mux 34 "SP_FPU.v:195" ["TmP_2[33:0]"] ["result[35:27]", "result[25:2]", "TmP_39"] ["result[35:3]", "TmP_38"] ["TmP_37"],
        _mux 32 "SP_FPU.v:210" ["blshifta[31:0]"] ["blshift[31:0]"] ["blshift[15:0]", "0b0000000000000000"] ["shift_16"],
        _mux 32 "SP_FPU.v:213" ["TmP_3[31:0]"] ["blshifta[31:0]"] ["blshifta[23:0]", "0b00000000"] ["shift_8"],
        _mux 32 "SP_FPU.v:215" ["blshiftc[31:0]"] ["blshiftb[31:0]"] ["blshiftb[27:0]", "0b0000"] ["shift_4"],
        _mux 32 "SP_FPU.v:217" ["blshiftd[31:0]"] ["blshiftc[31:0]"] ["blshiftc[29:0]", "0b00"] ["shift_2"],
        _mux 32 "SP_FPU.v:219" ["blshifte[31:0]"] ["blshiftd[30:0]", "0b0"] ["0b1", "blshiftd[30:0]"] ["blshiftd[31]"],
        _mux 2 "SP_FPU.v:228" ["lsb_bl[1:0]"] ["blshifte[7]", "TmP_40"] ["rinex[1:0]"] ["TmP_22"],
        _mux 1 "SP_FPU.v:233" ["TmP_8"] ["vorz"] ["movdat[31]"] ["SELECT[1]"],
        _mux 37 "SP_FPU.v:238" ["out_v1[36:0]"] ["zero", "sign", "expol[9:0]", "blshifte[30:8]", "lsb_bl[1:0]"] ["zero", "sign", "0b0", "add_q[33:0]"] ["select_v1"],
        _mux 5 "SP_FPU.v:253" ["shift1[4:0]"] ["exdiff[4:0]"] ["0b11111"] ["TmP_41"],
        _mux 5 "SP_FPU.v:255" ["shift2[4:0]"] ["exdiff12[4:0]"] ["0b11111"] ["TmP_42"],
        _mux 32 "SP_FPU.v:257" ["muxsrc2[31:0]"] ["SRC2[30:23]", "0b1", "SRC2[22:0]"] ["SRC1[30:23]", "0b1", "SRC1[22:0]"] ["exdiff[8]"],
        _mux 24 "SP_FPU.v:258" ["muxsrc1[23:0]"] ["NZEXP[0]", "SRC1[22:0]"] ["NZEXP[1]", "SRC2[22:0]"] ["exdiff[8]"],
        _mux 24 "SP_FPU.v:260" ["TmP_75[23:0]"] ["NZEXP[0]", "SRC1[22:0]"] ["0b000000000000000000000000"] ["ganzklein"],
        _mux 24 "SP_FPU.v:260" ["pipe1[23:0]"] ["muxsrc1[23:0]"] ["TmP_75[23:0]"] ["SELECT[1]"],
        _mux 5 "SP_FPU.v:262" ["TmP_76[4:0]"] ["shift1[4:0]"] ["shift2[4:0]"] ["exdiff[8]"],
        _mux 5 "SP_FPU.v:262" ["shift[4:0]"] ["TmP_76[4:0]"] ["rexdiff[4:0]"] ["SELECT[1]"],
        _mux 33 "SP_FPU.v:274" ["brshifta[32:0]"] ["pipe1[23:0]", "0b000000000"] ["0b0000000000000000", "pipe1[23:8]", "TmP_43"] ["shift[4]"],
        _mux 33 "SP_FPU.v:275" ["brshiftb[32:0]"] ["brshifta[32:0]"] ["0b00000000", "brshifta[32:9]", "TmP_44"] ["shift[3]"],
        _mux 33 "SP_FPU.v:276" ["brshiftc[32:0]"] ["brshiftb[32:0]"] ["0b0000", "brshiftb[32:5]", "TmP_45"] ["shift[2]"],
        _mux 33 "SP_FPU.v:277" ["brshiftd[32:0]"] ["brshiftc[32:0]"] ["0b00", "brshiftc[32:3]", "TmP_46"] ["shift[1]"],
        _mux 33 "SP_FPU.v:278" ["brshifte[32:0]"] ["brshiftd[32:0]"] ["0b0", "brshiftd[32:2]", "TmP_47"] ["shift[0]"],
        _mux 1 "SP_FPU.v:291" ["TmP_77"] ["0b0"] ["TmP_21"] ["SRC1[31]"],
        _mux 33 "SP_FPU.v:295" ["TmP_78[32:0]"] ["0b00", "brshifte[32:2]"] ["0b11", "TmP_65[30:0]"] ["SRC1[31]"],
        _mux 32 "SP_FPU.v:297" ["TmP_1[31:0]"] ["iadder[31:0]"] ["0b10000000000000000000000000000000"] ["minint"],
        _mux 34 "SP_FPU.v:329" ["vadd_q[33:0]"] ["vresult[35:27]", "vresult[25:2]", "TmP_53"] ["vresult[35:3]", "TmP_52"] ["TmP_51"],
        _mux 34 "SP_FPU.v:333" ["vsub_q[33:0]"] ["vresult[35]", "eminus1[7:0]", "vresult[24:0]"] ["vresult[35:27]", "vresult[25:2]", "TmP_53"] ["vresult[26]"],
        _mux 37 "SP_FPU.v:339" ["TmP_4[36:0]"] ["0b0", "vorz", "0b0", "vadd_q[33:0]"] ["vzero", "vorz", "0b0", "vsub_q[33:0]"] ["TmP_63"],
        _mux 37 "SP_FPU.v:341" ["OUT[36:0]"] ["out_v0[36:0]"] ["out_v1[36:0]"] ["variante"],
        _xor 1 "SP_FPU.v:169" ["TmP_79"] ["SELECT[0]"] ["SRC1[31]"] ,
        _xor 1 "SP_FPU.v:170" ["TmP_80"] ["SRC1[31]"] ["SRC2[31]"] ,
        _xor 1 "SP_FPU.v:170" ["TmP_63"] ["SELECT[0]"] ["TmP_80"] ,
        _xor 1 "SP_FPU.v:290" ["TmP_81"] ["SRC1[31]"] ["TmP_69"] ,
        _xor 32 "SP_FPU.v:91" ["TmP_82[31:0]"] ["movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]", "movdat[31]"] ["movdat[31:0]"] ,
        _add 33 "SP_FPU.v:295" ["iadder[32:0]"] ["TmP_78[32:0]"] ["0b00000000000000000000000000000000", "car_ry"] ,
        _add 32 "SP_FPU.v:91" ["movif[31:0]"] ["TmP_82[31:0]"] ["0b0000000000000000000000000000000", "movdat[31]"] ,
        _and 1 "SP_FPU.v:103" ["TmP_11"] ["TmP_66"] ["TmP_22"] ,
        _and 1 "SP_FPU.v:103" ["TmP_5"] ["TmP_11"] ["TmP_54"] ,
        _and 1 "SP_FPU.v:104" ["ganzklein"] ["TmP_55"] ["TmP_33"] ,
        _and 1 "SP_FPU.v:111" ["TmP_12"] ["TmP_57"] ["TmP_34"] ,
        _and 1 "SP_FPU.v:112" ["TmP_13"] ["TmP_57"] ["TmP_35"] ,
        _and 1 "SP_FPU.v:113" ["TmP_14"] ["TmP_57"] ["TmP_36"] ,
        _and 1 "SP_FPU.v:116" ["minint"] ["TmP_23"] ["BWD[1]"] ,
        _and 1 "SP_FPU.v:139" ["TmP_15"] ["TmP_26"] ["madiff[23]"] ,
        _and 1 "SP_FPU.v:174" ["TmP_16"] ["TmP_58"] ["TmP_59"] ,
        _and 1 "SP_FPU.v:175" ["TmP_0[1]"] ["TmP_60"] ["TmP_74"] ,
        _and 1 "SP_FPU.v:230" ["TmP_17"] ["TmP_62"] ["TmP_58"] ,
        _and 1 "SP_FPU.v:230" ["TmP_18"] ["TmP_17"] ["TmP_59"] ,
        _and 1 "SP_FPU.v:231" ["TmP_19"] ["TmP_63"] ["TmP_62"] ,
        _and 1 "SP_FPU.v:231" ["TmP_20"] ["TmP_28"] ["TmP_68"] ,
        _and 1 "SP_FPU.v:235" ["TmP_6"] ["addflag"] ["TmP_62"] ,
        ADDSUB [("instance", "addsub_nosw"), ("src", "SP_FPU.v:146")] [
                ("add_sub",["addflag"]),
                ("dataa[35:0]",["0b0", "SRC2[30:23]", "NZEXP[1]", "SRC2[22:0]", "0b000"]),
                ("datab[35:0]",["0b000000000", "value1[24:0]", "0b00"]),
                ("result[35:0]",["result_nosw[35:0]"])],
        ADDSUB [("instance", "addsub_sw"), ("src", "SP_FPU.v:150")] [
                ("add_sub",["addflag"]),
                ("dataa[35:0]",["0b0", "SRC1[30:23]", "NZEXP[0]", "SRC1[22:0]", "0b000"]),
                ("datab[35:0]",["0b000000000", "value2[24:0]", "0b00"]),
                ("result[35:0]",["result_sw[35:0]"])],
        ADDSUB [("instance", "addsub_v"), ("src", "SP_FPU.v:321")] [
                ("add_sub",["addflag"]),
                ("dataa[35:0]",["0b0", "muxsrc2[31:0]", "0b000"]),
                ("datab[35:0]",["0b000000000", "brshifte[32:7]", "lsb"]),
                ("result[35:0]",["vresult[35:0]"])],
        _buf 1 "" ["TmP_0[0]"] ["cmp_res"],
        _buf 2 "SP_FPU.v:185" ["inex[1:0]"] ["brshifte[1:0]"],
        _buf 1 "SP_FPU.v:124" ["sign1"] ["SRC1[31]"],
        _buf 1 "SP_FPU.v:124" ["sign2"] ["SRC2[31]"],
        _buf 1 "SP_FPU.v:242" ["vswitch"] ["exdiff[8]"]
    ] in
    PINST "draw_hier SFPU_ADDSUB" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SFPU_MUL {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "NZEXP[1:0]" ] in
    let outs = [ "OUT[36:0]" ] in
    let ints = md_extract_vectors [ "TmP_0[36:0]",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "expoh[9:0]",
                 "expol[9:0]",
                 "exponent[9:0]",
                 "mresult[47:0]",
                 "orlow",
                 "resthigh[1:0]",
                 "restlow[1:0]",
                 "sign",
                 "zero" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _not 1 "SP_FPU.v:365" ["TmP_2"] ["NZEXP[0]"],
        _not 1 "SP_FPU.v:366" ["TmP_3"] ["zero"],
        _or 1 "SP_FPU.v:365" ["zero"] ["TmP_1"] ["TmP_2"] ,
        _or 1 "SP_FPU.v:370" ["resthigh[0]"] ["mresult[22]"] ["orlow"] ,
        _dff 37 "SP_FPU.v:376" ["OUT[36:0]"] ["BCLK"] ["TmP_0[36:0]"],
        _sub 10 "SP_FPU.v:373" ["expoh[9:0]"] ["exponent[9:0]"] ["0b0001111110"] ,
        _sub 10 "SP_FPU.v:374" ["expol[9:0]"] ["exponent[9:0]"] ["0b0001111111"] ,
        _mux 37 "SP_FPU.v:377" ["TmP_0[36:0]"] ["zero", "sign", "expol[9:0]", "mresult[45:22]", "orlow"] ["zero", "sign", "expoh[9:0]", "mresult[46:23]", "resthigh[0]"] ["mresult[47]"],
        _xor 1 "SP_FPU.v:366" ["TmP_4"] ["SRC1[31]"] ["SRC2[31]"] ,
        _add 10 "SP_FPU.v:372" ["exponent[9:0]"] ["0b00", "SRC1[30:23]"] ["0b00", "SRC2[30:23]"] ,
        _and 1 "SP_FPU.v:366" ["sign"] ["TmP_4"] ["TmP_3"] ,
        _mul 48 "SP_FPU.v:363" ["mresult[47:0]"] ["0b0000000000000000000000001", "SRC1[22:0]"] ["0b0000000000000000000000001", "SRC2[22:0]"] ,
        _logic_reduce_bool 22 "SP_FPU.v:367" ["orlow"] ["mresult[21:0]"],
        _not 1 "SP_FPU.v:365" ["TmP_1"] ["NZEXP[1]"],
        _buf 1 "" ["resthigh[1]"] ["mresult[23]"],
        _buf 2 "SP_FPU.v:360" ["restlow[1:0]"] ["mresult[22]", "orlow"]
    ] in
    PINST "draw_hier SFPU_MUL" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SHIFTER {attrs::(string#string) list} conns =
    let inps = [ "MASKE[31:0]",
                 "ROT",
                 "LSH",
                 "ASH",
                 "SIZE[1:0]",
                 "SH_VAL[7:0]",
                 "SH_DAT[31:0]" ] in
    let outs = [ "SH_OUT[31:0]",
                 "MASK_SEL[4:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11[31:0]",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5[31:0]",
                 "TmP_6[31:0]",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9[31:0]",
                 "mask_code[1:0]",
                 "msb",
                 "sh_dat_0[31:0]",
                 "sh_dat_1[31:0]",
                 "sh_dat_2[31:0]",
                 "sh_dat_3[31:0]",
                 "sh_dat_4[31:0]",
                 "sh_dat_in[31:0]",
                 "shift[4:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "I_PFAD.v:173" ["TmP_0"] ["ROT"] ["TmP_7"] ,
        _and 1 "I_PFAD.v:194" ["TmP_1"] ["SH_VAL[7]"] ["ASH"] ,
        _and 1 "I_PFAD.v:194" ["TmP_2"] ["TmP_1"] ["msb"] ,
        _and 1 "I_PFAD.v:195" ["TmP_3"] ["ASH"] ["TmP_8"] ,
        _and 1 "I_PFAD.v:195" ["TmP_4"] ["SH_VAL[7]"] ["TmP_10"] ,
        _and 32 "I_PFAD.v:206" ["TmP_5[31:0]"] ["sh_dat_4[31:0]"] ["MASKE[31:0]"] ,
        _and 32 "I_PFAD.v:207" ["TmP_6[31:0]"] ["sh_dat_4[31:0]"] ["TmP_9[31:0]"] ,
        _not 1 "I_PFAD.v:195" ["TmP_8"] ["msb"],
        _not 32 "I_PFAD.v:207" ["TmP_9[31:0]"] ["MASKE[31:0]"],
        _or 1 "I_PFAD.v:194" ["mask_code[1]"] ["ROT"] ["TmP_2"] ,
        _or 1 "I_PFAD.v:195" ["TmP_10"] ["TmP_3"] ["LSH"] ,
        _or 1 "I_PFAD.v:195" ["mask_code[0]"] ["ROT"] ["TmP_4"] ,
        _or 32 "I_PFAD.v:208" ["TmP_11[31:0]"] ["sh_dat_4[31:0]"] ["MASKE[31:0]"] ,
        _pmux 32 3 "I_PFAD.v:208|I_PFAD.v:205" ["SH_OUT[31:0]"] ["sh_dat_4[31:0]"] ["TmP_5[31:0]", "TmP_6[31:0]", "TmP_11[31:0]"] ["TmP_14", "TmP_13", "TmP_12"],
        _eq 2 "I_PFAD.v:208|I_PFAD.v:205" ["TmP_12"] ["mask_code[1:0]"] ["0b10"] ,
        _eq 2 "I_PFAD.v:207|I_PFAD.v:205" ["TmP_13"] ["mask_code[1:0]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:206|I_PFAD.v:205" ["TmP_14"] ["mask_code[1:0]"],
        _pmux 5 2 "I_PFAD.v:200|I_PFAD.v:198" ["MASK_SEL[4:0]"] ["SH_VAL[4:0]"] ["0b00", "SH_VAL[2:0]", "0b0", "SH_VAL[3:0]"] ["TmP_16", "TmP_15"],
        _eq 3 "I_PFAD.v:200|I_PFAD.v:198" ["TmP_15"] ["SH_VAL[7]", "SIZE[1:0]"] ["0b101"] ,
        _eq 3 "I_PFAD.v:199|I_PFAD.v:198" ["TmP_16"] ["SH_VAL[7]", "SIZE[1:0]"] ["0b100"] ,
        _pmux 1 2 "I_PFAD.v:188|I_PFAD.v:186" ["msb"] ["SH_DAT[31]"] ["SH_DAT[7]", "SH_DAT[15]"] ["TmP_7", "TmP_17"],
        _eq 2 "I_PFAD.v:188|I_PFAD.v:186" ["TmP_17"] ["SIZE[1:0]"] ["0b01"] ,
        _logic_not 2 "I_PFAD.v:187|I_PFAD.v:186" ["TmP_7"] ["SIZE[1:0]"],
        _pmux 32 2 "I_PFAD.v:167|I_PFAD.v:165" ["sh_dat_in[31:0]"] ["SH_DAT[31:0]"] ["SH_DAT[31:16]", "SH_DAT[7:0]", "SH_DAT[7:0]", "SH_DAT[15:0]", "SH_DAT[15:0]"] ["TmP_19", "TmP_18"],
        _eq 3 "I_PFAD.v:167|I_PFAD.v:165" ["TmP_18"] ["ROT", "SIZE[1:0]"] ["0b101"] ,
        _eq 3 "I_PFAD.v:166|I_PFAD.v:165" ["TmP_19"] ["ROT", "SIZE[1:0]"] ["0b100"] ,
        _mux 5 "I_PFAD.v:173" ["shift[4:0]"] ["SH_VAL[4:0]"] ["0b11", "SH_VAL[2:0]"] ["TmP_0"],
        _mux 32 "I_PFAD.v:177" ["sh_dat_0[31:0]"] ["sh_dat_in[31:0]"] ["sh_dat_in[30:0]", "sh_dat_in[31]"] ["shift[0]"],
        _mux 32 "I_PFAD.v:178" ["sh_dat_1[31:0]"] ["sh_dat_0[31:0]"] ["sh_dat_0[29:0]", "sh_dat_0[31:30]"] ["shift[1]"],
        _mux 32 "I_PFAD.v:179" ["sh_dat_2[31:0]"] ["sh_dat_1[31:0]"] ["sh_dat_1[27:0]", "sh_dat_1[31:28]"] ["shift[2]"],
        _mux 32 "I_PFAD.v:180" ["sh_dat_3[31:0]"] ["sh_dat_2[31:0]"] ["sh_dat_2[23:0]", "sh_dat_2[31:24]"] ["shift[3]"],
        _mux 32 "I_PFAD.v:181" ["sh_dat_4[31:0]"] ["sh_dat_3[31:0]"] ["sh_dat_3[15:0]", "sh_dat_3[31:16]"] ["shift[4]"]
    ] in
    PINST "draw_hier SHIFTER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let SP_FPU {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "START",
                 "OPCODE[7:0]",
                 "SRC1[31:0]",
                 "SRC2[31:0]",
                 "FSR[5:0]",
                 "BWD[1:0]",
                 "FL" ] in
    let outs = [ "FP_OUT[31:0]",
                 "I_OUT[31:0]",
                 "TT_SP[4:0]",
                 "SP_CMP[2:0]",
                 "SP_MUX",
                 "LD_FSR",
                 "UP_SP" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39",
                 "TmP_4",
                 "TmP_40",
                 "TmP_41",
                 "TmP_42",
                 "TmP_43",
                 "TmP_44",
                 "TmP_45",
                 "TmP_46",
                 "TmP_47",
                 "TmP_48",
                 "TmP_49",
                 "TmP_5",
                 "TmP_50",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "addout[36:0]",
                 "car_ry",
                 "fpout[36:0]",
                 "inexact",
                 "mulout[36:0]",
                 "nan",
                 "nan_1",
                 "nan_2",
                 "nzexp[1:0]",
                 "op_cmp",
                 "overflow",
                 "rund[32:0]",
                 "select[3:0]",
                 "tt[2:0]",
                 "underflow" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        SFPU_ADDSUB [("instance", "IADDSUB"), ("src", "SP_FPU.v:445")] [
                ("BCLK",["BCLK"]),
                ("BWD[1:0]",["BWD[1:0]"]),
                ("CMPRES[1:0]",["SP_CMP[1:0]"]),
                ("IOUT[31:0]",["I_OUT[31:0]"]),
                ("NZEXP[1:0]",["nzexp[1:0]"]),
                ("OUT[36:0]",["addout[36:0]"]),
                ("SELECT[3:0]",["OPCODE[2:1]", "select[1:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"])],
        SFPU_MUL [("instance", "IMUL"), ("src", "SP_FPU.v:449")] [
                ("BCLK",["BCLK"]),
                ("NZEXP[1:0]",["nzexp[1:0]"]),
                ("OUT[36:0]",["mulout[36:0]"]),
                ("SRC1[31:0]",["SRC1[31:0]"]),
                ("SRC2[31:0]",["SRC2[31:0]"])],
        _dff 1 "SP_FPU.v:442" ["nan"] ["BCLK"] ["TmP_1"],
        _dff 1 "SP_FPU.v:432" ["UP_SP"] ["BCLK"] ["TmP_0"],
        _pmux 3 4 "SP_FPU.v:476|SP_FPU.v:472" ["tt[2:0]"] ["0b000"] ["0b101010001110"] ["nan", "TmP_40", "TmP_39", "TmP_38"],
        _eq 7 "SP_FPU.v:476|SP_FPU.v:472" ["TmP_38"] ["nan", "op_cmp", "overflow", "FSR[0]", "underflow", "FSR[2]", "inexact"] ["0b0000011"] ,
        _eq 5 "SP_FPU.v:475|SP_FPU.v:472" ["TmP_39"] ["nan", "op_cmp", "overflow", "FSR[0]", "underflow"] ["0b00011"] ,
        _eq 3 "SP_FPU.v:474|SP_FPU.v:472" ["TmP_40"] ["nan", "op_cmp", "overflow"] ["0b001"] ,
        _pmux 1 3 "SP_FPU.v:459|SP_FPU.v:456" ["car_ry"] ["0b0"] ["TmP_34", "TmP_9", "TmP_10"] ["TmP_43", "TmP_42", "TmP_41"],
        _eq 2 "SP_FPU.v:459|SP_FPU.v:456" ["TmP_41"] ["FSR[5:4]"] ["0b11"] ,
        _eq 2 "SP_FPU.v:458|SP_FPU.v:456" ["TmP_42"] ["FSR[5:4]"] ["0b10"] ,
        _logic_not 2 "SP_FPU.v:457|SP_FPU.v:456" ["TmP_43"] ["FSR[5:4]"],
        _pmux 4 5 "SP_FPU.v:425|SP_FPU.v:417" ["select[3:0]"] ["0b0000"] ["0b10001010101110011100"] ["TmP_50", "TmP_48", "TmP_12", "TmP_11", "TmP_44"],
        _eq 8 "SP_FPU.v:425|SP_FPU.v:417" ["TmP_44"] ["OPCODE[7:0]"] ["0b10111100"] ,
        _eq 8 "SP_FPU.v:424|SP_FPU.v:417" ["TmP_15"] ["OPCODE[7:0]"] ["0b10110010"] ,
        _eq 7 "SP_FPU.v:423|SP_FPU.v:417" ["TmP_45"] ["OPCODE[7:1]"] ["0b1001111"] ,
        _eq 7 "SP_FPU.v:422|SP_FPU.v:417" ["TmP_46"] ["OPCODE[7:1]"] ["0b1001101"] ,
        _eq 7 "SP_FPU.v:421|SP_FPU.v:417" ["TmP_47"] ["OPCODE[7:1]"] ["0b1001100"] ,
        _eq 7 "SP_FPU.v:420|SP_FPU.v:417" ["TmP_48"] ["OPCODE[7:1]"] ["0b1001000"] ,
        _eq 8 "SP_FPU.v:419|SP_FPU.v:417" ["TmP_49"] ["OPCODE[7:0]"] ["0b10110100"] ,
        _eq 8 "SP_FPU.v:418|SP_FPU.v:417" ["TmP_50"] ["OPCODE[7:0]"] ["0b10110000"] ,
        _mux 1 "SP_FPU.v:442" ["TmP_1"] ["TmP_6"] ["nan_1"] ["TmP_18"],
        _mux 37 "SP_FPU.v:453" ["fpout[36:0]"] ["addout[36:0]"] ["mulout[36:0]"] ["TmP_7"],
        _mux 32 "SP_FPU.v:484" ["FP_OUT[31:0]"] ["fpout[35]", "rund[30:0]"] ["0b00000000000000000000000000000000"] ["TmP_37"],
        _add 33 "SP_FPU.v:463" ["rund[32:0]"] ["fpout[34:2]"] ["0b00000000000000000000000000000000", "car_ry"] ,
        _and 1 "SP_FPU.v:429" ["TmP_2"] ["select[3]"] ["TmP_23"] ,
        _and 1 "SP_FPU.v:429" ["SP_MUX"] ["TmP_2"] ["FL"] ,
        _and 1 "SP_FPU.v:431" ["LD_FSR"] ["TmP_13"] ["TmP_14"] ,
        _and 1 "SP_FPU.v:432" ["TmP_3"] ["select[3]"] ["FL"] ,
        _and 1 "SP_FPU.v:432" ["TmP_0"] ["TmP_3"] ["START"] ,
        _and 1 "SP_FPU.v:433" ["op_cmp"] ["TmP_15"] ["FL"] ,
        _and 1 "SP_FPU.v:439" ["TmP_4"] ["TmP_26"] ["TmP_24"] ,
        _and 1 "SP_FPU.v:440" ["TmP_5"] ["TmP_27"] ["TmP_25"] ,
        _and 1 "SP_FPU.v:442" ["TmP_6"] ["TmP_28"] ["TmP_33"] ,
        _and 1 "SP_FPU.v:453" ["TmP_7"] ["OPCODE[5]"] ["OPCODE[3]"] ,
        _and 1 "SP_FPU.v:457" ["TmP_8"] ["TmP_19"] ["fpout[2]"] ,
        _and 1 "SP_FPU.v:458" ["TmP_9"] ["TmP_29"] ["inexact"] ,
        _and 1 "SP_FPU.v:459" ["TmP_10"] ["fpout[35]"] ["inexact"] ,
        _and 1 "SP_FPU.v:466" ["overflow"] ["TmP_30"] ["TmP_35"] ,
        _and 1 "SP_FPU.v:467" ["underflow"] ["TmP_36"] ["TmP_31"] ,
        _and 1 "SP_FPU.v:480" ["TT_SP[3]"] ["underflow"] ["TmP_32"] ,
        _and 1 "SP_FPU.v:480" ["TT_SP[4]"] ["inexact"] ["TmP_32"] ,
        _logic_reduce_or 2 "" ["TmP_11"] ["TmP_49", "TmP_15"],
        _logic_reduce_or 3 "" ["TmP_12"] ["TmP_47", "TmP_46", "TmP_45"],
        _eq 4 "SP_FPU.v:431" ["TmP_13"] ["OPCODE[7:4]"] ["0b1001"] ,
        _eq 3 "SP_FPU.v:431" ["TmP_14"] ["OPCODE[3:1]"] ["0b001"] ,
        _eq 8 "SP_FPU.v:439" ["TmP_16"] ["SRC2[30:23]"] ["0b11111111"] ,
        _eq 8 "SP_FPU.v:440" ["TmP_17"] ["SRC1[30:23]"] ["0b11111111"] ,
        _eq 2 "SP_FPU.v:442" ["TmP_18"] ["select[1:0]"] ["0b11"] ,
        _eq 2 "SP_FPU.v:457" ["TmP_19"] ["fpout[1:0]"] ["0b10"] ,
        _eq 2 "SP_FPU.v:457" ["TmP_20"] ["fpout[1:0]"] ["0b11"] ,
        _eq 8 "SP_FPU.v:466" ["TmP_21"] ["rund[30:23]"] ["0b11111111"] ,
        _logic_not 9 "SP_FPU.v:467" ["TmP_22"] ["rund[31:23]"],
        _ne 2 "SP_FPU.v:429" ["TmP_23"] ["select[1:0]"] ["0b11"] ,
        _logic_reduce_bool 8 "SP_FPU.v:437" ["nzexp[1]"] ["SRC2[30:23]"],
        _logic_reduce_bool 8 "SP_FPU.v:438" ["nzexp[0]"] ["SRC1[30:23]"],
        _logic_reduce_bool 23 "SP_FPU.v:439" ["TmP_24"] ["SRC2[22:0]"],
        _logic_reduce_bool 23 "SP_FPU.v:440" ["TmP_25"] ["SRC1[22:0]"],
        _logic_reduce_bool 2 "SP_FPU.v:468" ["inexact"] ["fpout[1:0]"],
        _not 1 "SP_FPU.v:439" ["TmP_26"] ["nzexp[1]"],
        _not 1 "SP_FPU.v:440" ["TmP_27"] ["nzexp[0]"],
        _not 1 "SP_FPU.v:442" ["TmP_28"] ["select[1]"],
        _not 1 "SP_FPU.v:458" ["TmP_29"] ["fpout[35]"],
        _not 1 "SP_FPU.v:466" ["TmP_30"] ["rund[32]"],
        _not 1 "SP_FPU.v:467" ["TmP_31"] ["fpout[36]"],
        _not 1 "SP_FPU.v:480" ["TmP_32"] ["op_cmp"],
        _or 1 "SP_FPU.v:439" ["nan_2"] ["TmP_16"] ["TmP_4"] ,
        _or 1 "SP_FPU.v:440" ["nan_1"] ["TmP_17"] ["TmP_5"] ,
        _or 1 "SP_FPU.v:442" ["TmP_33"] ["nan_2"] ["nan_1"] ,
        _or 1 "SP_FPU.v:457" ["TmP_34"] ["TmP_8"] ["TmP_20"] ,
        _or 1 "SP_FPU.v:466" ["TmP_35"] ["rund[31]"] ["TmP_21"] ,
        _or 1 "SP_FPU.v:467" ["TmP_36"] ["rund[32]"] ["TmP_22"] ,
        _or 1 "SP_FPU.v:484" ["TmP_37"] ["underflow"] ["fpout[36]"] ,
        _buf 1 "" ["SP_CMP[2]"] ["nan"],
        _buf 3 "" ["TT_SP[2:0]"] ["tt[2:0]"]
    ] in
    PINST "draw_hier SP_FPU" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let STEUERUNG {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "BRESET",
                 "DC_ACC_DONE",
                 "ACB_ZERO",
                 "DONE",
                 "INT_N",
                 "NMI_N",
                 "DC_ABORT",
                 "IC_INIT",
                 "DC_INIT",
                 "SAVE_PC",
                 "CFG[8:0]",
                 "IACC_STAT[3:0]",
                 "PROT_ERROR",
                 "IC_DIN[31:0]",
                 "PC_NEW[31:0]",
                 "PSR[11:0]",
                 "STRING[4:0]",
                 "TRAPS[5:0]",
                 "Y_INIT",
                 "STOP_CINV" ] in
    let outs = [ "IC_READ",
                 "DATA_HOLD",
                 "LD_DIN",
                 "LD_IMME",
                 "WREN",
                 "WR_REG",
                 "GENSTAT[2:0]",
                 "ILO",
                 "COP_OP[23:0]",
                 "IC_USER",
                 "ACC_FELD[14:0]",
                 "DISP[31:0]",
                 "IC_TEX[2:0]",
                 "IMME_Q[31:0]",
                 "INFO_AU[6:0]",
                 "LD_OUT[1:0]",
                 "DETOIP[12:0]",
                 "MMU_UPDATE[1:0]",
                 "OPER[10:0]",
                 "PC_ARCHI[31:0]",
                 "PC_ICACHE[31:0]",
                 "RDAA[7:0]",
                 "RDAB[7:0]",
                 "START[1:0]",
                 "WMASKE[1:0]",
                 "WRADR[5:0]",
                 "RWVAL[2:0]",
                 "ENA_HK" ] in
    let ints = md_extract_vectors [ "ALSB[1:0]",
                 "ANZ_VAL[2:0]",
                 "DISP_BR[31:0]",
                 "IC_ABORT",
                 "ILLEGAL",
                 "INIT_DONE",
                 "LOAD_PC",
                 "NEW",
                 "NEW_PC",
                 "NEXT_ADR",
                 "NEXT_PCA",
                 "OPREG[55:0]",
                 "PC_SAVE[31:0]",
                 "RESTART",
                 "STOP_IC",
                 "UNDEF",
                 "USED[2:0]" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        DECODER [("instance", "BEFEHLS_DEC"), ("src", "STEUERUNG.v:115")] [
                ("ACB_ZERO",["ACB_ZERO"]),
                ("ACC_DONE",["DC_ACC_DONE"]),
                ("ACC_FELD[14:0]",["ACC_FELD[14:0]"]),
                ("ANZ_VAL[2:0]",["ANZ_VAL[2:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CFG[8:0]",["CFG[8:0]"]),
                ("COP_OP[23:0]",["COP_OP[23:0]"]),
                ("DC_ABORT",["DC_ABORT"]),
                ("DETOIP[12:0]",["DETOIP[12:0]"]),
                ("DISP[31:0]",["DISP[31:0]"]),
                ("DISP_BR[31:0]",["DISP_BR[31:0]"]),
                ("DONE",["DONE"]),
                ("ENA_HK",["ENA_HK"]),
                ("GENSTAT[2:0]",["GENSTAT[2:0]"]),
                ("IC_ABORT",["IC_ABORT"]),
                ("IC_READ",["IC_READ"]),
                ("ILL",["ILLEGAL"]),
                ("ILO",["ILO"]),
                ("IMME_Q[31:0]",["IMME_Q[31:0]"]),
                ("INFO_AU[6:0]",["INFO_AU[6:0]"]),
                ("INIT_DONE",["INIT_DONE"]),
                ("INT_N",["INT_N"]),
                ("LD_DIN",["LD_DIN"]),
                ("LD_IMME",["LD_IMME"]),
                ("LD_OUT[1:0]",["LD_OUT[1:0]"]),
                ("LOAD_PC",["LOAD_PC"]),
                ("MMU_UPDATE[1:0]",["MMU_UPDATE[1:0]"]),
                ("NEW",["NEW"]),
                ("NEXT_PCA",["NEXT_PCA"]),
                ("NMI_N",["NMI_N"]),
                ("OPER[10:0]",["OPER[10:0]"]),
                ("OPREG[55:0]",["OPREG[55:0]"]),
                ("PC_SAVE[31:0]",["PC_SAVE[31:0]"]),
                ("--PHOUT[6:0]",[]),
                ("PSR[11:0]",["PSR[11:0]"]),
                ("RDAA[7:0]",["RDAA[7:0]"]),
                ("RDAB[7:0]",["RDAB[7:0]"]),
                ("RESTART",["RESTART"]),
                ("RWVAL[2:0]",["RWVAL[2:0]"]),
                ("START[1:0]",["START[1:0]"]),
                ("STOP_CINV",["STOP_CINV"]),
                ("STOP_IC",["STOP_IC"]),
                ("STRING[4:0]",["STRING[4:0]"]),
                ("TRAPS[5:0]",["TRAPS[5:0]"]),
                ("UNDEF",["UNDEF"]),
                ("USED[2:0]",["USED[2:0]"]),
                ("WMASKE[1:0]",["WMASKE[1:0]"]),
                ("WRADR[5:0]",["WRADR[5:0]"]),
                ("WREN",["WREN"]),
                ("WR_REG",["WR_REG"])],
        ILL_UNDEF [("instance", "CHECKER"), ("src", "STEUERUNG.v:168")] [
                ("ANZ_VAL[2:0]",["ANZ_VAL[2:0]"]),
                ("CFG[2:0]",["CFG[3:1]"]),
                ("ILL",["ILLEGAL"]),
                ("OPREG[23:0]",["OPREG[23:0]"]),
                ("UNDEF",["UNDEF"]),
                ("USER",["PSR[8]"])],
        OPDEC_REG [("instance", "OPC_REG"), ("src", "STEUERUNG.v:176")] [
                ("ABORT",["IC_ABORT"]),
                ("ACC_STAT[3:0]",["IACC_STAT[3:0]"]),
                ("ALSB[1:0]",["ALSB[1:0]"]),
                ("ANZ_VAL[2:0]",["ANZ_VAL[2:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("DATA_HOLD",["DATA_HOLD"]),
                ("DC_INIT",["DC_INIT"]),
                ("IC_DIN[31:0]",["IC_DIN[31:0]"]),
                ("IC_INIT",["IC_INIT"]),
                ("IC_READ",["IC_READ"]),
                ("IC_TEX[2:0]",["IC_TEX[2:0]"]),
                ("INIT_DONE",["INIT_DONE"]),
                ("NEW",["NEW"]),
                ("NEW_PC",["NEW_PC"]),
                ("NEXT_ADR",["NEXT_ADR"]),
                ("OPREG[55:0]",["OPREG[55:0]"]),
                ("PROT_ERROR",["PROT_ERROR"]),
                ("RESTART",["RESTART"]),
                ("STOP_IC",["STOP_IC"]),
                ("USED[2:0]",["USED[2:0]"]),
                ("Y_INIT",["Y_INIT"])],
        PROG_COUNTER [("instance", "PCS"), ("src", "STEUERUNG.v:200")] [
                ("ADIVAR",["INFO_AU[3]"]),
                ("ALSB[1:0]",["ALSB[1:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("DISP[31:0]",["DISP_BR[31:0]"]),
                ("FPU_TRAP",["TRAPS[0]"]),
                ("IC_USER",["IC_USER"]),
                ("LOAD_PC",["LOAD_PC"]),
                ("NEW",["NEW"]),
                ("NEW_PC",["NEW_PC"]),
                ("NEXT_ADR",["NEXT_ADR"]),
                ("NEXT_PCA",["NEXT_PCA"]),
                ("PC_ARCHI[31:0]",["PC_ARCHI[31:0]"]),
                ("PC_ICACHE[31:0]",["PC_ICACHE[31:0]"]),
                ("PC_NEW[31:0]",["PC_NEW[31:0]"]),
                ("PC_SAVE[31:0]",["PC_SAVE[31:0]"]),
                ("SAVE_PC",["SAVE_PC"]),
                ("USED[2:0]",["USED[2:0]"]),
                ("USER",["PSR[8]"])]
    ] in
    PINST "draw_hier STEUERUNG" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let WRPORT {attrs::(string#string) list} conns =
    let inps = [ "WRITE",
                 "DRAM_Q[127:0]",
                 "WRDATA[31:0]",
                 "ENBYTE[3:0]",
                 "VADDR[1:0]",
                 "DADDR[1:0]" ] in
    let outs = [ "WDAT[127:0]",
                 "CAP_Q[31:0]",
                 "ENB[15:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_2",
                 "TmP_3",
                 "TmP_4",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _eq 3 "CACHE_LOGIK.v:84|CACHE_LOGIK.v:81" ["TmP_1"] ["WRITE", "VADDR[1:0]"] ["0b110"] ,
        _eq 3 "CACHE_LOGIK.v:83|CACHE_LOGIK.v:81" ["TmP_2"] ["WRITE", "VADDR[1:0]"] ["0b101"] ,
        _eq 3 "CACHE_LOGIK.v:82|CACHE_LOGIK.v:81" ["TmP_3"] ["WRITE", "VADDR[1:0]"] ["0b100"] ,
        _pmux 32 4 "CACHE_LOGIK.v:77|CACHE_LOGIK.v:73" ["CAP_Q[31:0]"] ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] ["DRAM_Q[31:0]", "DRAM_Q[63:32]", "DRAM_Q[95:64]", "DRAM_Q[127:96]"] ["TmP_7", "TmP_6", "TmP_5", "TmP_4"],
        _eq 2 "CACHE_LOGIK.v:77|CACHE_LOGIK.v:73" ["TmP_4"] ["DADDR[1:0]"] ["0b11"] ,
        _eq 2 "CACHE_LOGIK.v:76|CACHE_LOGIK.v:73" ["TmP_5"] ["DADDR[1:0]"] ["0b10"] ,
        _eq 2 "CACHE_LOGIK.v:75|CACHE_LOGIK.v:73" ["TmP_6"] ["DADDR[1:0]"] ["0b01"] ,
        _logic_not 2 "CACHE_LOGIK.v:74|CACHE_LOGIK.v:73" ["TmP_7"] ["DADDR[1:0]"],
        _mux 128 "CACHE_LOGIK.v:70" ["WDAT[127:0]"] ["DRAM_Q[127:0]"] ["WRDATA[31:0]", "WRDATA[31:0]", "WRDATA[31:0]", "WRDATA[31:0]"] ["WRITE"],
        _pmux 16 4 "CACHE_LOGIK.v:85|CACHE_LOGIK.v:81" ["ENB[15:0]"] ["0b1111111111111111"] ["0b000000000000", "ENBYTE[3:0]", "0b00000000", "ENBYTE[3:0]", "0b00000000", "ENBYTE[3:0]", "0b00000000", "ENBYTE[3:0]", "0b000000000000"] ["TmP_3", "TmP_2", "TmP_1", "TmP_0"],
        _eq 3 "CACHE_LOGIK.v:85|CACHE_LOGIK.v:81" ["TmP_0"] ["WRITE", "VADDR[1:0]"] ["0b111"] 
    ] in
    PINST "draw_hier WRPORT" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let WR_ALIGNER {attrs::(string#string) list} conns =
    let inps = [ "PACKET[3:0]",
                 "DP_Q[63:0]",
                 "SIZE[1:0]" ] in
    let outs = [ "WRDATA[31:0]",
                 "ENBYTE[3:0]" ] in
    let ints = md_extract_vectors [ "TmP_0",
                 "TmP_1",
                 "TmP_10",
                 "TmP_11",
                 "TmP_12",
                 "TmP_13",
                 "TmP_14",
                 "TmP_15",
                 "TmP_16",
                 "TmP_17",
                 "TmP_18",
                 "TmP_19",
                 "TmP_2",
                 "TmP_20",
                 "TmP_21",
                 "TmP_22",
                 "TmP_23",
                 "TmP_24",
                 "TmP_25",
                 "TmP_26",
                 "TmP_27",
                 "TmP_28",
                 "TmP_29",
                 "TmP_3",
                 "TmP_30",
                 "TmP_31",
                 "TmP_32",
                 "TmP_33",
                 "TmP_34",
                 "TmP_35",
                 "TmP_36",
                 "TmP_37",
                 "TmP_38",
                 "TmP_39[7:0]",
                 "TmP_4",
                 "TmP_40[7:0]",
                 "TmP_41[7:0]",
                 "TmP_42[7:0]",
                 "TmP_43[7:0]",
                 "TmP_44[7:0]",
                 "TmP_45[7:0]",
                 "TmP_5",
                 "TmP_6",
                 "TmP_7",
                 "TmP_8",
                 "TmP_9",
                 "dbyte0[7:0]",
                 "dbyte1[7:0]",
                 "dbyte2[7:0]",
                 "dbyte3[7:0]",
                 "switch" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        _and 1 "ALIGNER.v:100" ["switch"] ["TmP_7"] ["TmP_8"] ,
        _logic_reduce_or 2 "" ["TmP_0"] ["TmP_9", "TmP_16"],
        _logic_reduce_or 4 "" ["TmP_1"] ["TmP_31", "TmP_27", "TmP_18", "TmP_10"],
        _logic_reduce_or 3 "" ["TmP_2"] ["TmP_30", "TmP_19", "TmP_11"],
        _logic_reduce_or 3 "" ["TmP_3"] ["TmP_28", "TmP_21", "TmP_12"],
        _logic_reduce_or 4 "" ["TmP_4"] ["TmP_34", "TmP_26", "TmP_22", "TmP_13"],
        _logic_reduce_or 2 "" ["TmP_5"] ["TmP_24", "TmP_14"],
        _logic_reduce_or 5 "" ["TmP_6"] ["TmP_25", "TmP_23", "TmP_20", "TmP_17", "TmP_15"],
        _eq 2 "ALIGNER.v:100" ["TmP_7"] ["SIZE[1:0]"] ["0b11"] ,
        _logic_not 2 "ALIGNER.v:100" ["TmP_8"] ["PACKET[3:2]"],
        _pmux 4 10 "ALIGNER.v:166|ALIGNER.v:137" ["ENBYTE[3:0]"] ["0bxxxx"] ["0b0010010001101111111000011100001110000111"] ["TmP_33", "TmP_32", "TmP_29", "TmP_6", "TmP_5", "TmP_4", "TmP_3", "TmP_2", "TmP_1", "TmP_0"],
        _eq 5 "ALIGNER.v:166|ALIGNER.v:137" ["TmP_9"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b10111"] ,
        _eq 5 "ALIGNER.v:165|ALIGNER.v:137" ["TmP_10"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b10011"] ,
        _eq 5 "ALIGNER.v:164|ALIGNER.v:137" ["TmP_11"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b10110"] ,
        _eq 5 "ALIGNER.v:163|ALIGNER.v:137" ["TmP_12"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b10010"] ,
        _eq 5 "ALIGNER.v:162|ALIGNER.v:137" ["TmP_13"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b10101"] ,
        _eq 5 "ALIGNER.v:161|ALIGNER.v:137" ["TmP_14"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b10001"] ,
        _eq 4 "ALIGNER.v:160|ALIGNER.v:137" ["TmP_15"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b1000"] ,
        _eq 5 "ALIGNER.v:158|ALIGNER.v:137" ["TmP_16"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b11111"] ,
        _eq 6 "ALIGNER.v:157|ALIGNER.v:137" ["TmP_17"] ["SIZE[1:0]", "PACKET[3:0]"] ["0b110111"] ,
        _eq 6 "ALIGNER.v:156|ALIGNER.v:137" ["TmP_18"] ["SIZE[1:0]", "PACKET[3:0]"] ["0b110011"] ,
        _eq 5 "ALIGNER.v:155|ALIGNER.v:137" ["TmP_19"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b11110"] ,
        _eq 6 "ALIGNER.v:154|ALIGNER.v:137" ["TmP_20"] ["SIZE[1:0]", "PACKET[3:0]"] ["0b110110"] ,
        _eq 6 "ALIGNER.v:153|ALIGNER.v:137" ["TmP_21"] ["SIZE[1:0]", "PACKET[3:0]"] ["0b110010"] ,
        _eq 5 "ALIGNER.v:152|ALIGNER.v:137" ["TmP_22"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b11101"] ,
        _eq 6 "ALIGNER.v:151|ALIGNER.v:137" ["TmP_23"] ["SIZE[1:0]", "PACKET[3:0]"] ["0b110101"] ,
        _eq 6 "ALIGNER.v:150|ALIGNER.v:137" ["TmP_24"] ["SIZE[1:0]", "PACKET[3:0]"] ["0b110001"] ,
        _eq 4 "ALIGNER.v:149|ALIGNER.v:137" ["TmP_25"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b1100"] ,
        _eq 5 "ALIGNER.v:147|ALIGNER.v:137" ["TmP_26"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b01111"] ,
        _eq 5 "ALIGNER.v:146|ALIGNER.v:137" ["TmP_27"] ["SIZE[1:0]", "PACKET[3]", "PACKET[1:0]"] ["0b01011"] ,
        _eq 4 "ALIGNER.v:145|ALIGNER.v:137" ["TmP_28"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b0110"] ,
        _eq 4 "ALIGNER.v:144|ALIGNER.v:137" ["TmP_29"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b0101"] ,
        _eq 4 "ALIGNER.v:143|ALIGNER.v:137" ["TmP_30"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b0100"] ,
        _eq 4 "ALIGNER.v:141|ALIGNER.v:137" ["TmP_31"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b0011"] ,
        _eq 4 "ALIGNER.v:140|ALIGNER.v:137" ["TmP_32"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b0010"] ,
        _eq 4 "ALIGNER.v:139|ALIGNER.v:137" ["TmP_33"] ["SIZE[1:0]", "PACKET[1:0]"] ["0b0001"] ,
        _logic_not 4 "ALIGNER.v:138|ALIGNER.v:137" ["TmP_34"] ["SIZE[1:0]", "PACKET[1:0]"],
        _pmux 8 4 "ALIGNER.v:131|ALIGNER.v:127" ["dbyte3[7:0]"] ["0bxxxxxxxx"] ["TmP_45[7:0]", "TmP_44[7:0]", "TmP_43[7:0]", "TmP_39[7:0]"] ["TmP_38", "TmP_37", "TmP_36", "TmP_35"],
        _pmux 8 4 "ALIGNER.v:123|ALIGNER.v:119" ["dbyte2[7:0]"] ["0bxxxxxxxx"] ["TmP_44[7:0]", "TmP_43[7:0]", "TmP_39[7:0]", "TmP_40[7:0]"] ["TmP_38", "TmP_37", "TmP_36", "TmP_35"],
        _pmux 8 4 "ALIGNER.v:115|ALIGNER.v:111" ["dbyte1[7:0]"] ["0bxxxxxxxx"] ["TmP_43[7:0]", "TmP_39[7:0]", "TmP_40[7:0]", "TmP_41[7:0]"] ["TmP_38", "TmP_37", "TmP_36", "TmP_35"],
        _pmux 8 4 "ALIGNER.v:107|ALIGNER.v:103" ["dbyte0[7:0]"] ["0bxxxxxxxx"] ["TmP_39[7:0]", "TmP_40[7:0]", "TmP_41[7:0]", "TmP_42[7:0]"] ["TmP_38", "TmP_37", "TmP_36", "TmP_35"],
        _eq 2 "ALIGNER.v:107|ALIGNER.v:103" ["TmP_35"] ["PACKET[1:0]"] ["0b11"] ,
        _eq 2 "ALIGNER.v:106|ALIGNER.v:103" ["TmP_36"] ["PACKET[1:0]"] ["0b10"] ,
        _eq 2 "ALIGNER.v:105|ALIGNER.v:103" ["TmP_37"] ["PACKET[1:0]"] ["0b01"] ,
        _logic_not 2 "ALIGNER.v:104|ALIGNER.v:103" ["TmP_38"] ["PACKET[1:0]"],
        _mux 8 "ALIGNER.v:107" ["TmP_42[7:0]"] ["DP_Q[15:8]"] ["DP_Q[47:40]"] ["PACKET[3]"],
        _mux 8 "ALIGNER.v:115" ["TmP_41[7:0]"] ["DP_Q[23:16]"] ["DP_Q[55:48]"] ["PACKET[3]"],
        _mux 8 "ALIGNER.v:123" ["TmP_40[7:0]"] ["DP_Q[31:24]"] ["DP_Q[63:56]"] ["PACKET[3]"],
        _mux 8 "ALIGNER.v:128" ["TmP_45[7:0]"] ["DP_Q[63:56]"] ["DP_Q[31:24]"] ["switch"],
        _mux 8 "ALIGNER.v:129" ["TmP_44[7:0]"] ["DP_Q[55:48]"] ["DP_Q[23:16]"] ["switch"],
        _mux 8 "ALIGNER.v:130" ["TmP_43[7:0]"] ["DP_Q[47:40]"] ["DP_Q[15:8]"] ["switch"],
        _mux 8 "ALIGNER.v:131" ["TmP_39[7:0]"] ["DP_Q[39:32]"] ["DP_Q[7:0]"] ["switch"],
        _buf 32 "ALIGNER.v:52" ["WRDATA[31:0]"] ["dbyte3[7:0]", "dbyte2[7:0]", "dbyte1[7:0]", "dbyte0[7:0]"]
    ] in
    PINST "draw_hier WR_ALIGNER" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;


let M32632 {attrs::(string#string) list} conns =
    let inps = [ "BCLK",
                 "DRAMSZ[2:0]",
                 "BRESET",
                 "NMI_N",
                 "INT_N",
                 "IO_Q[31:0]",
                 "IO_READY",
                 "ENDRAM",
                 "IC_MDONE",
                 "DC_MDONE",
                 "ENWR",
                 "DRAM_Q[127:0]",
                 "DC_INHIBIT",
                 "IC_INHIBIT",
                 "HOLD",
                 "DMA_CHK",
                 "DMA_AA[24:0]",
                 "COP_DONE",
                 "COP_IN[63:0]" ] in
    let outs = [ "STATUS[3:0]",
                 "ILO",
                 "STATSIGS[7:0]",
                 "IO_WR",
                 "IO_RD",
                 "IO_A[31:0]",
                 "IO_BE[3:0]",
                 "IO_DI[31:0]",
                 "IC_ACC",
                 "IDRAM_ADR[28:0]",
                 "DC_ACC",
                 "DC_WR",
                 "DRAM_ADR[28:0]",
                 "DRAM_DI[35:0]",
                 "HLDA",
                 "COP_GO",
                 "COP_OP[23:0]",
                 "COP_OUT[127:0]" ] in
    let ints = md_extract_vectors [ "ACB_ZERO",
                 "ACC_DONE",
                 "ACC_FELD[14:0]",
                 "ACC_STAT[5:0]",
                 "CFG[12:0]",
                 "CINV[3:0]",
                 "CTRL_QW[1:0]",
                 "DATA_HOLD",
                 "DBG_HIT",
                 "DBG_IN[38:0]",
                 "DC_ABORT",
                 "DC_INIT",
                 "DETOIP[12:0]",
                 "DIN[31:0]",
                 "DISP[31:0]",
                 "DONE",
                 "DP_Q[63:0]",
                 "D_IOA[31:0]",
                 "D_IOBE[3:0]",
                 "D_IORD",
                 "D_IORDY",
                 "D_IOWR",
                 "ENA_HK",
                 "GENSTAT[2:0]",
                 "IACC_STAT[3:0]",
                 "ICTODC[3:0]",
                 "IC_DIN[31:0]",
                 "IC_INIT",
                 "IC_PREQ",
                 "IC_READ",
                 "IC_SIGS[1:0]",
                 "IC_TEX[2:0]",
                 "IC_USER",
                 "IC_VA[19:0]",
                 "ILO_SIG",
                 "IMME_Q[31:0]",
                 "INFO_AU[6:0]",
                 "IVAR[1:0]",
                 "IVAR_MUX",
                 "I_IOA[31:0]",
                 "I_IORD",
                 "I_IORDY",
                 "KDET",
                 "KOLLISION",
                 "KOLLI_A[24:0]",
                 "LD_DIN",
                 "LD_IMME",
                 "LD_OUT[1:0]",
                 "MCR[3:0]",
                 "MMU_DIN[23:0]",
                 "MMU_UPDATE[1:0]",
                 "OPER[10:0]",
                 "PACKET[3:0]",
                 "PC_ARCHI[31:0]",
                 "PC_ICACHE[31:0]",
                 "PC_NEW[31:0]",
                 "PROT_ERROR",
                 "PSR[11:0]",
                 "PTB_SEL",
                 "PTB_WR",
                 "PTE_STAT[1:0]",
                 "QWATWO",
                 "RDAA[7:0]",
                 "RDAB[7:0]",
                 "READ",
                 "RMW",
                 "RWVAL[2:0]",
                 "RWVFLAG",
                 "SAVE_PC",
                 "SIZE[1:0]",
                 "START[1:0]",
                 "STOP_CINV",
                 "STRING[4:0]",
                 "TRAPS[5:0]",
                 "VADR[31:0]",
                 "WMASKE[1:0]",
                 "WRADR[5:0]",
                 "WREN_REG",
                 "WRITE",
                 "WR_REG",
                 "Y_INIT",
                 "ZTEST" ] in
    let _mk_fa f = (f, ((assoc f conns) catch [f])) in
    let _fa_inps = map _mk_fa inps in
    let _fa_outs = map _mk_fa outs in
    let _body = [
        DCACHE [("instance", "ARMS"), ("src", "M32632.v:184")] [
                ("ACC_STAT[5:0]",["ACC_STAT[5:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CFG[1:0]",["CFG[10:9]"]),
                ("CINVAL[1:0]",["CINV[1:0]"]),
                ("CTRL_QW[1:0]",["CTRL_QW[1:0]"]),
                ("DBG_HIT",["DBG_HIT"]),
                ("DBG_IN[38:0]",["DBG_IN[38:0]"]),
                ("DMA_AA[24:0]",["DMA_AA[24:0]"]),
                ("DMA_CHK",["DMA_CHK"]),
                ("DP_DI[31:0]",["DIN[31:0]"]),
                ("DP_Q[63:0]",["DP_Q[63:0]"]),
                ("DRAMSZ[2:0]",["DRAMSZ[2:0]"]),
                ("DRAM_A[28:0]",["DRAM_ADR[28:0]"]),
                ("DRAM_ACC",["DC_ACC"]),
                ("DRAM_DI[35:0]",["DRAM_DI[35:0]"]),
                ("DRAM_Q[127:0]",["DRAM_Q[127:0]"]),
                ("DRAM_WR",["DC_WR"]),
                ("ENDRAM",["ENDRAM"]),
                ("ENWR",["ENWR"]),
                ("HLDA",["HLDA"]),
                ("IACC_STAT[2:0]",["IACC_STAT[3:1]"]),
                ("ICTODC[3:0]",["ICTODC[3:0]"]),
                ("IC_PREQ",["IC_PREQ"]),
                ("IC_SIGS[1:0]",["IC_SIGS[1:0]"]),
                ("IC_VA[19:0]",["IC_VA[19:0]"]),
                ("INHIBIT",["DC_INHIBIT"]),
                ("INIT_RUN",["DC_INIT"]),
                ("IO_A[31:0]",["D_IOA[31:0]"]),
                ("IO_BE[3:0]",["D_IOBE[3:0]"]),
                ("IO_DI[31:0]",["IO_DI[31:0]"]),
                ("IO_Q[31:0]",["IO_Q[31:0]"]),
                ("IO_RD",["D_IORD"]),
                ("IO_READY",["D_IORDY"]),
                ("IO_WR",["D_IOWR"]),
                ("IVAR[1:0]",["IVAR[1:0]"]),
                ("KDET",["KDET"]),
                ("KOLLI_A[24:0]",["KOLLI_A[24:0]"]),
                ("MCR_FLAGS[3:0]",["MCR[3:0]"]),
                ("MDONE",["DC_MDONE"]),
                ("MMU_DIN[23:0]",["MMU_DIN[23:0]"]),
                ("PACKET[3:0]",["PACKET[3:0]"]),
                ("PSR_USER",["INFO_AU[1]"]),
                ("PTB_SEL",["PTB_SEL"]),
                ("PTB_WR",["PTB_WR"]),
                ("PTE_STAT[1:0]",["PTE_STAT[1:0]"]),
                ("QWATWO",["QWATWO"]),
                ("READ",["READ"]),
                ("RMW",["RMW"]),
                ("RWVAL[2:0]",["RWVAL[2:0]"]),
                ("RWVFLAG",["RWVFLAG"]),
                ("SIZE[1:0]",["SIZE[1:0]"]),
                ("VADR[31:0]",["VADR[31:0]"]),
                ("WRITE",["WRITE"]),
                ("ZTEST",["ZTEST"])],
        STEUERUNG [("instance", "BRAIN"), ("src", "M32632.v:356")] [
                ("ACB_ZERO",["ACB_ZERO"]),
                ("ACC_FELD[14:0]",["ACC_FELD[14:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CFG[8:0]",["CFG[8:0]"]),
                ("COP_OP[23:0]",["COP_OP[23:0]"]),
                ("DATA_HOLD",["DATA_HOLD"]),
                ("DC_ABORT",["DC_ABORT"]),
                ("DC_ACC_DONE",["ACC_DONE"]),
                ("DC_INIT",["DC_INIT"]),
                ("DETOIP[12:0]",["DETOIP[12:0]"]),
                ("DISP[31:0]",["DISP[31:0]"]),
                ("DONE",["DONE"]),
                ("ENA_HK",["ENA_HK"]),
                ("GENSTAT[2:0]",["GENSTAT[2:0]"]),
                ("IACC_STAT[3:0]",["IACC_STAT[3:0]"]),
                ("IC_DIN[31:0]",["IC_DIN[31:0]"]),
                ("IC_INIT",["IC_INIT"]),
                ("IC_READ",["IC_READ"]),
                ("IC_TEX[2:0]",["IC_TEX[2:0]"]),
                ("IC_USER",["IC_USER"]),
                ("ILO",["ILO_SIG"]),
                ("IMME_Q[31:0]",["IMME_Q[31:0]"]),
                ("INFO_AU[6:0]",["INFO_AU[6:0]"]),
                ("INT_N",["INT_N"]),
                ("LD_DIN",["LD_DIN"]),
                ("LD_IMME",["LD_IMME"]),
                ("LD_OUT[1:0]",["LD_OUT[1:0]"]),
                ("MMU_UPDATE[1:0]",["MMU_UPDATE[1:0]"]),
                ("NMI_N",["NMI_N"]),
                ("OPER[10:0]",["OPER[10:0]"]),
                ("PC_ARCHI[31:0]",["PC_ARCHI[31:0]"]),
                ("PC_ICACHE[31:0]",["PC_ICACHE[31:0]"]),
                ("PC_NEW[31:0]",["PC_NEW[31:0]"]),
                ("PROT_ERROR",["PROT_ERROR"]),
                ("PSR[11:0]",["PSR[11:0]"]),
                ("RDAA[7:0]",["RDAA[7:0]"]),
                ("RDAB[7:0]",["RDAB[7:0]"]),
                ("RWVAL[2:0]",["RWVAL[2:0]"]),
                ("SAVE_PC",["SAVE_PC"]),
                ("START[1:0]",["START[1:0]"]),
                ("STOP_CINV",["STOP_CINV"]),
                ("STRING[4:0]",["STRING[4:0]"]),
                ("TRAPS[5:0]",["TRAPS[5:0]"]),
                ("WMASKE[1:0]",["WMASKE[1:0]"]),
                ("WRADR[5:0]",["WRADR[5:0]"]),
                ("WREN",["WREN_REG"]),
                ("WR_REG",["WR_REG"]),
                ("Y_INIT",["Y_INIT"])],
        IO_SWITCH [("instance", "ISWITCH"), ("src", "M32632.v:410")] [
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("DCWACC[1:0]",["DC_WR", "DC_ACC"]),
                ("D_IOA[31:0]",["D_IOA[31:0]"]),
                ("D_IOBE[3:0]",["D_IOBE[3:0]"]),
                ("D_IORD",["D_IORD"]),
                ("D_IORDY",["D_IORDY"]),
                ("D_IOWR",["D_IOWR"]),
                ("GENSTAT[2:0]",["GENSTAT[2:0]"]),
                ("ILO",["ILO"]),
                ("ILO_SIG",["ILO_SIG"]),
                ("IO_A[31:0]",["IO_A[31:0]"]),
                ("IO_BE[3:0]",["IO_BE[3:0]"]),
                ("IO_RD",["IO_RD"]),
                ("IO_READY",["IO_READY"]),
                ("IO_WR",["IO_WR"]),
                ("I_IOA[31:0]",["I_IOA[31:0]"]),
                ("I_IORD",["I_IORD"]),
                ("I_IORDY",["I_IORDY"]),
                ("STATUS[3:0]",["STATUS[3:0]"])],
        ICACHE [("instance", "LEGS"), ("src", "M32632.v:310")] [
                ("ACC_OK",["IACC_STAT[0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CFG[1:0]",["CFG[12:11]"]),
                ("CINVAL[1:0]",["CINV[3:2]"]),
                ("DATA_HOLD",["DATA_HOLD"]),
                ("DRAMSZ[2:0]",["DRAMSZ[2:0]"]),
                ("DRAM_A[28:0]",["IDRAM_ADR[28:0]"]),
                ("DRAM_ACC",["IC_ACC"]),
                ("DRAM_Q[127:0]",["DRAM_Q[127:0]"]),
                ("DRAM_WR",["DC_WR"]),
                ("ENA_HK",["ENA_HK"]),
                ("ENDRAM",["ENDRAM"]),
                ("HOLD",["HOLD"]),
                ("ICTODC[3:0]",["ICTODC[3:0]"]),
                ("IC_DQ[31:0]",["IC_DIN[31:0]"]),
                ("IC_PREQ",["IC_PREQ"]),
                ("IC_SIGS[1:0]",["IC_SIGS[1:0]"]),
                ("IC_VA[19:0]",["IC_VA[19:0]"]),
                ("INHIBIT",["IC_INHIBIT"]),
                ("INIT_RUN",["IC_INIT"]),
                ("IO_A[31:0]",["I_IOA[31:0]"]),
                ("IO_Q[31:0]",["IO_Q[31:0]"]),
                ("IO_RD",["I_IORD"]),
                ("IO_READY",["I_IORDY"]),
                ("IVAR[1:0]",["IVAR[1:0]"]),
                ("IVAR_MUX",["IVAR_MUX"]),
                ("KDET",["KDET"]),
                ("KOLLISION",["KOLLISION"]),
                ("KOLLI_A[24:0]",["KOLLI_A[24:0]"]),
                ("MCR_FLAGS[3:0]",["MCR[3:0]"]),
                ("MDONE",["IC_MDONE"]),
                ("MMU_DIN[23:0]",["MMU_DIN[23:0]"]),
                ("PROT_ERROR",["PROT_ERROR"]),
                ("PSR_USER",["IC_USER"]),
                ("PTB_SEL",["PTB_SEL"]),
                ("PTB_WR",["PTB_WR"]),
                ("READ_I",["IC_READ"]),
                ("STOP_CINV",["STOP_CINV"]),
                ("VADR_D[19:0]",["VADR[31:12]"]),
                ("VADR_I[31:0]",["PC_ICACHE[31:0]"])],
        MAKE_STAT [("instance", "MKSTAT"), ("src", "M32632.v:435")] [
                ("BCLK",["BCLK"]),
                ("DACC_OK",["ACC_STAT[0]"]),
                ("DATA_HOLD",["DATA_HOLD"]),
                ("DC_ACC",["DC_ACC"]),
                ("DC_MDONE",["DC_MDONE"]),
                ("DPTE_ACC",["PTE_STAT[0]"]),
                ("DRAM_WR",["DC_WR"]),
                ("IACC_OK",["IACC_STAT[0]"]),
                ("IC_ACC",["IC_ACC"]),
                ("IC_MDONE",["IC_MDONE"]),
                ("IC_READ",["IC_READ"]),
                ("IPTE_ACC",["PTE_STAT[1]"]),
                ("KOLLISION",["KOLLISION"]),
                ("READ",["READ"]),
                ("STATSIGS[7:0]",["STATSIGS[7:0]"])],
        DATENPFAD [("instance", "STOMACH"), ("src", "M32632.v:244")] [
                ("ABORT",["DC_ABORT"]),
                ("ACB_ZERO",["ACB_ZERO"]),
                ("ACC_DONE",["ACC_DONE"]),
                ("ACC_FELD[14:0]",["ACC_FELD[14:0]"]),
                ("ACC_STAT[5:0]",["ACC_STAT[5:0]"]),
                ("BCLK",["BCLK"]),
                ("BRESET",["BRESET"]),
                ("CFG[12:0]",["CFG[12:0]"]),
                ("CINV[3:0]",["CINV[3:0]"]),
                ("COP_DONE",["COP_DONE"]),
                ("COP_GO",["COP_GO"]),
                ("COP_IN[63:0]",["COP_IN[63:0]"]),
                ("COP_OP[23:0]",["COP_OP[23:0]"]),
                ("COP_OUT[127:0]",["COP_OUT[127:0]"]),
                ("CTRL_QW[1:0]",["CTRL_QW[1:0]"]),
                ("DBG_HIT",["DBG_HIT"]),
                ("DBG_IN[38:0]",["DBG_IN[38:0]"]),
                ("DETOIP[12:0]",["DETOIP[12:0]"]),
                ("DIN[31:0]",["DIN[31:0]"]),
                ("DISP[31:0]",["DISP[31:0]"]),
                ("DONE",["DONE"]),
                ("DP_Q[63:0]",["DP_Q[63:0]"]),
                ("IC_TEX[2:0]",["IC_TEX[2:0]"]),
                ("IC_USER",["IC_USER"]),
                ("IMME_Q[31:0]",["IMME_Q[31:0]"]),
                ("INFO_AU[6:0]",["INFO_AU[6:0]"]),
                ("IO_READY",["D_IORDY"]),
                ("IVAR[1:0]",["IVAR[1:0]"]),
                ("IVAR_MUX",["IVAR_MUX"]),
                ("LD_DIN",["LD_DIN"]),
                ("LD_IMME",["LD_IMME"]),
                ("LD_OUT[1:0]",["LD_OUT[1:0]"]),
                ("MCR[3:0]",["MCR[3:0]"]),
                ("MMU_UPDATE[1:0]",["MMU_UPDATE[1:0]"]),
                ("OPER[10:0]",["OPER[10:0]"]),
                ("PACKET[3:0]",["PACKET[3:0]"]),
                ("PC_ARCHI[31:0]",["PC_ARCHI[31:0]"]),
                ("PC_ICACHE[31:0]",["PC_ICACHE[31:0]"]),
                ("PC_NEW[31:0]",["PC_NEW[31:0]"]),
                ("PSR[11:0]",["PSR[11:0]"]),
                ("PTB_SEL",["PTB_SEL"]),
                ("PTB_WR",["PTB_WR"]),
                ("QWATWO",["QWATWO"]),
                ("RDAA[7:0]",["RDAA[7:0]"]),
                ("RDAB[7:0]",["RDAB[7:0]"]),
                ("READ_OUT",["READ"]),
                ("RMW",["RMW"]),
                ("RWVFLAG",["RWVFLAG"]),
                ("SAVE_PC",["SAVE_PC"]),
                ("SIZE[1:0]",["SIZE[1:0]"]),
                ("START[1:0]",["START[1:0]"]),
                ("STRING[4:0]",["STRING[4:0]"]),
                ("TRAPS[5:0]",["TRAPS[5:0]"]),
                ("VADR[31:0]",["VADR[31:0]"]),
                ("WMASKE[1:0]",["WMASKE[1:0]"]),
                ("WRADR[5:0]",["WRADR[5:0]"]),
                ("WREN",["WREN_REG"]),
                ("WRITE_OUT",["WRITE"]),
                ("WR_REG",["WR_REG"]),
                ("Y_INIT",["Y_INIT"]),
                ("ZTEST",["ZTEST"])]
    ] in
    PINST "draw_hier M32632" attrs F _fa_inps _fa_outs ints (P_HIER _body)
;

let p = M32632 [] [];

p fseq 1111111111111;

let ckt = pexlif2fsm p;

wtime ckt;

