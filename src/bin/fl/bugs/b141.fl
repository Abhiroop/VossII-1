//-------------------------------------------------------------------
// Copyright 2020 Carl-Johan Seger
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

let SZ = 16;

lettype iexpr =       
        	I_CONST {v::int}
        |   I_VAR {name::string}	        
        |   I_EQ {a::iexpr} {b::iexpr}
        |   I_GT {a::iexpr} {b::iexpr}
        |   I_GTE {a::iexpr} {b::iexpr}        
        |   I_LT {a::iexpr} {b::iexpr}
        |   I_LTE {a::iexpr} {b::iexpr}        
        |   I_ADD {a::iexpr} {b::iexpr}
        |   I_SUB {a::iexpr} {b::iexpr}
        |   I_MUL {a::iexpr} {b::iexpr}
        |   I_DIV {a::iexpr} {b::iexpr}
        |   I_MOD {a::iexpr} {b::iexpr}
        |   I_ITE {cond::iexpr} {t::iexpr} {e::iexpr}
        |   I_ABS {a::iexpr}
		|   I_AND {a::iexpr} {b::iexpr}
        |   I_OR {a::iexpr} {b::iexpr}
        |   I_NOT {a::iexpr}        
;

letrec Piexpr (I_CONST v) = sprintf "%d" v
/\ 	   Piexpr (I_VAR n)   = n
/\	   Piexpr (I_EQ a b)  = sprintf "(%s == %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_GT a b)  = sprintf "(%s > %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_GTE a b) = sprintf "(%s >= %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_LT a b)  = sprintf "(%s < %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_LTE a b) = sprintf "(%s <= %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_ADD a b) = sprintf "(%s + %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_SUB a b) = sprintf "(%s - %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_MUL a b) = sprintf "(%s * %s)" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_ITE c t e) = sprintf "(IF %s THEN %s ELSE %s)" (Piexpr c) (Piexpr t) (Piexpr e)
/\	   Piexpr (I_ABS a) = sprintf "(abs(%s))" (Piexpr a)
/\	   Piexpr (I_AND a b) = sprintf "%s AND %s" (Piexpr a) (Piexpr b)
/\	   Piexpr (I_NOT a) = sprintf "NOT(%s)" (Piexpr a)
;

install_print_function Piexpr;

lettype expr = EXPR iexpr bv;

let Pexpr (EXPR iexpr bv) =
	Piexpr iexpr
;
install_print_function Pexpr;

//-----------------user functions----------------
let var name =
    let ie = I_VAR name in
    let bv = bv_ZX (bv_variable (sprintf "%s[%d:0]" name (SZ-2))) in
    EXPR ie bv
;

let constrained_var name f =
	let ie = I_VAR name in
	let name = (bv_variable (sprintf "%s[%d:0]" name (SZ-2))) in
    let bv = bv_ZX name in
    let raw = EXPR ie bv in
    val (EXPR _ b) = f(raw) then
    let cond = bv_eq b (int2bv 1) in
    let bv' = substitute (fparam (depends name) cond) name in
    (EXPR ie bv')
;	

	

let const v =
    let ie = I_CONST v in
    let bv = int2bv v in
    EXPR ie bv
;

let eq (EXPR e1 b1) (EXPR e2 b2) =
	let cond = bv_eq b1 b2 in
	cond == T =>  EXPR (I_CONST 1) (int2bv 1) |
	cond == F =>  EXPR (I_CONST 0) (int2bv 0) |
    EXPR (I_EQ e1 e2) (cond => (int2bv 1) | (int2bv 0))
;
overload = = eq;

let gt (EXPR e1 b1) (EXPR e2 b2) =
	let cond = bv_greater b1 b2 in
	cond == T =>  EXPR (I_CONST 1) (int2bv 1) |
	cond == F =>  EXPR (I_CONST 0) (int2bv 0) |
	EXPR (I_GT e1 e2) (cond => (int2bv 1) | (int2bv 0))
;
overload > > gt;

let gte (EXPR e1 b1) (EXPR e2 b2) =
	let cond = bv_geq b1 b2 in
	cond == T => EXPR (I_CONST 1) (int2bv 1)|
	cond == F => EXPR (I_CONST 0) (int2bv 0)|
	EXPR (I_GTE e1 e2) (cond => (int2bv 1) | (int2bv 0))
;

overload >= >= gte;

let lt (EXPR e1 b1) (EXPR e2 b2) =
	let cond = bv_less b1 b2 in
	cond == T =>  EXPR (I_CONST 1) (int2bv 1) |
	cond == F =>  EXPR (I_CONST 0) (int2bv 0) |
	EXPR (I_LT e1 e2) (cond => (int2bv 1) | (int2bv 0))
;
overload < < lt;

let lte (EXPR e1 b1) (EXPR e2 b2) =
	let cond = bv_leq b1 b2 in
	cond == T => EXPR (I_CONST 1) (int2bv 1) |
	cond == F => EXPR (I_CONST 0) (int2bv 0) |
	EXPR (I_LTE e1 e2) (cond => (int2bv 1) | (int2bv 0))
;
overload <= <= lte;

let and (EXPR e1 b1) (EXPR e2 b2) = 
	let cond = (bv_AND b1 b2) = (int2bv 1) in
	cond == T => EXPR (I_CONST 1) (int2bv 1)|
	cond == F => EXPR (I_CONST 0) (int2bv 0)|
	EXPR (I_AND e1 e2) (cond => (int2bv 1) | (int2bv 0))
;
overload AND AND and;

let or (EXPR e1 b1) (EXPR e2 b2) = 
	let cond = (bv_OR b1 b2) = (int2bv 1) in
	cond == T => EXPR (I_CONST 1) (int2bv 1)|
	cond == F => EXPR (I_CONST 0) (int2bv 0)|
	EXPR (I_OR e1 e2) (cond => (int2bv 1) | (int2bv 0))
;
overload OR OR or;

let not (EXPR e1 b1) =
	b1 == (int2bv 0) => EXPR (I_CONST 1) (int2bv 1)|
	b1 == (int2bv 1) => EXPR (I_CONST 0) (int2bv 0)|
	EXPR (I_NOT e1) (bv_NOT b1)
;
overload NOT NOT not;

let add (EXPR e1 b1) (EXPR e2 b2) =
	let cond = bv_add b1 b2 in
	(depends cond) == [] =>		
		EXPR (I_CONST (bv2int cond)) cond
	|	EXPR (I_ADD e1 e2) cond
;
overload + + add;

let sub (EXPR e1 b1) (EXPR e2 b2) = 
	let cond = bv_sub b1 b2 in
	(depends cond) == [] =>		
		EXPR (I_CONST (bv2int cond)) cond
	|	EXPR (I_SUB e1 e2) cond
;
overload - - sub;

let mul (EXPR e1 b1) (EXPR e2 b2) = 
	let cond = bv_mul b1 b2 in
	(depends cond) == [] =>		
		EXPR (I_CONST (bv2int cond)) cond
	|	EXPR (I_MUL e1 e2) cond
;
overload * * mul;

let IF c = c;
let ELSE t e = (t,e);
let THEN1 c (t,e) =
	val (EXPR ec bc) = c in
	let cond = bv_eq bc (int2bv 1) then
	cond == T => t |
	cond == F => e |
    val (EXPR et bt) = t in
    val (EXPR ee be) = e in
    (EXPR (I_ITE ec et ee) (cond => bt | be))	    
;
open_overload {THEN:: expr-> (*a # *a) -> *a};
if_then_else_binder THEN ELSE;
let d_THEN {c :: expr} {q :: (void # void)} = 
	val (EXPR e b) = c in
	val (t,e) = q in
	b == '1 => t |
	b == '0 => e |
	((b = '1) => t | e) fseq ()	
;

add_open_overload THEN d_THEN;
add_open_overload THEN THEN1;


let THENp c (({t1 :: *a},{t2 :: *b}),({e1 :: *a},{e2 :: *b})) = 
	(((defix THEN) c (t1,e1)), ((defix THEN) c (t2,e2)))
;

letrec THENl c ((t:ts),(e:es)) =
	((defix THEN) c (t,e)): (THENl c (ts,es))
/\  THENl c ([],[]) = []
;
add_open_overload THEN THENp THENl;

if_then_else_binder THEN ELSE;

let abs (EXPR e1 b1) = 
	let cond = bv_less b1 (int2bv 0) in
	cond == T => (EXPR e1 b1) * (const (-1)) |
	cond == F => (EXPR e1 b1) |
	EXPR (I_ABS e1) (cond => bv_mul b1 (int2bv (-1)) | b1)
;

let I_T = EXPR (I_CONST 1) (int2bv 1);
let I_F = NOT I_T;

let r = ref I_F;
let s = (var "s");
let q = IF (eq s (const 1)) THEN (r:= I_T) ELSE ();
q fseq 1;
