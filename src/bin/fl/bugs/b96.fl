load "ste.fl";

let ADDSUB conns =
    let inps = [ "dataa[2:0]",
                 "datab[2:0]",
                 "add_sub"
	       ] in
    let outs = [ "result[2:0]" ] in
    let ints = [ "TmP_0[2:0]",
                 "TmP_1[2:0]",
                 "TmP_2",
                 "TmP_3[2:0]"
	       ] in
    let mk_fa f = (f, ((assoc f conns) catch [f])) in
    let fa_inps = map mk_fa inps in
    let fa_outs = map mk_fa outs in
    let body = [
        _add 3 "SP_FPU.v:57" ["result[2:0]"] ["TmP_0[2:0]"] ["0b00", "TmP_2"],
        _add 3 "SP_FPU.v:57" ["TmP_0[2:0]"] ["dataa[2:0]"] ["TmP_3[2:0]"] ,
        _not 3 "SP_FPU.v:57" ["TmP_1[2:0]"] ["datab[2:0]"],
        _not 1 "SP_FPU.v:57" ["TmP_2"] ["add_sub"],
        _mux 3 "SP_FPU.v:57" ["TmP_3[2:0]"] ["TmP_1[2:0]"] ["datab[2:0]"] ["add_sub"]
    ] in
    PINST "ADDSUB" [] F fa_inps fa_outs ints (P_HIER body)
;

let p = ADDSUB [];

//p;


let ckt = pexlif2fsm p;
time ckt;

update_vossrc "VERBOSE-FSM-PRINT" "YES";
ckt;
 
let vis = visualize_fanin ckt [] 10 ["result[2:0]"];
vis;

val(final,tcl) = visualisation2tcl vis;

final;
list2str T "\n" "\n" "\n" id tcl;


//update_vossrc "VERBOSE-STE-RUN" "YES";


let ste = STE "" ckt [] [
    (T,"TmP_0[2]",variable "a2",0,2),
    (T,"TmP_0[1]",variable "a1",0,2),
    (T,"TmP_0[0]",variable "a0",0,2),
    (T,"TmP_2",variable "b",0,2)]
    []
    (map (\n.n,0,3) (nodes ckt))
;
//ste;

//get_trace ste "result[0]";

//fanout ckt "TmP_0[2]";
//fanout ckt "TmP_0[1]";
//fanout ckt "TmP_0[0]";
//fanin ckt "result[0]";
//
//get_trace ste "result[2]";
//get_trace ste "result[1]";
//get_trace ste "result[0]";
